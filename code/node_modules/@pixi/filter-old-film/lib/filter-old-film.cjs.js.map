{"version":3,"file":"filter-old-film.cjs.js","sources":["../src/OldFilmFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './old-film.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The OldFilmFilter applies a Old film effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/old-film.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-old-film|@pixi/filter-old-film}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object|number} [options] - The optional parameters of old film effect.\n *                        When options is a number , it will be `seed`\n * @param {number} [options.sepia=0.3] - The amount of saturation of sepia effect,\n *        a value of `1` is more saturation and closer to `0` is less, and a value of\n *        `0` produces no sepia effect\n * @param {number} [options.noise=0.3] - Opacity/intensity of the noise effect between `0` and `1`\n * @param {number} [options.noiseSize=1.0] - The size of the noise particles\n * @param {number} [options.scratch=0.5] - How often scratches appear\n * @param {number} [options.scratchDensity=0.3] - The density of the number of scratches\n * @param {number} [options.scratchWidth=1.0] - The width of the scratches\n * @param {number} [options.vignetting=0.3] - The radius of the vignette effect, smaller\n *        values produces a smaller vignette\n * @param {number} [options.vignettingAlpha=1.0] - Amount of opacity of vignette\n * @param {number} [options.vignettingBlur=0.3] - Blur intensity of the vignette\n * @param {number} [seed=0] - A see value to apply to the random noise generation\n */\nclass OldFilmFilter extends Filter {\n    constructor(options, seed = 0) {\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        if (typeof options === 'number') {\n            this.seed = options;\n            options = null;\n        }\n        else {\n            /**\n             * A see value to apply to the random noise generation\n             * @member {number}\n             */\n            this.seed = seed;\n        }\n\n        Object.assign(this, {\n            sepia: 0.3,\n            noise: 0.3,\n            noiseSize: 1.0,\n            scratch: 0.5,\n            scratchDensity: 0.3,\n            scratchWidth: 1.0,\n            vignetting: 0.3,\n            vignettingAlpha: 1.0,\n            vignettingBlur: 0.3,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        // named `seed` because in the most programming languages,\n        // `random` used for \"the function for generating random value\".\n        this.uniforms.seed = this.seed;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n\n    /**\n     * The amount of saturation of sepia effect,\n     * a value of `1` is more saturation and closer to `0` is less,\n     * and a value of `0` produces no sepia effect\n     *\n     * @member {number}\n     * @default 0\n     */\n    set sepia(value) {\n        this.uniforms.sepia = value;\n    }\n\n    get sepia() {\n        return this.uniforms.sepia;\n    }\n\n    /**\n     * Opacity/intensity of the noise effect between `0` and `1`\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noise(value) {\n        this.uniforms.noise = value;\n    }\n\n    get noise() {\n        return this.uniforms.noise;\n    }\n\n    /**\n     * The size of the noise particles\n     *\n     * @member {number}\n     * @default 0\n     */\n    set noiseSize(value) {\n        this.uniforms.noiseSize = value;\n    }\n\n    get noiseSize() {\n        return this.uniforms.noiseSize;\n    }\n\n    /**\n     * How often scratches appear\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratch(value) {\n        this.uniforms.scratch = value;\n    }\n\n    get scratch() {\n        return this.uniforms.scratch;\n    }\n\n    /**\n     * The density of the number of scratches\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratchDensity(value) {\n        this.uniforms.scratchDensity = value;\n    }\n\n    get scratchDensity() {\n        return this.uniforms.scratchDensity;\n    }\n\n    /**\n     * The width of the scratches\n     *\n     * @member {number}\n     * @default 0\n     */\n    set scratchWidth(value) {\n        this.uniforms.scratchWidth = value;\n    }\n\n    get scratchWidth() {\n        return this.uniforms.scratchWidth;\n    }\n\n    /**\n     * The radius of the vignette effect, smaller\n     * values produces a smaller vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignetting(value) {\n        this.uniforms.vignetting = value;\n    }\n\n    get vignetting() {\n        return this.uniforms.vignetting;\n    }\n\n    /**\n     * Amount of opacity of vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingAlpha(value) {\n        this.uniforms.vignettingAlpha = value;\n    }\n\n    get vignettingAlpha() {\n        return this.uniforms.vignettingAlpha;\n    }\n\n    /**\n     * Blur intensity of the vignette\n     *\n     * @member {number}\n     * @default 0\n     */\n    set vignettingBlur(value) {\n        this.uniforms.vignettingBlur = value;\n    }\n\n    get vignettingBlur() {\n        return this.uniforms.vignettingBlur;\n    }\n}\n\nexport { OldFilmFilter };\n"],"names":["super","Filter"],"mappings":"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"}