{"version":3,"file":"mesh-extras.min.js","sources":["../src/geometry/PlaneGeometry.js","../src/geometry/RopeGeometry.js","../src/SimpleRope.js","../src/SimplePlane.js","../src/SimpleMesh.js","../src/NineSlicePlane.js"],"sourcesContent":["import { MeshGeometry } from '@pixi/mesh';\n\nexport default class PlaneGeometry extends MeshGeometry\n{\n    constructor(width = 100, height = 100, segWidth = 10, segHeight = 10)\n    {\n        super();\n\n        this.segWidth = segWidth;\n        this.segHeight = segHeight;\n\n        this.width = width;\n        this.height = height;\n\n        this.build();\n    }\n\n    /**\n     * Refreshes plane coordinates\n     * @private\n     */\n    build()\n    {\n        const total = this.segWidth * this.segHeight;\n        const verts = [];\n        const uvs = [];\n        const indices = [];\n\n        const segmentsX = this.segWidth - 1;\n        const segmentsY = this.segHeight - 1;\n\n        const sizeX = (this.width) / segmentsX;\n        const sizeY = (this.height) / segmentsY;\n\n        for (let i = 0; i < total; i++)\n        {\n            const x = (i % this.segWidth);\n            const y = ((i / this.segWidth) | 0);\n\n            verts.push(x * sizeX, y * sizeY);\n            uvs.push(x / segmentsX, y / segmentsY);\n        }\n\n        const totalSub = segmentsX * segmentsY;\n\n        for (let i = 0; i < totalSub; i++)\n        {\n            const xpos = i % segmentsX;\n            const ypos = (i / segmentsX) | 0;\n\n            const value = (ypos * this.segWidth) + xpos;\n            const value2 = (ypos * this.segWidth) + xpos + 1;\n            const value3 = ((ypos + 1) * this.segWidth) + xpos;\n            const value4 = ((ypos + 1) * this.segWidth) + xpos + 1;\n\n            indices.push(value, value2, value3,\n                value2, value4, value3);\n        }\n\n        this.buffers[0].data = new Float32Array(verts);\n        this.buffers[1].data = new Float32Array(uvs);\n        this.indexBuffer.data = new Uint16Array(indices);\n\n        // ensure that the changes are uploaded\n        this.buffers[0].update();\n        this.buffers[1].update();\n        this.indexBuffer.update();\n    }\n}\n","import { MeshGeometry } from '@pixi/mesh';\n/**\n * RopeGeometry allows you to draw a geometry across several points and then manipulate these points.\n *\n * ```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * const rope = new PIXI.RopeGeometry(100, points);\n * ```\n *\n * @class\n * @extends PIXI.MeshGeometry\n * @memberof PIXI\n *\n */\nexport default class RopeGeometry extends MeshGeometry\n{\n    /**\n     * @param {number} [width=200] - The width (i.e., thickness) of the rope.\n     * @param {PIXI.Point[]} [points] - An array of {@link PIXI.Point} objects to construct this rope.\n     */\n    constructor(width = 200, points)\n    {\n        super(new Float32Array(points.length * 4),\n            new Float32Array(points.length * 4),\n            new Uint16Array((points.length - 1) * 6));\n\n        /**\n         * An array of points that determine the rope\n         * @member {PIXI.Point[]}\n         */\n        this.points = points;\n\n        /**\n         * The width (i.e., thickness) of the rope.\n         * @member {number}\n         * @readOnly\n         */\n        this.width = width;\n\n        this.build();\n    }\n    /**\n     * Refreshes Rope indices and uvs\n     * @private\n     */\n    build()\n    {\n        const points = this.points;\n\n        if (!points) return;\n\n        const vertexBuffer = this.getBuffer('aVertexPosition');\n        const uvBuffer = this.getBuffer('aTextureCoord');\n        const indexBuffer = this.getIndex();\n\n        // if too little points, or texture hasn't got UVs set yet just move on.\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        // if the number of points has changed we will need to recreate the arraybuffers\n        if (vertexBuffer.data.length / 4 !== points.length)\n        {\n            vertexBuffer.data = new Float32Array(points.length * 4);\n            uvBuffer.data = new Float32Array(points.length * 4);\n            indexBuffer.data = new Uint16Array((points.length - 1) * 6);\n        }\n\n        const uvs = uvBuffer.data;\n        const indices = indexBuffer.data;\n\n        uvs[0] = 0;\n        uvs[1] = 0;\n        uvs[2] = 0;\n        uvs[3] = 1;\n\n        // indices[0] = 0;\n        // indices[1] = 1;\n\n        const total = points.length; // - 1;\n\n        for (let i = 0; i < total; i++)\n        {\n            // time to do some smart drawing!\n            const index = i * 4;\n            const amount = i / (total - 1);\n\n            uvs[index] = amount;\n            uvs[index + 1] = 0;\n\n            uvs[index + 2] = amount;\n            uvs[index + 3] = 1;\n        }\n\n        let indexCount = 0;\n\n        for (let i = 0; i < total - 1; i++)\n        {\n            const index = i * 2;\n\n            indices[indexCount++] = index;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 2;\n\n            indices[indexCount++] = index + 2;\n            indices[indexCount++] = index + 1;\n            indices[indexCount++] = index + 3;\n        }\n\n        // ensure that the changes are uploaded\n        uvBuffer.update();\n        indexBuffer.update();\n\n        this.updateVertices();\n    }\n\n    /**\n     * refreshes vertices of Rope mesh\n     */\n    updateVertices()\n    {\n        const points = this.points;\n\n        if (points.length < 1)\n        {\n            return;\n        }\n\n        let lastPoint = points[0];\n        let nextPoint;\n        let perpX = 0;\n        let perpY = 0;\n\n        // this.count -= 0.2;\n\n        const vertices = this.buffers[0].data;\n        const total = points.length;\n\n        for (let i = 0; i < total; i++)\n        {\n            const point = points[i];\n            const index = i * 4;\n\n            if (i < points.length - 1)\n            {\n                nextPoint = points[i + 1];\n            }\n            else\n            {\n                nextPoint = point;\n            }\n\n            perpY = -(nextPoint.x - lastPoint.x);\n            perpX = nextPoint.y - lastPoint.y;\n\n            let ratio = (1 - (i / (total - 1))) * 10;\n\n            if (ratio > 1)\n            {\n                ratio = 1;\n            }\n\n            const perpLength = Math.sqrt((perpX * perpX) + (perpY * perpY));\n            const num = this.width / 2; // (20 + Math.abs(Math.sin((i + this.count) * 0.3) * 50) )* ratio;\n\n            perpX /= perpLength;\n            perpY /= perpLength;\n\n            perpX *= num;\n            perpY *= num;\n\n            vertices[index] = point.x + perpX;\n            vertices[index + 1] = point.y + perpY;\n            vertices[index + 2] = point.x - perpX;\n            vertices[index + 3] = point.y - perpY;\n\n            lastPoint = point;\n        }\n\n        this.buffers[0].update();\n    }\n\n    update()\n    {\n        this.updateVertices();\n    }\n}\n","import { Mesh, MeshMaterial } from '@pixi/mesh';\nimport RopeGeometry from './geometry/RopeGeometry';\n\n/**\n * The rope allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let rope = new PIXI.SimpleRope(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nexport default class SimpleRope extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the rope.\n     * @param {PIXI.Point[]} points - An array of {@link PIXI.Point} objects to construct this rope.\n     */\n    constructor(texture, points)\n    {\n        const ropeGeometry = new RopeGeometry(texture.height, points);\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(ropeGeometry, meshMaterial);\n\n        /**\n         * re-calculate vertices by rope points each frame\n         *\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    _render(renderer)\n    {\n        if (this.autoUpdate\n            || this.geometry.width !== this.shader.texture.height)\n        {\n            this.geometry.width = this.shader.texture.height;\n            this.geometry.update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport { Mesh, MeshMaterial } from '@pixi/mesh';\nimport PlaneGeometry from './geometry/PlaneGeometry';\n\n/**\n * The SimplePlane allows you to draw a texture across several points and then manipulate these points\n *\n *```js\n * for (let i = 0; i < 20; i++) {\n *     points.push(new PIXI.Point(i * 50, 0));\n * };\n * let SimplePlane = new PIXI.SimplePlane(PIXI.Texture.from(\"snake.png\"), points);\n *  ```\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n *\n */\nexport default class SimplePlane extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the SimplePlane.\n     * @param {number} verticesX - The number of vertices in the x-axis\n     * @param {number} verticesY - The number of vertices in the y-axis\n     */\n    constructor(texture, verticesX, verticesY)\n    {\n        const planeGeometry = new PlaneGeometry(texture.width, texture.height, verticesX, verticesY);\n        const meshMaterial = new MeshMaterial(Texture.WHITE);\n\n        super(planeGeometry, meshMaterial);\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    /**\n     * Method used for overrides, to do something in case texture frame was changed.\n     * Meshes based on plane can override it and change more details based on texture.\n     */\n    textureUpdated()\n    {\n        this._textureID = this.shader.texture._updateID;\n\n        this.geometry.width = this.shader.texture.width;\n        this.geometry.height = this.shader.texture.height;\n\n        this.geometry.build();\n    }\n\n    set texture(value)\n    {\n        // Track texture same way sprite does.\n        // For generated meshes like NineSlicePlane it can change the geometry.\n        // Unfortunately, this method might not work if you directly change texture in material.\n\n        if (this.shader.texture === value)\n        {\n            return;\n        }\n\n        this.shader.texture = value;\n        this._textureID = -1;\n\n        if (value.baseTexture.valid)\n        {\n            this.textureUpdated();\n        }\n        else\n        {\n            value.once('update', this.textureUpdated, this);\n        }\n    }\n\n    get texture()\n    {\n        return this.shader.texture;\n    }\n\n    _render(renderer)\n    {\n        if (this._textureID !== this.shader.texture._updateID)\n        {\n            this.textureUpdated();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Mesh, MeshGeometry, MeshMaterial } from '@pixi/mesh';\nimport { Texture } from '@pixi/core';\n\n/**\n * The Simple Mesh class mimics Mesh in PixiJS v4, providing easy-to-use constructor arguments.\n * For more robust customization, use {@link PIXI.Mesh}.\n *\n * @class\n * @extends PIXI.Mesh\n * @memberof PIXI\n */\nexport default class SimpleMesh extends Mesh\n{\n    /**\n     * @param {PIXI.Texture} [texture=Texture.EMPTY] - The texture to use\n     * @param {Float32Array} [vertices] - if you want to specify the vertices\n     * @param {Float32Array} [uvs] - if you want to specify the uvs\n     * @param {Uint16Array} [indices] - if you want to specify the indices\n     * @param {number} [drawMode] - the drawMode, can be any of the Mesh.DRAW_MODES consts\n     */\n    constructor(texture = Texture.EMPTY, vertices, uvs, indices, drawMode)\n    {\n        const geometry = new MeshGeometry(vertices, uvs, indices);\n\n        geometry.getBuffer('aVertexPosition').static = false;\n\n        const meshMaterial = new MeshMaterial(texture);\n\n        super(geometry, meshMaterial, null, drawMode);\n\n        /**\n         * upload vertices buffer each frame\n         * @member {boolean}\n         */\n        this.autoUpdate = true;\n    }\n\n    /**\n     * Collection of vertices data.\n     * @member {Float32Array}\n     */\n    get vertices()\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n    set vertices(value)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    _render(renderer)\n    {\n        if (this.autoUpdate)\n        {\n            this.geometry.getBuffer('aVertexPosition').update();\n        }\n\n        super._render(renderer);\n    }\n}\n","import { Texture } from '@pixi/core';\nimport SimplePlane from './SimplePlane';\n\nconst DEFAULT_BORDER_SIZE = 10;\n\n/**\n * The NineSlicePlane allows you to stretch a texture using 9-slice scaling. The corners will remain unscaled (useful\n * for buttons with rounded corners for example) and the other areas will be scaled horizontally and or vertically\n *\n *```js\n * let Plane9 = new PIXI.NineSlicePlane(PIXI.Texture.from('BoxWithRoundedCorners.png'), 15, 15, 15, 15);\n *  ```\n * <pre>\n *      A                          B\n *    +---+----------------------+---+\n *  C | 1 |          2           | 3 |\n *    +---+----------------------+---+\n *    |   |                      |   |\n *    | 4 |          5           | 6 |\n *    |   |                      |   |\n *    +---+----------------------+---+\n *  D | 7 |          8           | 9 |\n *    +---+----------------------+---+\n\n *  When changing this objects width and/or height:\n *     areas 1 3 7 and 9 will remain unscaled.\n *     areas 2 and 8 will be stretched horizontally\n *     areas 4 and 6 will be stretched vertically\n *     area 5 will be stretched both horizontally and vertically\n * </pre>\n *\n * @class\n * @extends PIXI.SimplePlane\n * @memberof PIXI\n *\n */\nexport default class NineSlicePlane extends SimplePlane\n{\n    /**\n     * @param {PIXI.Texture} texture - The texture to use on the NineSlicePlane.\n     * @param {number} [leftWidth=10] size of the left vertical bar (A)\n     * @param {number} [topHeight=10] size of the top horizontal bar (C)\n     * @param {number} [rightWidth=10] size of the right vertical bar (B)\n     * @param {number} [bottomHeight=10] size of the bottom horizontal bar (D)\n     */\n    constructor(texture, leftWidth, topHeight, rightWidth, bottomHeight)\n    {\n        super(Texture.WHITE, 4, 4);\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        /**\n         * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        this._width = this._origWidth;\n\n        /**\n         * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n         *\n         * @member {number}\n         * @override\n         */\n        this._height = this._origHeight;\n\n        /**\n         * The width of the left column (a)\n         *\n         * @member {number}\n         * @private\n         */\n        this._leftWidth = typeof leftWidth !== 'undefined' ? leftWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The width of the right column (b)\n         *\n         * @member {number}\n         * @private\n         */\n        this._rightWidth = typeof rightWidth !== 'undefined' ? rightWidth : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the top row (c)\n         *\n         * @member {number}\n         * @private\n         */\n        this._topHeight = typeof topHeight !== 'undefined' ? topHeight : DEFAULT_BORDER_SIZE;\n\n        /**\n         * The height of the bottom row (d)\n         *\n         * @member {number}\n         * @private\n         */\n        this._bottomHeight = typeof bottomHeight !== 'undefined' ? bottomHeight : DEFAULT_BORDER_SIZE;\n\n        // lets call the setter to ensure all necessary updates are performed\n        this.texture = texture;\n    }\n\n    textureUpdated()\n    {\n        this._textureID = this.shader.texture._updateID;\n        this._refresh();\n    }\n\n    get vertices()\n    {\n        return this.geometry.getBuffer('aVertexPosition').data;\n    }\n\n    set vertices(value)\n    {\n        this.geometry.getBuffer('aVertexPosition').data = value;\n    }\n\n    /**\n     * Updates the horizontal vertices.\n     *\n     */\n    updateHorizontalVertices()\n    {\n        const vertices = this.vertices;\n\n        const h = this._topHeight + this._bottomHeight;\n        const scale = this._height > h ? 1.0 : this._height / h;\n\n        vertices[9] = vertices[11] = vertices[13] = vertices[15] = this._topHeight * scale;\n        vertices[17] = vertices[19] = vertices[21] = vertices[23] = this._height - (this._bottomHeight * scale);\n        vertices[25] = vertices[27] = vertices[29] = vertices[31] = this._height;\n    }\n\n    /**\n     * Updates the vertical vertices.\n     *\n     */\n    updateVerticalVertices()\n    {\n        const vertices = this.vertices;\n\n        const w = this._leftWidth + this._rightWidth;\n        const scale = this._width > w ? 1.0 : this._width / w;\n\n        vertices[2] = vertices[10] = vertices[18] = vertices[26] = this._leftWidth * scale;\n        vertices[4] = vertices[12] = vertices[20] = vertices[28] = this._width - (this._rightWidth * scale);\n        vertices[6] = vertices[14] = vertices[22] = vertices[30] = this._width;\n    }\n\n    /**\n     * The width of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this._width;\n    }\n\n    set width(value) // eslint-disable-line require-jsdoc\n    {\n        this._width = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the NineSlicePlane, setting this will actually modify the vertices and UV's of this plane\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this._height;\n    }\n\n    set height(value) // eslint-disable-line require-jsdoc\n    {\n        this._height = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the left column\n     *\n     * @member {number}\n     */\n    get leftWidth()\n    {\n        return this._leftWidth;\n    }\n\n    set leftWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._leftWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The width of the right column\n     *\n     * @member {number}\n     */\n    get rightWidth()\n    {\n        return this._rightWidth;\n    }\n\n    set rightWidth(value) // eslint-disable-line require-jsdoc\n    {\n        this._rightWidth = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the top row\n     *\n     * @member {number}\n     */\n    get topHeight()\n    {\n        return this._topHeight;\n    }\n\n    set topHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._topHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * The height of the bottom row\n     *\n     * @member {number}\n     */\n    get bottomHeight()\n    {\n        return this._bottomHeight;\n    }\n\n    set bottomHeight(value) // eslint-disable-line require-jsdoc\n    {\n        this._bottomHeight = value;\n        this._refresh();\n    }\n\n    /**\n     * Refreshes NineSlicePlane coords. All of them.\n     */\n    _refresh()\n    {\n        const texture = this.texture;\n\n        const uvs = this.geometry.buffers[1].data;\n\n        this._origWidth = texture.orig.width;\n        this._origHeight = texture.orig.height;\n\n        const _uvw = 1.0 / this._origWidth;\n        const _uvh = 1.0 / this._origHeight;\n\n        uvs[0] = uvs[8] = uvs[16] = uvs[24] = 0;\n        uvs[1] = uvs[3] = uvs[5] = uvs[7] = 0;\n        uvs[6] = uvs[14] = uvs[22] = uvs[30] = 1;\n        uvs[25] = uvs[27] = uvs[29] = uvs[31] = 1;\n\n        uvs[2] = uvs[10] = uvs[18] = uvs[26] = _uvw * this._leftWidth;\n        uvs[4] = uvs[12] = uvs[20] = uvs[28] = 1 - (_uvw * this._rightWidth);\n        uvs[9] = uvs[11] = uvs[13] = uvs[15] = _uvh * this._topHeight;\n        uvs[17] = uvs[19] = uvs[21] = uvs[23] = 1 - (_uvh * this._bottomHeight);\n\n        this.updateHorizontalVertices();\n        this.updateVerticalVertices();\n\n        this.geometry.buffers[0].update();\n        this.geometry.buffers[1].update();\n    }\n}\n"],"names":["PlaneGeometry","width","height","segWidth","segHeight","super","this","build","const","total","verts","uvs","indices","segmentsX","segmentsY","sizeX","sizeY","i","x","y","push","totalSub","xpos","ypos","value","value2","value3","value4","buffers","data","Float32Array","indexBuffer","Uint16Array","update","MeshGeometry","RopeGeometry","points","length","vertexBuffer","getBuffer","uvBuffer","getIndex","index","amount","let","indexCount","updateVertices","nextPoint","lastPoint","perpX","perpY","vertices","point","ratio","perpLength","Math","sqrt","num","SimpleRope","texture","ropeGeometry","meshMaterial","MeshMaterial","autoUpdate","_render","renderer","geometry","shader","Mesh","SimplePlane","verticesX","verticesY","planeGeometry","Texture","WHITE","textureUpdated","_textureID","_updateID","prototypeAccessors","baseTexture","valid","once","SimpleMesh","drawMode","EMPTY","static","DEFAULT_BORDER_SIZE","NineSlicePlane","leftWidth","topHeight","rightWidth","bottomHeight","_origWidth","orig","_origHeight","_width","_height","_leftWidth","_rightWidth","_topHeight","_bottomHeight","_refresh","updateHorizontalVertices","h","scale","updateVerticalVertices","w","_uvw","_uvh"],"mappings":"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"}