{"version":3,"file":"filter-glitch.esm.js","sources":["../src/GlitchFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './glitch.frag';\nimport {Filter, Texture} from '@pixi/core';\nimport {SCALE_MODES} from '@pixi/constants';\nimport {DEG_TO_RAD} from '@pixi/math';\n\n/**\n * The GlitchFilter applies a glitch effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/glitch.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-glitch|@pixi/filter-glitch}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] - The more optional parameters of the filter.\n * @param {number} [options.slices=5] - The maximum number of slices.\n * @param {number} [options.offset=100] - The maximum offset amount of slices.\n * @param {number} [options.direction=0] - The angle in degree of the offset of slices.\n * @param {number} [options.fillMode=0] - The fill mode of the space after the offset. Acceptable values:\n *  - `0` {@link PIXI.filters.GlitchFilter.TRANSPARENT TRANSPARENT}\n *  - `1` {@link PIXI.filters.GlitchFilter.ORIGINAL ORIGINAL}\n *  - `2` {@link PIXI.filters.GlitchFilter.LOOP LOOP}\n *  - `3` {@link PIXI.filters.GlitchFilter.CLAMP CLAMP}\n *  - `4` {@link PIXI.filters.GlitchFilter.MIRROR MIRROR}\n * @param {number} [options.seed=0] - A seed value for randomizing glitch effect.\n * @param {number} [options.average=false] - `true` will divide the bands roughly based on equal amounts\n *                 where as setting to `false` will vary the band sizes dramatically (more random looking).\n * @param {number} [options.minSize=8] - Minimum size of individual slice. Segment of total `sampleSize`\n * @param {number} [options.sampleSize=512] - The resolution of the displacement map texture.\n * @param {number} [options.red=[0,0]] - Red channel offset\n * @param {number} [options.green=[0,0]] - Green channel offset.\n * @param {number} [options.blue=[0,0]] - Blue channel offset.\n */\nclass GlitchFilter extends Filter {\n\n    constructor(options = {}) {\n\n        super(vertex, fragment);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        options = Object.assign({\n            slices: 5,\n            offset: 100,\n            direction: 0,\n            fillMode: 0,\n            average: false,\n            seed: 0,\n            red: [0, 0],\n            green: [0, 0],\n            blue: [0, 0],\n            minSize: 8,\n            sampleSize: 512,\n        }, options);\n\n        this.direction = options.direction;\n        this.red = options.red;\n        this.green = options.green;\n        this.blue = options.blue;\n\n        /**\n         * The maximum offset value for each of the slices.\n         *\n         * @member {number}\n         */\n        this.offset = options.offset;\n\n        /**\n         * The fill mode of the space after the offset.\n         *\n         * @member {number}\n         */\n        this.fillMode = options.fillMode;\n\n        /**\n         * `true` will divide the bands roughly based on equal amounts\n         * where as setting to `false` will vary the band sizes dramatically (more random looking).\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.average = options.average;\n\n        /**\n         * A seed value for randomizing color offset. Animating\n         * this value to `Math.random()` produces a twitching effect.\n         *\n         * @member {number}\n         */\n        this.seed = options.seed;\n\n        /**\n         * Minimum size of slices as a portion of the `sampleSize`\n         *\n         * @member {number}\n         */\n        this.minSize = options.minSize;\n\n        /**\n         * Height of the displacement map canvas.\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.sampleSize = options.sampleSize;\n\n        /**\n         * Internally generated canvas.\n         *\n         * @member {HTMLCanvasElement} _canvas\n         * @private\n         */\n        this._canvas = document.createElement('canvas');\n        this._canvas.width = 4;\n        this._canvas.height = this.sampleSize;\n\n        /**\n         * The displacement map is used to generate the bands.\n         * If using your own texture, `slices` will be ignored.\n         *\n         * @member {PIXI.Texture}\n         * @readonly\n         */\n        this.texture = Texture.from(this._canvas, { scaleMode: SCALE_MODES.NEAREST });\n\n        /**\n         * Internal number of slices\n         * @member {number}\n         * @private\n         */\n        this._slices = 0;\n\n        // Set slices\n        this.slices = options.slices;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n\n        const width = input.filterFrame.width;\n        const height = input.filterFrame.height;\n\n        this.uniforms.dimensions[0] = width;\n        this.uniforms.dimensions[1] = height;\n        this.uniforms.aspect = height / width;\n\n        this.uniforms.seed = this.seed;\n        this.uniforms.offset = this.offset;\n        this.uniforms.fillMode = this.fillMode;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Randomize the slices size (heights).\n     *\n     * @private\n     */\n    _randomizeSizes() {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n        const size = this.sampleSize;\n        const min = Math.min(this.minSize / size, 0.9 / this._slices);\n\n        if (this.average) {\n            const count = this._slices;\n            let rest = 1;\n\n            for (let i = 0; i < last; i++) {\n                const averageWidth = rest / (count - i);\n                const w =  Math.max(averageWidth * (1 - Math.random() * 0.6), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n        else {\n            let rest = 1;\n            const ratio = Math.sqrt(1 / this._slices);\n\n            for (let i = 0; i < last; i++) {\n                const w = Math.max(ratio * rest * Math.random(), min);\n                arr[i] = w;\n                rest -= w;\n            }\n            arr[last] = rest;\n        }\n\n        this.shuffle();\n    }\n\n    /**\n     * Shuffle the sizes of the slices, advanced usage.\n     */\n    shuffle() {\n        const arr = this._sizes;\n        const last = this._slices - 1;\n\n        // shuffle\n        for (let i = last; i > 0; i--) {\n            const rand = (Math.random() * i) >> 0;\n            const temp = arr[i];\n\n            arr[i] = arr[rand];\n            arr[rand] = temp;\n        }\n    }\n\n    /**\n     * Randomize the values for offset from -1 to 1\n     *\n     * @private\n     */\n    _randomizeOffsets() {\n        for (let i = 0 ; i < this._slices; i++) {\n            this._offsets[i] = Math.random() * (Math.random() < 0.5 ? -1 : 1);\n        }\n    }\n\n    /**\n     * Regenerating random size, offsets for slices.\n     */\n    refresh() {\n        this._randomizeSizes();\n        this._randomizeOffsets();\n        this.redraw();\n    }\n\n    /**\n     * Redraw displacement bitmap texture, advanced usage.\n     */\n    redraw() {\n        const size = this.sampleSize;\n        const texture = this.texture;\n        const ctx = this._canvas.getContext('2d');\n        ctx.clearRect(0, 0, 8, size);\n\n        let offset;\n        let y = 0;\n\n        for (let i = 0 ; i < this._slices; i++) {\n            offset = Math.floor(this._offsets[i] * 256);\n            const height = this._sizes[i] * size;\n            const red = offset > 0 ? offset : 0;\n            const green = offset < 0 ? -offset : 0;\n            ctx.fillStyle = 'rgba(' + red + ', ' + green + ', 0, 1)';\n            ctx.fillRect(0, y >> 0, size, height + 1 >> 0);\n            y += height;\n        }\n\n        texture.baseTexture.update();\n        this.uniforms.displacementMap = texture;\n    }\n\n    /**\n     * Manually custom slices size (height) of displacement bitmap\n     *\n     * @member {number[]}\n     */\n    set sizes(sizes) {\n        const len = Math.min(this._slices, sizes.length);\n\n        for (let i = 0; i < len; i++){\n            this._sizes[i] = sizes[i];\n        }\n    }\n    get sizes() {\n        return this._sizes;\n    }\n\n    /**\n     * Manually set custom slices offset of displacement bitmap, this is\n     * a collection of values from -1 to 1. To change the max offset value\n     * set `offset`.\n     *\n     * @member {number[]}\n     */\n    set offsets(offsets) {\n        const len = Math.min(this._slices, offsets.length);\n\n        for (let i = 0; i < len; i++){\n            this._offsets[i] = offsets[i];\n        }\n    }\n    get offsets() {\n        return this._offsets;\n    }\n\n    /**\n     * The count of slices.\n     * @member {number}\n     * @default 5\n     */\n    get slices() {\n        return this._slices;\n    }\n    set slices(value) {\n        if (this._slices === value) {\n            return;\n        }\n        this._slices = value;\n        this.uniforms.slices = value;\n        this._sizes = this.uniforms.slicesWidth = new Float32Array(value);\n        this._offsets = this.uniforms.slicesOffset = new Float32Array(value);\n        this.refresh();\n    }\n\n    /**\n     * The angle in degree of the offset of slices.\n     * @member {number}\n     * @default 0\n     */\n    get direction() {\n        return this._direction;\n    }\n    set direction(value) {\n        if (this._direction === value) {\n            return;\n        }\n        this._direction = value;\n\n        const radians = value * DEG_TO_RAD;\n\n        this.uniforms.sinDir = Math.sin(radians);\n        this.uniforms.cosDir = Math.cos(radians);\n    }\n\n    /**\n     * Red channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get red() {\n        return this.uniforms.red;\n    }\n    set red(value) {\n        this.uniforms.red = value;\n    }\n\n    /**\n     * Green channel offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get green() {\n        return this.uniforms.green;\n    }\n    set green(value) {\n        this.uniforms.green = value;\n    }\n\n    /**\n     * Blue offset.\n     *\n     * @member {PIXI.Point}\n     */\n    get blue() {\n        return this.uniforms.blue;\n    }\n    set blue(value) {\n        this.uniforms.blue = value;\n    }\n\n    /**\n     * Removes all references\n     */\n    destroy() {\n        this.texture.destroy(true);\n        this.texture = null;\n        this._canvas = null;\n        this.red = null;\n        this.green = null;\n        this.blue = null;\n        this._sizes = null;\n        this._offsets = null;\n    }\n}\n\n/**\n * Fill mode as transparent\n *\n * @constant\n * @static\n * @member {int} TRANSPARENT\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.TRANSPARENT = 0;\n\n/**\n * Fill mode as original\n *\n * @constant\n * @static\n * @member {int} ORIGINAL\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.ORIGINAL = 1;\n\n/**\n * Fill mode as loop\n *\n * @constant\n * @static\n * @member {int} LOOP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.LOOP = 2;\n\n/**\n * Fill mode as clamp\n *\n * @constant\n * @static\n * @member {int} CLAMP\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.CLAMP = 3;\n\n/**\n * Fill mode as mirror\n *\n * @constant\n * @static\n * @member {int} MIRROR\n * @memberof PIXI.filters.GlitchFilter\n * @readonly\n */\nGlitchFilter.MIRROR = 4;\n\nexport { GlitchFilter };\n"],"names":["super","const","let","rest","i","w"],"mappings":"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"}