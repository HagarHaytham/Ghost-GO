/*!
 * @pixi/filter-multi-color-replace - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-multi-color-replace is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@pixi/core');
var utils = require('@pixi/utils');

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float epsilon;\n\nconst int MAX_COLORS = %maxColors%;\n\nuniform vec3 originalColors[MAX_COLORS];\nuniform vec3 targetColors[MAX_COLORS];\n\nvoid main(void)\n{\n    gl_FragColor = texture2D(uSampler, vTextureCoord);\n\n    float alpha = gl_FragColor.a;\n    if (alpha < 0.0001)\n    {\n      return;\n    }\n\n    vec3 color = gl_FragColor.rgb / alpha;\n\n    for(int i = 0; i < MAX_COLORS; i++)\n    {\n      vec3 origColor = originalColors[i];\n      if (origColor.r < 0.0)\n      {\n        break;\n      }\n      vec3 colorDiff = origColor - color;\n      if (length(colorDiff) < epsilon)\n      {\n        vec3 targetColor = targetColors[i];\n        gl_FragColor = vec4((targetColor + colorDiff) * alpha, alpha);\n        return;\n      }\n    }\n}\n";

/**
 * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple
 * colors.<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/multi-color-replace.png)
 * @class
 * @extends PIXI.Filter
 * @memberof PIXI.filters
 * @see {@link https://www.npmjs.com/package/@pixi/filter-multi-color-replace|@pixi/filter-multi-color-replace}
 * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}
 * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair (an array length is 2).
 *                       In the pair, the first value is original color , the second value is target color.
 * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors
 *                                  (lower = more exact, higher = more inclusive)
 * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the
 *                               fragment is only compiled once, this cannot be changed after construction.
 *                               If omitted, the default value is the length of `replacements`.
 *
 * @example
 *  // replaces pure red with pure blue, and replaces pure green with pure white
 *  someSprite.filters = [new MultiColorReplaceFilter(
 *    [
 *      [0xFF0000, 0x0000FF],
 *      [0x00FF00, 0xFFFFFF]
 *    ],
 *    0.001
 *  )];
 *
 *  You also could use [R, G, B] as the color
 *  someOtherSprite.filters = [new MultiColorReplaceFilter(
 *    [
 *      [ [1,0,0], [0,0,1] ],
 *      [ [0,1,0], [1,1,1] ]
 *    ],
 *    0.001
 *  )];
 *
 */
var MultiColorReplaceFilter = /*@__PURE__*/(function (Filter) {
    function MultiColorReplaceFilter(replacements, epsilon, maxColors) {
        if ( epsilon === void 0 ) epsilon = 0.05;
        if ( maxColors === void 0 ) maxColors = null;

        maxColors = maxColors || replacements.length;

        Filter.call(this, vertex, fragment.replace(/%maxColors%/g, maxColors));

        this.epsilon = epsilon;
        this._maxColors = maxColors;
        this._replacements = null;
        this.uniforms.originalColors = new Float32Array(maxColors * 3);
        this.uniforms.targetColors = new Float32Array(maxColors * 3);
        this.replacements = replacements;
    }

    if ( Filter ) MultiColorReplaceFilter.__proto__ = Filter;
    MultiColorReplaceFilter.prototype = Object.create( Filter && Filter.prototype );
    MultiColorReplaceFilter.prototype.constructor = MultiColorReplaceFilter;

    var prototypeAccessors = { replacements: { configurable: true },maxColors: { configurable: true },epsilon: { configurable: true } };

    /**
     * The source and target colors for replacement. See constructor for information on the format.
     *
     * @member {Array<Array>}
     */
    prototypeAccessors.replacements.set = function (replacements) {
        var originals = this.uniforms.originalColors;
        var targets = this.uniforms.targetColors;
        var colorCount = replacements.length;

        if (colorCount > this._maxColors) {
            throw ("Length of replacements (" + colorCount + ") exceeds the maximum colors length (" + (this._maxColors) + ")");
        }

        // Fill with negative values
        originals[colorCount * 3] = -1;

        for (var i = 0; i < colorCount; i++) {
            var pair = replacements[i];

            // for original colors
            var color = pair[0];
            if (typeof color === 'number') {
                color = utils.hex2rgb(color);
            }
            else {
                pair[0] = utils.rgb2hex(color);
            }

            originals[i * 3] = color[0];
            originals[(i * 3) + 1] = color[1];
            originals[(i * 3) + 2] = color[2];

            // for target colors
            var targetColor = pair[1];
            if (typeof targetColor === 'number') {
                targetColor = utils.hex2rgb(targetColor);
            }
            else {
                pair[1] = utils.rgb2hex(targetColor);
            }

            targets[i * 3] = targetColor[0];
            targets[(i * 3) + 1] = targetColor[1];
            targets[(i * 3) + 2] = targetColor[2];
        }

        this._replacements = replacements;
    };
    prototypeAccessors.replacements.get = function () {
        return this._replacements;
    };

    /**
     * Should be called after changing any of the contents of the replacements.
     * This is a convenience method for resetting the `replacements`.
     */
    MultiColorReplaceFilter.prototype.refresh = function refresh () {
        this.replacements = this._replacements;
    };

    /**
     * The maximum number of color replacements supported by this filter. Can be changed
     * _only_ during construction.
     *
     * @member {number}
     * @readonly
     */
    prototypeAccessors.maxColors.get = function () {
        return this._maxColors;
    };

    /**
     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)
     *
     * @member {number}
     * @default 0.05
     */
    prototypeAccessors.epsilon.set = function (value) {
        this.uniforms.epsilon = value;
    };
    prototypeAccessors.epsilon.get = function () {
        return this.uniforms.epsilon;
    };

    Object.defineProperties( MultiColorReplaceFilter.prototype, prototypeAccessors );

    return MultiColorReplaceFilter;
}(core.Filter));

exports.MultiColorReplaceFilter = MultiColorReplaceFilter;
//# sourceMappingURL=filter-multi-color-replace.cjs.js.map
