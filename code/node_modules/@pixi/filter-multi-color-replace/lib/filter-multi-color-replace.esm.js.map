{"version":3,"file":"filter-multi-color-replace.esm.js","sources":["../src/MultiColorReplaceFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './multi-color-replace.frag';\nimport {Filter} from '@pixi/core';\nimport {hex2rgb, rgb2hex} from '@pixi/utils';\n\n/**\n * Filter for replacing a color with another color. Similar to ColorReplaceFilter, but support multiple\n * colors.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/multi-color-replace.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-multi-color-replace|@pixi/filter-multi-color-replace}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {Array<Array>} replacements - The collection of replacement items. Each item is color-pair (an array length is 2).\n *                       In the pair, the first value is original color , the second value is target color.\n * @param {number} [epsilon=0.05] - Tolerance of the floating-point comparison between colors\n *                                  (lower = more exact, higher = more inclusive)\n * @param {number} [maxColors] - The maximum number of replacements filter is able to use. Because the\n *                               fragment is only compiled once, this cannot be changed after construction.\n *                               If omitted, the default value is the length of `replacements`.\n *\n * @example\n *  // replaces pure red with pure blue, and replaces pure green with pure white\n *  someSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [0xFF0000, 0x0000FF],\n *      [0x00FF00, 0xFFFFFF]\n *    ],\n *    0.001\n *  )];\n *\n *  You also could use [R, G, B] as the color\n *  someOtherSprite.filters = [new MultiColorReplaceFilter(\n *    [\n *      [ [1,0,0], [0,0,1] ],\n *      [ [0,1,0], [1,1,1] ]\n *    ],\n *    0.001\n *  )];\n *\n */\nclass MultiColorReplaceFilter extends Filter {\n    constructor(replacements, epsilon = 0.05, maxColors = null) {\n        maxColors = maxColors || replacements.length;\n\n        super(vertex, fragment.replace(/%maxColors%/g, maxColors));\n\n        this.epsilon = epsilon;\n        this._maxColors = maxColors;\n        this._replacements = null;\n        this.uniforms.originalColors = new Float32Array(maxColors * 3);\n        this.uniforms.targetColors = new Float32Array(maxColors * 3);\n        this.replacements = replacements;\n    }\n\n    /**\n     * The source and target colors for replacement. See constructor for information on the format.\n     *\n     * @member {Array<Array>}\n     */\n    set replacements(replacements) {\n        const originals = this.uniforms.originalColors;\n        const targets = this.uniforms.targetColors;\n        const colorCount = replacements.length;\n\n        if (colorCount > this._maxColors) {\n            throw `Length of replacements (${colorCount}) exceeds the maximum colors length (${this._maxColors})`;\n        }\n\n        // Fill with negative values\n        originals[colorCount * 3] = -1;\n\n        for (let i = 0; i < colorCount; i++) {\n            const pair = replacements[i];\n\n            // for original colors\n            let color = pair[0];\n            if (typeof color === 'number') {\n                color = hex2rgb(color);\n            }\n            else {\n                pair[0] = rgb2hex(color);\n            }\n\n            originals[i * 3] = color[0];\n            originals[(i * 3) + 1] = color[1];\n            originals[(i * 3) + 2] = color[2];\n\n            // for target colors\n            let targetColor = pair[1];\n            if (typeof targetColor === 'number') {\n                targetColor = hex2rgb(targetColor);\n            }\n            else {\n                pair[1] = rgb2hex(targetColor);\n            }\n\n            targets[i * 3] = targetColor[0];\n            targets[(i * 3) + 1] = targetColor[1];\n            targets[(i * 3) + 2] = targetColor[2];\n        }\n\n        this._replacements = replacements;\n    }\n    get replacements() {\n        return this._replacements;\n    }\n\n    /**\n     * Should be called after changing any of the contents of the replacements.\n     * This is a convenience method for resetting the `replacements`.\n     */\n    refresh() {\n        this.replacements = this._replacements;\n    }\n\n    /**\n     * The maximum number of color replacements supported by this filter. Can be changed\n     * _only_ during construction.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get maxColors() {\n        return this._maxColors;\n    }\n\n    /**\n     * Tolerance of the floating-point comparison between colors (lower = more exact, higher = more inclusive)\n     *\n     * @member {number}\n     * @default 0.05\n     */\n    set epsilon(value) {\n        this.uniforms.epsilon = value;\n    }\n    get epsilon() {\n        return this.uniforms.epsilon;\n    }\n}\n\nexport { MultiColorReplaceFilter };\n"],"names":["super","const","let"],"mappings":"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"}