{"version":3,"file":"graphics.js","sources":["../src/const.js","../src/styles/FillStyle.js","../src/GraphicsData.js","../src/utils/buildCircle.js","../src/utils/buildLine.js","../src/utils/buildPoly.js","../src/utils/buildRectangle.js","../src/utils/buildRoundedRectangle.js","../src/GraphicsGeometry.js","../src/styles/LineStyle.js","../src/utils/BezierUtils.js","../src/utils/QuadraticUtils.js","../src/utils/ArcUtils.js","../src/utils/Star.js","../src/Graphics.js"],"sourcesContent":["/**\n * Graphics curves resolution settings. If `adaptive` flag is set to `true`,\n * the resolution is calculated based on the curve's length to ensure better visual quality.\n * Adaptive draw works with `bezierCurveTo` and `quadraticCurveTo`.\n *\n * @static\n * @constant\n * @memberof PIXI\n * @name GRAPHICS_CURVES\n * @type {object}\n * @property {boolean} adaptive=false - flag indicating if the resolution should be adaptive\n * @property {number} maxLength=10 - maximal length of a single segment of the curve (if adaptive = false, ignored)\n * @property {number} minSegments=8 - minimal number of segments in the curve (if adaptive = false, ignored)\n * @property {number} maxSegments=2048 - maximal number of segments in the curve (if adaptive = false, ignored)\n */\nexport const GRAPHICS_CURVES = {\n    adaptive: true,\n    maxLength: 10,\n    minSegments: 8,\n    maxSegments: 2048,\n    _segmentsCount(length, defaultSegments = 20)\n    {\n        if (!this.adaptive)\n        {\n            return defaultSegments;\n        }\n\n        let result = Math.ceil(length / this.maxLength);\n\n        if (result < this.minSegments)\n        {\n            result = this.minSegments;\n        }\n        else if (result > this.maxSegments)\n        {\n            result = this.maxSegments;\n        }\n\n        return result;\n    },\n};\n","import { Texture } from '@pixi/core';\n\n/**\n * Fill style object for Graphics.\n *\n * @class\n * @memberof PIXI\n */\nexport default class FillStyle\n{\n    constructor()\n    {\n        this.reset();\n    }\n\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.FillStyle}\n     */\n    clone()\n    {\n        const obj = new FillStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n\n        return obj;\n    }\n\n    /**\n     * Reset\n     */\n    reset()\n    {\n        /**\n         * The hex color value used when coloring the Graphics object.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.color = 0xFFFFFF;\n\n        /**\n         * The alpha value used when filling the Graphics object.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.alpha = 1;\n\n        /**\n         * The texture to be used for the fill.\n         *\n         * @member {string}\n         * @default 0\n         */\n        this.texture = Texture.WHITE;\n\n        /**\n         * The transform aplpied to the texture.\n         *\n         * @member {string}\n         * @default 0\n         */\n        this.matrix = null;\n\n        /**\n         * If the current fill is visible.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.visible = false;\n    }\n\n    /**\n     * Destroy and don't use after this\n     */\n    destroy()\n    {\n        this.texture = null;\n        this.matrix = null;\n    }\n}\n","/**\n * A class to contain data useful for Graphics objects\n *\n * @class\n * @memberof PIXI\n */\nexport default class GraphicsData\n{\n    /**\n     *\n     * @param {PIXI.Circle|PIXI.Rectangle|PIXI.Ellipse|PIXI.Polygon} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} [fillStyle] - the width of the line to draw\n     * @param {PIXI.LineStyle} [lineStyle] - the color of the line to draw\n     * @param {PIXI.Matrix} [matrix] - Transform matrix\n     */\n    constructor(shape, fillStyle = null, lineStyle = null, matrix = null)\n    {\n        /**\n         * The shape object to draw.\n         * @member {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle}\n         */\n        this.shape = shape;\n\n        /**\n         * The style of the line.\n         * @member {PIXI.LineStyle}\n         */\n        this.lineStyle = lineStyle;\n\n        /**\n         * The style of the fill.\n         * @member {PIXI.FillStyle}\n         */\n        this.fillStyle = fillStyle;\n\n        /**\n         * The transform matrix.\n         * @member {PIXI.Matrix}\n         */\n        this.matrix = matrix;\n\n        /**\n         * The type of the shape, see the Const.Shapes file for all the existing types,\n         * @member {number}\n         */\n        this.type = shape.type;\n\n        /**\n         * The collection of points.\n         * @member {number[]}\n         */\n        this.points = [];\n\n        /**\n         * The collection of holes.\n         * @member {PIXI.GraphicsData[]}\n         */\n        this.holes = [];\n    }\n\n    /**\n     * Creates a new GraphicsData object with the same values as this one.\n     *\n     * @return {PIXI.GraphicsData} Cloned GraphicsData object\n     */\n    clone()\n    {\n        return new GraphicsData(\n            this.shape,\n            this.fillStyle,\n            this.lineStyle,\n            this.matrix\n        );\n    }\n\n    /**\n     * Destroys the Graphics data.\n     */\n    destroy()\n    {\n        this.shape = null;\n        this.holes.length = 0;\n        this.holes = null;\n        this.points.length = 0;\n        this.points = null;\n        this.lineStyle = null;\n        this.fillStyle = null;\n    }\n}\n","import { SHAPES } from '@pixi/math';\n\n/**\n * Builds a circle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object to draw\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport default {\n\n    build(graphicsData)\n    {\n        // need to convert points to a nice regular data\n        const circleData = graphicsData.shape;\n        const points = graphicsData.points;\n        const x = circleData.x;\n        const y = circleData.y;\n        let width;\n        let height;\n\n        points.length = 0;\n\n        // TODO - bit hacky??\n        if (graphicsData.type === SHAPES.CIRC)\n        {\n            width = circleData.radius;\n            height = circleData.radius;\n        }\n        else\n        {\n            width = circleData.width;\n            height = circleData.height;\n        }\n\n        if (width === 0 || height === 0)\n        {\n            return;\n        }\n\n        let totalSegs = Math.floor(30 * Math.sqrt(circleData.radius))\n            || Math.floor(15 * Math.sqrt(circleData.width + circleData.height));\n\n        totalSegs /= 2.3;\n\n        const seg = (Math.PI * 2) / totalSegs;\n\n        for (let i = 0; i < totalSegs; i++)\n        {\n            points.push(\n                x + (Math.sin(-seg * i) * width),\n                y + (Math.cos(-seg * i) * height)\n            );\n        }\n\n        points.push(\n            points[0],\n            points[1]\n        );\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        let vertPos = verts.length / 2;\n        const center = vertPos;\n\n        verts.push(graphicsData.shape.x, graphicsData.shape.y);\n\n        for (let i = 0; i < points.length; i += 2)\n        {\n            verts.push(points[i], points[i + 1]);\n\n            // add some uvs\n            indices.push(vertPos++, center, vertPos);\n        }\n    },\n};\n","import { Point, SHAPES } from '@pixi/math';\n\n/**\n * Builds a line to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nexport default function (graphicsData, graphicsGeometry)\n{\n    if (graphicsData.lineStyle.native)\n    {\n        buildNativeLine(graphicsData, graphicsGeometry);\n    }\n    else\n    {\n        buildLine(graphicsData, graphicsGeometry);\n    }\n}\n\n/**\n * Builds a line to draw using the polygon method.\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildLine(graphicsData, graphicsGeometry)\n{\n    const shape = graphicsData.shape;\n    let points = graphicsData.points || shape.points.slice();\n    const eps = graphicsGeometry.closePointEps;\n\n    if (points.length === 0)\n    {\n        return;\n    }\n    // if the line width is an odd number add 0.5 to align to a whole pixel\n    // commenting this out fixes #711 and #1620\n    // if (graphicsData.lineWidth%2)\n    // {\n    //     for (i = 0; i < points.length; i++)\n    //     {\n    //         points[i] += 0.5;\n    //     }\n    // }\n\n    const style = graphicsData.lineStyle;\n\n    // get first and last point.. figure out the middle!\n    const firstPoint = new Point(points[0], points[1]);\n    const lastPoint = new Point(points[points.length - 2], points[points.length - 1]);\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n    const closedPath = Math.abs(firstPoint.x - lastPoint.x) < eps\n        && Math.abs(firstPoint.y - lastPoint.y) < eps;\n\n    // if the first point is the last point - gonna have issues :)\n    if (closedShape)\n    {\n        // need to clone as we are going to slightly modify the shape..\n        points = points.slice();\n\n        if (closedPath)\n        {\n            points.pop();\n            points.pop();\n            lastPoint.set(points[points.length - 2], points[points.length - 1]);\n        }\n\n        const midPointX = lastPoint.x + ((firstPoint.x - lastPoint.x) * 0.5);\n        const midPointY = lastPoint.y + ((firstPoint.y - lastPoint.y) * 0.5);\n\n        points.unshift(midPointX, midPointY);\n        points.push(midPointX, midPointY);\n    }\n\n    const verts = graphicsGeometry.points;\n    const length = points.length / 2;\n    let indexCount = points.length;\n    let indexStart = verts.length / 2;\n\n    // DRAW the Line\n    const width = style.width / 2;\n\n    // sort color\n    let p1x = points[0];\n    let p1y = points[1];\n    let p2x = points[2];\n    let p2y = points[3];\n    let p3x = 0;\n    let p3y = 0;\n\n    let perpx = -(p1y - p2y);\n    let perpy = p1x - p2x;\n    let perp2x = 0;\n    let perp2y = 0;\n    let perp3x = 0;\n    let perp3y = 0;\n\n    let dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    const ratio = style.alignment;// 0.5;\n    const r1 = (1 - ratio) * 2;\n    const r2 = ratio * 2;\n\n    // start\n    verts.push(\n        p1x - (perpx * r1),\n        p1y - (perpy * r1));\n\n    verts.push(\n        p1x + (perpx * r2),\n        p1y + (perpy * r2));\n\n    for (let i = 1; i < length - 1; ++i)\n    {\n        p1x = points[(i - 1) * 2];\n        p1y = points[((i - 1) * 2) + 1];\n\n        p2x = points[i * 2];\n        p2y = points[(i * 2) + 1];\n\n        p3x = points[(i + 1) * 2];\n        p3y = points[((i + 1) * 2) + 1];\n\n        perpx = -(p1y - p2y);\n        perpy = p1x - p2x;\n\n        dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n        perpx /= dist;\n        perpy /= dist;\n        perpx *= width;\n        perpy *= width;\n\n        perp2x = -(p2y - p3y);\n        perp2y = p2x - p3x;\n\n        dist = Math.sqrt((perp2x * perp2x) + (perp2y * perp2y));\n        perp2x /= dist;\n        perp2y /= dist;\n        perp2x *= width;\n        perp2y *= width;\n\n        const a1 = (-perpy + p1y) - (-perpy + p2y);\n        const b1 = (-perpx + p2x) - (-perpx + p1x);\n        const c1 = ((-perpx + p1x) * (-perpy + p2y)) - ((-perpx + p2x) * (-perpy + p1y));\n        const a2 = (-perp2y + p3y) - (-perp2y + p2y);\n        const b2 = (-perp2x + p2x) - (-perp2x + p3x);\n        const c2 = ((-perp2x + p3x) * (-perp2y + p2y)) - ((-perp2x + p2x) * (-perp2y + p3y));\n\n        let denom = (a1 * b2) - (a2 * b1);\n\n        if (Math.abs(denom) < 0.1)\n        {\n            denom += 10.1;\n            verts.push(\n                p2x - (perpx * r1),\n                p2y - (perpy * r1));\n\n            verts.push(\n                p2x + (perpx * r2),\n                p2y + (perpy * r2));\n\n            continue;\n        }\n\n        const px = ((b1 * c2) - (b2 * c1)) / denom;\n        const py = ((a2 * c1) - (a1 * c2)) / denom;\n        const pdist = ((px - p2x) * (px - p2x)) + ((py - p2y) * (py - p2y));\n\n        if (pdist > (196 * width * width))\n        {\n            perp3x = perpx - perp2x;\n            perp3y = perpy - perp2y;\n\n            dist = Math.sqrt((perp3x * perp3x) + (perp3y * perp3y));\n            perp3x /= dist;\n            perp3y /= dist;\n            perp3x *= width;\n            perp3y *= width;\n\n            verts.push(p2x - (perp3x * r1), p2y - (perp3y * r1));\n\n            verts.push(p2x + (perp3x * r2), p2y + (perp3y * r2));\n\n            verts.push(p2x - (perp3x * r2 * r1), p2y - (perp3y * r1));\n\n            indexCount++;\n        }\n        else\n        {\n            verts.push(p2x + ((px - p2x) * r1), p2y + ((py - p2y) * r1));\n\n            verts.push(p2x - ((px - p2x) * r2), p2y - ((py - p2y) * r2));\n        }\n    }\n\n    p1x = points[(length - 2) * 2];\n    p1y = points[((length - 2) * 2) + 1];\n\n    p2x = points[(length - 1) * 2];\n    p2y = points[((length - 1) * 2) + 1];\n\n    perpx = -(p1y - p2y);\n    perpy = p1x - p2x;\n\n    dist = Math.sqrt((perpx * perpx) + (perpy * perpy));\n    perpx /= dist;\n    perpy /= dist;\n    perpx *= width;\n    perpy *= width;\n\n    verts.push(p2x - (perpx * r1), p2y - (perpy * r1));\n\n    verts.push(p2x + (perpx * r2), p2y + (perpy * r2));\n\n    const indices = graphicsGeometry.indices;\n\n    // indices.push(indexStart);\n\n    for (let i = 0; i < indexCount - 2; ++i)\n    {\n        indices.push(indexStart, indexStart + 1, indexStart + 2);\n\n        indexStart++;\n    }\n}\n\n/**\n * Builds a line to draw using the gl.drawArrays(gl.LINES) method\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.GraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {PIXI.GraphicsGeometry} graphicsGeometry - Geometry where to append output\n */\nfunction buildNativeLine(graphicsData, graphicsGeometry)\n{\n    let i = 0;\n\n    const shape = graphicsData.shape;\n    const points = graphicsData.points || shape.points;\n    const closedShape = shape.type !== SHAPES.POLY || shape.closeStroke;\n\n    if (points.length === 0) return;\n\n    const verts = graphicsGeometry.points;\n    const indices = graphicsGeometry.indices;\n    const length = points.length / 2;\n\n    const startIndex = verts.length / 2;\n    let currentIndex = startIndex;\n\n    verts.push(points[0], points[1]);\n\n    for (i = 1; i < length; i++)\n    {\n        verts.push(points[i * 2], points[(i * 2) + 1]);\n        indices.push(currentIndex, currentIndex + 1);\n\n        currentIndex++;\n    }\n\n    if (closedShape)\n    {\n        indices.push(currentIndex, startIndex);\n    }\n}\n","import { earcut } from '@pixi/utils';\n\n/**\n * Builds a polygon to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport default {\n\n    build(graphicsData)\n    {\n        graphicsData.points = graphicsData.shape.points.slice();\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        let points = graphicsData.points;\n        const holes = graphicsData.holes;\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        if (points.length >= 6)\n        {\n            const holeArray = [];\n            // Process holes..\n\n            for (let i = 0; i < holes.length; i++)\n            {\n                const hole = holes[i];\n\n                holeArray.push(points.length / 2);\n                points = points.concat(hole.points);\n            }\n\n            // sort color\n            const triangles = earcut(points, holeArray, 2);\n\n            if (!triangles)\n            {\n                return;\n            }\n\n            const vertPos = verts.length / 2;\n\n            for (let i = 0; i < triangles.length; i += 3)\n            {\n                indices.push(triangles[i] + vertPos);\n                indices.push(triangles[i + 1] + vertPos);\n                indices.push(triangles[i + 2] + vertPos);\n            }\n\n            for (let i = 0; i < points.length; i++)\n            {\n                verts.push(points[i]);\n            }\n        }\n    },\n};\n","/**\n * Builds a rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport default {\n\n    build(graphicsData)\n    {\n        // --- //\n        // need to convert points to a nice regular data\n        //\n        const rectData = graphicsData.shape;\n        const x = rectData.x;\n        const y = rectData.y;\n        const width = rectData.width;\n        const height = rectData.height;\n\n        const points = graphicsData.points;\n\n        points.length = 0;\n\n        points.push(x, y,\n            x + width, y,\n            x + width, y + height,\n            x, y + height);\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n        const verts = graphicsGeometry.points;\n\n        const vertPos = verts.length / 2;\n\n        verts.push(points[0], points[1],\n            points[2], points[3],\n            points[6], points[7],\n            points[4], points[5]);\n\n        graphicsGeometry.indices.push(vertPos, vertPos + 1, vertPos + 2,\n            vertPos + 1, vertPos + 2, vertPos + 3);\n    },\n};\n","import { earcut } from '@pixi/utils';\n\n/**\n * Builds a rounded rectangle to draw\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {PIXI.WebGLGraphicsData} graphicsData - The graphics object containing all the necessary properties\n * @param {object} webGLData - an object containing all the WebGL-specific information to create this shape\n * @param {object} webGLDataNativeLines - an object containing all the WebGL-specific information to create nativeLines\n */\nexport default {\n\n    build(graphicsData)\n    {\n        const rrectData = graphicsData.shape;\n        const points = graphicsData.points;\n        const x = rrectData.x;\n        const y = rrectData.y;\n        const width = rrectData.width;\n        const height = rrectData.height;\n\n        const radius = rrectData.radius;\n\n        points.length = 0;\n\n        quadraticBezierCurve(x, y + radius,\n            x, y,\n            x + radius, y,\n            points);\n        quadraticBezierCurve(x + width - radius,\n            y, x + width, y,\n            x + width, y + radius,\n            points);\n        quadraticBezierCurve(x + width, y + height - radius,\n            x + width, y + height,\n            x + width - radius, y + height,\n            points);\n        quadraticBezierCurve(x + radius, y + height,\n            x, y + height,\n            x, y + height - radius,\n            points);\n\n        // this tiny number deals with the issue that occurs when points overlap and earcut fails to triangulate the item.\n        // TODO - fix this properly, this is not very elegant.. but it works for now.\n    },\n\n    triangulate(graphicsData, graphicsGeometry)\n    {\n        const points = graphicsData.points;\n\n        const verts = graphicsGeometry.points;\n        const indices = graphicsGeometry.indices;\n\n        const vecPos = verts.length / 2;\n\n        const triangles = earcut(points, null, 2);\n\n        for (let i = 0, j = triangles.length; i < j; i += 3)\n        {\n            indices.push(triangles[i] + vecPos);\n            //     indices.push(triangles[i] + vecPos);\n            indices.push(triangles[i + 1] + vecPos);\n            //   indices.push(triangles[i + 2] + vecPos);\n            indices.push(triangles[i + 2] + vecPos);\n        }\n\n        for (let i = 0, j = points.length; i < j; i++)\n        {\n            verts.push(points[i], points[++i]);\n        }\n    },\n};\n\n/**\n * Calculate a single point for a quadratic bezier curve.\n * Utility function used by quadraticBezierCurve.\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} n1 - first number\n * @param {number} n2 - second number\n * @param {number} perc - percentage\n * @return {number} the result\n *\n */\nfunction getPt(n1, n2, perc)\n{\n    const diff = n2 - n1;\n\n    return n1 + (diff * perc);\n}\n\n/**\n * Calculate the points for a quadratic bezier curve. (helper function..)\n * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n *\n * Ignored from docs since it is not directly exposed.\n *\n * @ignore\n * @private\n * @param {number} fromX - Origin point x\n * @param {number} fromY - Origin point x\n * @param {number} cpX - Control point x\n * @param {number} cpY - Control point y\n * @param {number} toX - Destination point x\n * @param {number} toY - Destination point y\n * @param {number[]} [out=[]] - The output array to add points into. If not passed, a new array is created.\n * @return {number[]} an array of points\n */\nfunction quadraticBezierCurve(fromX, fromY, cpX, cpY, toX, toY, out = [])\n{\n    const n = 20;\n    const points = out;\n\n    let xa = 0;\n    let ya = 0;\n    let xb = 0;\n    let yb = 0;\n    let x = 0;\n    let y = 0;\n\n    for (let i = 0, j = 0; i <= n; ++i)\n    {\n        j = i / n;\n\n        // The Green Line\n        xa = getPt(fromX, cpX, j);\n        ya = getPt(fromY, cpY, j);\n        xb = getPt(cpX, toX, j);\n        yb = getPt(cpY, toY, j);\n\n        // The Black Dot\n        x = getPt(xa, xb, j);\n        y = getPt(ya, yb, j);\n\n        points.push(x, y);\n    }\n\n    return points;\n}\n","import { SHAPES, Point } from '@pixi/math';\nimport { Bounds } from '@pixi/display';\nimport { BatchGeometry, BatchDrawCall, BaseTexture } from '@pixi/core';\nimport { DRAW_MODES, WRAP_MODES } from '@pixi/constants';\n\nimport GraphicsData from './GraphicsData';\nimport buildCircle from './utils/buildCircle';\nimport buildLine from './utils/buildLine';\nimport buildPoly from './utils/buildPoly';\nimport buildRectangle from './utils/buildRectangle';\nimport buildRoundedRectangle from './utils/buildRoundedRectangle';\nimport { premultiplyTint } from '@pixi/utils';\n\nconst BATCH_POOL = [];\nconst DRAW_CALL_POOL = [];\nconst tmpPoint = new Point();\n\n/**\n * Map of fill commands for each shape type.\n *\n * @member {Object}\n * @private\n */\nconst fillCommands = {};\n\nfillCommands[SHAPES.POLY] = buildPoly;\nfillCommands[SHAPES.CIRC] = buildCircle;\nfillCommands[SHAPES.ELIP] = buildCircle;\nfillCommands[SHAPES.RECT] = buildRectangle;\nfillCommands[SHAPES.RREC] = buildRoundedRectangle;\n\n/**\n * A little internal structure to hold interim batch objects.\n *\n * @private\n */\nclass BatchPart\n{\n    constructor()\n    {\n        this.style = null;\n        this.size = 0;\n        this.start = 0;\n        this.attribStart = 0;\n        this.attribSize = 0;\n    }\n}\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * GraphicsGeometry is designed to not be continually updating the geometry since it's expensive\n * to re-tesselate using **earcut**. Consider using {@link PIXI.Mesh} for this use-case, it's much faster.\n *\n * @class\n * @extends PIXI.BatchGeometry\n * @memberof PIXI\n */\nexport default class GraphicsGeometry extends BatchGeometry\n{\n    constructor()\n    {\n        super();\n\n        /**\n         * An array of points to draw, 2 numbers per point\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.points = [];\n\n        /**\n         * The collection of colors\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.colors = [];\n\n        /**\n         * The UVs collection\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.uvs = [];\n\n        /**\n         * The indices of the vertices\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.indices = [];\n\n        /**\n         * Reference to the texture IDs.\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this.textureIds = [];\n\n        /**\n         * The collection of drawn shapes.\n         *\n         * @member {PIXI.GraphicsData[]}\n         * @protected\n         */\n        this.graphicsData = [];\n\n        /**\n         * Used to detect if the graphics object has changed.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.dirty = 0;\n\n        /**\n         * Batches need to regenerated if the geometry is updated.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.batchDirty = -1;\n\n        /**\n         * Used to check if the cache is dirty.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.cacheDirty = -1;\n\n        /**\n         * Used to detect if we cleared the graphicsData.\n         *\n         * @member {number}\n         * @default 0\n         * @protected\n         */\n        this.clearDirty = 0;\n\n        /**\n         * List of current draw calls drived from the batches.\n         *\n         * @member {object[]}\n         * @protected\n         */\n        this.drawCalls = [];\n\n        /**\n         * Intermediate abstract format sent to batch system.\n         * Can be converted to drawCalls or to batchable objects.\n         *\n         * @member {object[]}\n         * @protected\n         */\n        this.batches = [];\n\n        /**\n         * Index of the last batched shape in the stack of calls.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.shapeIndex = 0;\n\n        /**\n         * Cached bounds.\n         *\n         * @member {PIXI.Bounds}\n         * @protected\n         */\n        this._bounds = new Bounds();\n\n        /**\n         * The bounds dirty flag.\n         *\n         * @member {number}\n         * @protected\n         */\n        this.boundsDirty = -1;\n\n        /**\n         * Padding to add to the bounds.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.boundsPadding = 0;\n\n        this.batchable = false;\n\n        this.indicesUint16 = null;\n\n        this.uvsFloat32 = null;\n\n        /**\n         * Minimal distance between points that are considered different.\n         * Affects line tesselation.\n         *\n         * @member {number}\n         */\n        this.closePointEps = 1e-4;\n    }\n\n    /**\n     * Get the current bounds of the graphic geometry.\n     *\n     * @member {PIXI.Bounds}\n     * @readonly\n     */\n    get bounds()\n    {\n        if (this.boundsDirty !== this.dirty)\n        {\n            this.boundsDirty = this.dirty;\n            this.calculateBounds();\n        }\n\n        return this._bounds;\n    }\n\n    /**\n     * Call if you changed graphicsData manually.\n     * Empties all batch buffers.\n     */\n    invalidate()\n    {\n        this.boundsDirty = -1;\n        this.dirty++;\n        this.batchDirty++;\n        this.shapeIndex = 0;\n\n        this.points.length = 0;\n        this.colors.length = 0;\n        this.uvs.length = 0;\n        this.indices.length = 0;\n        this.textureIds.length = 0;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].textures.length = 0;\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const batch =  this.batches[i];\n\n            batch.start = 0;\n            batch.attribStart = 0;\n            batch.style = null;\n            BATCH_POOL.push(batch);\n        }\n\n        this.batches.length = 0;\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.GraphicsGeometry} This GraphicsGeometry object. Good for chaining method calls\n     */\n    clear()\n    {\n        if (this.graphicsData.length > 0)\n        {\n            this.invalidate();\n            this.clearDirty++;\n            this.graphicsData.length = 0;\n        }\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.FillStyle} fillStyle - Defines style of the fill.\n     * @param {PIXI.LineStyle} lineStyle - Defines style of the lines.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    drawShape(shape, fillStyle, lineStyle, matrix)\n    {\n        const data = new GraphicsData(shape, fillStyle, lineStyle, matrix);\n\n        this.graphicsData.push(data);\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Draws the given shape to this Graphics object. Can be any of Circle, Rectangle, Ellipse, Line or Polygon.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - The shape object to draw.\n     * @param {PIXI.Matrix} matrix - Transform applied to the points of the shape.\n     * @return {PIXI.GraphicsGeometry} Returns geometry for chaining.\n     */\n    drawHole(shape, matrix)\n    {\n        if (!this.graphicsData.length)\n        {\n            return null;\n        }\n\n        const data = new GraphicsData(shape, null, null, matrix);\n\n        const lastShape = this.graphicsData[this.graphicsData.length - 1];\n\n        data.lineStyle = lastShape.lineStyle;\n\n        lastShape.holes.push(data);\n\n        this.dirty++;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        // destroy each of the GraphicsData objects\n        for (let i = 0; i < this.graphicsData.length; ++i)\n        {\n            this.graphicsData[i].destroy();\n        }\n\n        this.points.length = 0;\n        this.points = null;\n        this.colors.length = 0;\n        this.colors = null;\n        this.uvs.length = 0;\n        this.uvs = null;\n        this.indices.length = 0;\n        this.indices = null;\n        this.indexBuffer.destroy();\n        this.indexBuffer = null;\n        this.graphicsData.length = 0;\n        this.graphicsData = null;\n        this.drawCalls.length = 0;\n        this.drawCalls = null;\n        this.batches.length = 0;\n        this.batches = null;\n        this._bounds = null;\n    }\n\n    /**\n     * Check to see if a point is contained within this geometry.\n     *\n     * @param {PIXI.Point} point - Point to check if it's contained.\n     * @return {Boolean} `true` if the point is contained within geometry.\n     */\n    containsPoint(point)\n    {\n        const graphicsData = this.graphicsData;\n\n        for (let i = 0; i < graphicsData.length; ++i)\n        {\n            const data = graphicsData[i];\n\n            if (!data.fillStyle.visible)\n            {\n                continue;\n            }\n\n            // only deal with fills..\n            if (data.shape)\n            {\n                if (data.matrix)\n                {\n                    data.matrix.applyInverse(point, tmpPoint);\n                }\n                else\n                {\n                    tmpPoint.copyFrom(point);\n                }\n\n                if (data.shape.contains(tmpPoint.x, tmpPoint.y))\n                {\n                    if (data.holes)\n                    {\n                        for (let i = 0; i < data.holes.length; i++)\n                        {\n                            const hole = data.holes[i];\n\n                            if (hole.shape.contains(tmpPoint.x, tmpPoint.y))\n                            {\n                                return false;\n                            }\n                        }\n                    }\n\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    /**\n     * Generates intermediate batch data. Either gets converted to drawCalls\n     * or used to convert to batch objects directly by the Graphics object.\n     */\n    updateBatches()\n    {\n        if (this.dirty === this.cacheDirty) return;\n        if (this.graphicsData.length === 0)\n        {\n            this.batchable = true;\n\n            return;\n        }\n\n        if (this.dirty !== this.cacheDirty)\n        {\n            for (let i = 0; i < this.graphicsData.length; i++)\n            {\n                const data = this.graphicsData[i];\n\n                if (data.fillStyle && !data.fillStyle.texture.baseTexture.valid) return;\n                if (data.lineStyle && !data.lineStyle.texture.baseTexture.valid) return;\n            }\n        }\n\n        this.cacheDirty = this.dirty;\n\n        const uvs = this.uvs;\n\n        let batchPart = null;\n        let currentTexture = null;\n        let currentColor = 0;\n        let currentNative = false;\n\n        if (this.batches.length > 0)\n        {\n            batchPart = this.batches[this.batches.length - 1];\n\n            const style = batchPart.style;\n\n            currentTexture = style.texture.baseTexture;\n            currentColor = style.color + style.alpha;\n            currentNative = !!style.native;\n        }\n\n        for (let i = this.shapeIndex; i < this.graphicsData.length; i++)\n        {\n            this.shapeIndex++;\n\n            const data = this.graphicsData[i];\n            const command = fillCommands[data.type];\n\n            const fillStyle = data.fillStyle;\n            const lineStyle = data.lineStyle;\n\n            // build out the shapes points..\n            command.build(data);\n\n            if (data.matrix)\n            {\n                this.transformPoints(data.points, data.matrix);\n            }\n\n            for (let j = 0; j < 2; j++)\n            {\n                const style = (j === 0) ? fillStyle : lineStyle;\n\n                if (!style.visible) continue;\n\n                const nextTexture = style.texture.baseTexture;\n\n                const index = this.indices.length;\n                const attribIndex = this.points.length / 2;\n\n                // close batch if style is different\n                if (batchPart\n                    && (currentTexture !== nextTexture\n                    || currentColor !== (style.color + style.alpha)\n                    || currentNative !== !!style.native))\n                {\n                    batchPart.size = index - batchPart.start;\n                    batchPart.attribSize = attribIndex - batchPart.attribStart;\n\n                    if (batchPart.size > 0)\n                    {\n                        batchPart = null;\n                    }\n                }\n                // spawn new batch if its first batch or previous was closed\n                if (!batchPart)\n                {\n                    batchPart = BATCH_POOL.pop() || new BatchPart();\n                    this.batches.push(batchPart);\n                    nextTexture.wrapMode = WRAP_MODES.REPEAT;\n                    currentTexture = nextTexture;\n                    currentColor = style.color + style.alpha;\n                    currentNative = style.native;\n\n                    batchPart.style = style;\n                    batchPart.start = index;\n                    batchPart.attribStart = attribIndex;\n                }\n\n                const start = this.points.length / 2;\n\n                if (j === 0)\n                {\n                    if (data.holes.length)\n                    {\n                        this.processHoles(data.holes);\n\n                        buildPoly.triangulate(data, this);\n                    }\n                    else\n                    {\n                        command.triangulate(data, this);\n                    }\n                }\n                else\n                {\n                    buildLine(data, this);\n\n                    for (let i = 0; i < data.holes.length; i++)\n                    {\n                        buildLine(data.holes[i], this);\n                    }\n                }\n\n                const size = (this.points.length / 2) - start;\n\n                this.addUvs(this.points, uvs, style.texture, start, size, style.matrix);\n            }\n        }\n\n        const index = this.indices.length;\n        const attrib = this.points.length / 2;\n\n        if (!batchPart)\n        {\n            // there are no visible styles in GraphicsData\n            // its possible that someone wants Graphics just for the bounds\n            this.batchable = true;\n\n            return;\n        }\n\n        batchPart.size = index - batchPart.start;\n        batchPart.attribSize = attrib - batchPart.attribStart;\n        this.indicesUint16 = new Uint16Array(this.indices);\n\n        // TODO make this a const..\n        this.batchable = this.isBatchable();\n\n        if (this.batchable)\n        {\n            this.batchDirty++;\n\n            this.uvsFloat32 = new Float32Array(this.uvs);\n\n            // offset the indices so that it works with the batcher...\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                for (let j = 0; j < batch.size; j++)\n                {\n                    const index = batch.start + j;\n\n                    this.indicesUint16[index] = this.indicesUint16[index] - batch.attribStart;\n                }\n            }\n        }\n        else\n        {\n            this.buildDrawCalls();\n        }\n    }\n\n    /**\n     * Checks to see if this graphics geometry can be batched.\n     * Currently it needs to be small enough and not contain any native lines.\n     * @protected\n     */\n    isBatchable()\n    {\n        const batches = this.batches;\n\n        for (let i = 0; i < batches.length; i++)\n        {\n            if (batches[i].style.native)\n            {\n                return false;\n            }\n        }\n\n        return (this.points.length < GraphicsGeometry.BATCHABLE_SIZE * 2);\n    }\n\n    /**\n     * Converts intermediate batches data to drawCalls.\n     * @protected\n     */\n    buildDrawCalls()\n    {\n        let TICK = ++BaseTexture._globalBatch;\n\n        for (let i = 0; i < this.drawCalls.length; i++)\n        {\n            this.drawCalls[i].textures.length = 0;\n            DRAW_CALL_POOL.push(this.drawCalls[i]);\n        }\n\n        this.drawCalls.length = 0;\n\n        const uvs = this.uvs;\n        const colors = this.colors;\n        const textureIds = this.textureIds;\n\n        let currentGroup =  DRAW_CALL_POOL.pop() || new BatchDrawCall();\n\n        currentGroup.textureCount = 0;\n        currentGroup.start = 0;\n        currentGroup.size = 0;\n        currentGroup.type = DRAW_MODES.TRIANGLES;\n\n        let textureCount = 0;\n        let currentTexture = null;\n        let textureId = 0;\n        let native = false;\n        let drawMode = DRAW_MODES.TRIANGLES;\n\n        let index = 0;\n\n        this.drawCalls.push(currentGroup);\n\n        // TODO - this can be simplified\n        for (let i = 0; i < this.batches.length; i++)\n        {\n            const data = this.batches[i];\n\n            // TODO add some full on MAX_TEXTURE CODE..\n            const MAX_TEXTURES = 8;\n\n            const style = data.style;\n\n            const nextTexture = style.texture.baseTexture;\n\n            if (native !== !!style.native)\n            {\n                native = style.native;\n                drawMode = native ? DRAW_MODES.LINES : DRAW_MODES.TRIANGLES;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._batchEnabled !== TICK)\n                {\n                    if (textureCount === MAX_TEXTURES)\n                    {\n                        TICK++;\n\n                        textureCount = 0;\n\n                        if (currentGroup.size > 0)\n                        {\n                            currentGroup = DRAW_CALL_POOL.pop() || new BatchDrawCall();\n                            this.drawCalls.push(currentGroup);\n                        }\n\n                        currentGroup.start = index;\n                        currentGroup.size = 0;\n                        currentGroup.textureCount = 0;\n                        currentGroup.type = drawMode;\n                    }\n\n                    // TODO add this to the render part..\n                    nextTexture.touched = 1;// touch;\n                    nextTexture._batchEnabled = TICK;\n                    nextTexture._id = textureCount;\n                    nextTexture.wrapMode = 10497;\n\n                    currentGroup.textures[currentGroup.textureCount++] = nextTexture;\n                    textureCount++;\n                }\n            }\n\n            currentGroup.size += data.size;\n            index += data.size;\n\n            textureId = nextTexture._id;\n\n            this.addColors(colors, style.color, style.alpha, data.attribSize);\n            this.addTextureIds(textureIds, textureId, data.attribSize);\n        }\n\n        BaseTexture._globalBatch = TICK;\n\n        // upload..\n        // merge for now!\n        const verts = this.points;\n\n        // verts are 2 positions.. so we * by 3 as there are 6 properties.. then 4 cos its bytes\n        const glPoints = new ArrayBuffer(verts.length * 3 * 4);\n        const f32 = new Float32Array(glPoints);\n        const u32 = new Uint32Array(glPoints);\n\n        let p = 0;\n\n        for (let i = 0; i < verts.length / 2; i++)\n        {\n            f32[p++] = verts[i * 2];\n            f32[p++] = verts[(i * 2) + 1];\n\n            f32[p++] = uvs[i * 2];\n            f32[p++] = uvs[(i * 2) + 1];\n\n            u32[p++] = colors[i];\n\n            f32[p++] = textureIds[i];\n        }\n\n        this._buffer.update(glPoints);\n        this._indexBuffer.update(this.indicesUint16);\n    }\n\n    /**\n     * Process the holes data.\n     *\n     * @param {PIXI.GraphicsData[]} holes - Holes to render\n     * @protected\n     */\n    processHoles(holes)\n    {\n        for (let i = 0; i < holes.length; i++)\n        {\n            const hole = holes[i];\n\n            const command = fillCommands[hole.type];\n\n            command.build(hole);\n\n            if (hole.matrix)\n            {\n                this.transformPoints(hole.points, hole.matrix);\n            }\n        }\n    }\n\n    /**\n     * Update the local bounds of the object. Expensive to use performance-wise.\n     * @protected\n     */\n    calculateBounds()\n    {\n        let minX = Infinity;\n        let maxX = -Infinity;\n\n        let minY = Infinity;\n        let maxY = -Infinity;\n\n        if (this.graphicsData.length)\n        {\n            let shape = null;\n            let x = 0;\n            let y = 0;\n            let w = 0;\n            let h = 0;\n\n            for (let i = 0; i < this.graphicsData.length; i++)\n            {\n                const data = this.graphicsData[i];\n\n                const type = data.type;\n                const lineWidth = data.lineStyle ? data.lineStyle.width : 0;\n\n                shape = data.shape;\n\n                if (type === SHAPES.RECT || type === SHAPES.RREC)\n                {\n                    x = shape.x - (lineWidth / 2);\n                    y = shape.y - (lineWidth / 2);\n                    w = shape.width + lineWidth;\n                    h = shape.height + lineWidth;\n\n                    minX = x < minX ? x : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y < minY ? y : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else if (type === SHAPES.CIRC)\n                {\n                    x = shape.x;\n                    y = shape.y;\n                    w = shape.radius + (lineWidth / 2);\n                    h = shape.radius + (lineWidth / 2);\n\n                    minX = x - w < minX ? x - w : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y - h < minY ? y - h : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else if (type === SHAPES.ELIP)\n                {\n                    x = shape.x;\n                    y = shape.y;\n                    w = shape.width + (lineWidth / 2);\n                    h = shape.height + (lineWidth / 2);\n\n                    minX = x - w < minX ? x - w : minX;\n                    maxX = x + w > maxX ? x + w : maxX;\n\n                    minY = y - h < minY ? y - h : minY;\n                    maxY = y + h > maxY ? y + h : maxY;\n                }\n                else\n                {\n                    // POLY\n                    const points = shape.points;\n                    let x2 = 0;\n                    let y2 = 0;\n                    let dx = 0;\n                    let dy = 0;\n                    let rw = 0;\n                    let rh = 0;\n                    let cx = 0;\n                    let cy = 0;\n\n                    for (let j = 0; j + 2 < points.length; j += 2)\n                    {\n                        x = points[j];\n                        y = points[j + 1];\n                        x2 = points[j + 2];\n                        y2 = points[j + 3];\n                        dx = Math.abs(x2 - x);\n                        dy = Math.abs(y2 - y);\n                        h = lineWidth;\n                        w = Math.sqrt((dx * dx) + (dy * dy));\n\n                        if (w < 1e-9)\n                        {\n                            continue;\n                        }\n\n                        rw = ((h / w * dy) + dx) / 2;\n                        rh = ((h / w * dx) + dy) / 2;\n                        cx = (x2 + x) / 2;\n                        cy = (y2 + y) / 2;\n\n                        minX = cx - rw < minX ? cx - rw : minX;\n                        maxX = cx + rw > maxX ? cx + rw : maxX;\n\n                        minY = cy - rh < minY ? cy - rh : minY;\n                        maxY = cy + rh > maxY ? cy + rh : maxY;\n                    }\n                }\n            }\n        }\n        else\n        {\n            minX = 0;\n            maxX = 0;\n            minY = 0;\n            maxY = 0;\n        }\n\n        const padding = this.boundsPadding;\n\n        this._bounds.minX = minX - padding;\n        this._bounds.maxX = maxX + padding;\n\n        this._bounds.minY = minY - padding;\n        this._bounds.maxY = maxY + padding;\n    }\n\n    /**\n     * Transform points using matrix.\n     *\n     * @protected\n     * @param {number[]} points - Points to transform\n     * @param {PIXI.Matrix} matrix - Transform matrix\n     */\n    transformPoints(points, matrix)\n    {\n        for (let i = 0; i < points.length / 2; i++)\n        {\n            const x = points[(i * 2)];\n            const y = points[(i * 2) + 1];\n\n            points[(i * 2)] = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n            points[(i * 2) + 1] = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n        }\n    }\n\n    /**\n     * Add colors.\n     *\n     * @protected\n     * @param {number[]} colors - List of colors to add to\n     * @param {number} color - Color to add\n     * @param {number} alpha - Alpha to use\n     * @param {number} size - Number of colors to add\n     */\n    addColors(colors, color, alpha, size)\n    {\n        // TODO use the premultiply bits Ivan added\n        const rgb = (color >> 16) + (color & 0xff00) + ((color & 0xff) << 16);\n\n        const rgba =  premultiplyTint(rgb, alpha);\n\n        while (size-- > 0)\n        {\n            colors.push(rgba);\n        }\n    }\n\n    /**\n     * Add texture id that the shader/fragment wants to use.\n     *\n     * @protected\n     * @param {number[]} textureIds\n     * @param {number} id\n     * @param {number} size\n     */\n    addTextureIds(textureIds, id, size)\n    {\n        while (size-- > 0)\n        {\n            textureIds.push(id);\n        }\n    }\n\n    /**\n     * Generates the UVs for a shape.\n     *\n     * @protected\n     * @param {number[]} verts - Vertices\n     * @param {number[]} uvs - UVs\n     * @param {PIXI.Texture} texture - Reference to Texture\n     * @param {number} start - Index buffer start index.\n     * @param {number} size - The size/length for index buffer.\n     * @param {PIXI.Matrix} [matrix] - Optional transform for all points.\n     */\n    addUvs(verts, uvs, texture, start, size, matrix)\n    {\n        let index = 0;\n        const uvsStart = uvs.length;\n        const frame = texture.frame;\n\n        while (index < size)\n        {\n            let x = verts[(start + index) * 2];\n            let y = verts[((start + index) * 2) + 1];\n\n            if (matrix)\n            {\n                const nx = (matrix.a * x) + (matrix.c * y) + matrix.tx;\n\n                y = (matrix.b * x) + (matrix.d * y) + matrix.ty;\n                x = nx;\n            }\n\n            index++;\n\n            uvs.push(x / frame.width, y / frame.height);\n        }\n\n        const baseTexture = texture.baseTexture;\n\n        if (frame.width < baseTexture.width\n            || frame.height < baseTexture.height)\n        {\n            this.adjustUvs(uvs, texture, uvsStart, size);\n        }\n    }\n\n    /**\n     * Modify uvs array according to position of texture region\n     * Does not work with rotated or trimmed textures\n     * @param {number[]} uvs array\n     * @param {PIXI.Texture} texture region\n     * @param {number} start starting index for uvs\n     * @param {number} size how many points to adjust\n     */\n    adjustUvs(uvs, texture, start, size)\n    {\n        const baseTexture = texture.baseTexture;\n        const eps = 1e-6;\n        const finish = start + (size * 2);\n        const frame = texture.frame;\n        const scaleX = frame.width / baseTexture.width;\n        const scaleY = frame.height / baseTexture.height;\n        let offsetX = frame.x / frame.width;\n        let offsetY = frame.y / frame.height;\n        let minX = Math.floor(uvs[start] + eps);\n        let minY = Math.floor(uvs[start + 1] + eps);\n\n        for (let i = start + 2; i < finish; i += 2)\n        {\n            minX = Math.min(minX, Math.floor(uvs[i] + eps));\n            minY = Math.min(minY, Math.floor(uvs[i + 1] + eps));\n        }\n        offsetX -= minX;\n        offsetY -= minY;\n        for (let i = start; i < finish; i += 2)\n        {\n            uvs[i] = (uvs[i] + offsetX) * scaleX;\n            uvs[i + 1] = (uvs[i + 1] + offsetY) * scaleY;\n        }\n    }\n}\n\n/**\n * The maximum number of points to consider an object \"batchable\",\n * able to be batched by the renderer's batch system.\n *\n * @memberof PIXI.GraphicsGeometry\n * @static\n * @member {number} BATCHABLE_SIZE\n * @default 100\n */\nGraphicsGeometry.BATCHABLE_SIZE = 100;\n","import FillStyle from './FillStyle';\n\n/**\n * Represents the line style for Graphics.\n * @memberof PIXI\n * @class\n * @extends PIXI.FillStyle\n */\nexport default class LineStyle extends FillStyle\n{\n    /**\n     * Clones the object\n     *\n     * @return {PIXI.LineStyle}\n     */\n    clone()\n    {\n        const obj = new LineStyle();\n\n        obj.color = this.color;\n        obj.alpha = this.alpha;\n        obj.texture = this.texture;\n        obj.matrix = this.matrix;\n        obj.visible = this.visible;\n        obj.width = this.width;\n        obj.alignment = this.alignment;\n        obj.native = this.native;\n\n        return obj;\n    }\n    /**\n     * Reset the line style to default.\n     */\n    reset()\n    {\n        super.reset();\n\n        // Override default line style color\n        this.color = 0x0;\n\n        /**\n         * The width (thickness) of any lines drawn.\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.width = 0;\n\n        /**\n         * The alignment of any lines drawn (0.5 = middle, 1 = outter, 0 = inner).\n         *\n         * @member {number}\n         * @default 0\n         */\n        this.alignment = 0.5;\n\n        /**\n         * If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.native = false;\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for bezier curves\n * @class\n * @private\n */\nexport default class BezierUtils\n{\n    /**\n     * Calculate length of bezier curve.\n     * Analytical solution is impossible, since it involves an integral that does not integrate in general.\n     * Therefore numerical solution is used.\n     *\n     * @private\n     * @param {number} fromX - Starting point x\n     * @param {number} fromY - Starting point y\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {number} Length of bezier curve\n     */\n    static curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n    {\n        const n = 10;\n        let result = 0.0;\n        let t = 0.0;\n        let t2 = 0.0;\n        let t3 = 0.0;\n        let nt = 0.0;\n        let nt2 = 0.0;\n        let nt3 = 0.0;\n        let x = 0.0;\n        let y = 0.0;\n        let dx = 0.0;\n        let dy = 0.0;\n        let prevX = fromX;\n        let prevY = fromY;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            t = i / n;\n            t2 = t * t;\n            t3 = t2 * t;\n            nt = (1.0 - t);\n            nt2 = nt * nt;\n            nt3 = nt2 * nt;\n\n            x = (nt3 * fromX) + (3.0 * nt2 * t * cpX) + (3.0 * nt * t2 * cpX2) + (t3 * toX);\n            y = (nt3 * fromY) + (3.0 * nt2 * t * cpY) + (3 * nt * t2 * cpY2) + (t3 * toY);\n            dx = prevX - x;\n            dy = prevY - y;\n            prevX = x;\n            prevY = y;\n\n            result += Math.sqrt((dx * dx) + (dy * dy));\n        }\n\n        return result;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * Ignored from docs since it is not directly exposed.\n     *\n     * @ignore\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Path array to push points into\n     */\n    static curveTo(cpX, cpY, cpX2, cpY2, toX, toY, points)\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        points.length -= 2;\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            BezierUtils.curveLength(fromX, fromY, cpX, cpY, cpX2, cpY2, toX, toY)\n        );\n\n        let dt = 0;\n        let dt2 = 0;\n        let dt3 = 0;\n        let t2 = 0;\n        let t3 = 0;\n\n        points.push(fromX, fromY);\n\n        for (let i = 1, j = 0; i <= n; ++i)\n        {\n            j = i / n;\n\n            dt = (1 - j);\n            dt2 = dt * dt;\n            dt3 = dt2 * dt;\n\n            t2 = j * j;\n            t3 = t2 * j;\n\n            points.push(\n                (dt3 * fromX) + (3 * dt2 * j * cpX) + (3 * dt * t2 * cpX2) + (t3 * toX),\n                (dt3 * fromY) + (3 * dt2 * j * cpY) + (3 * dt * t2 * cpY2) + (t3 * toY)\n            );\n        }\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\n\n/**\n * Utilities for quadratic curves\n * @class\n * @private\n */\nexport default class QuadraticUtils\n{\n    /**\n     * Calculate length of quadratic curve\n     * @see {@link http://www.malczak.linuxpl.com/blog/quadratic-bezier-curve-length/}\n     * for the detailed explanation of math behind this.\n     *\n     * @private\n     * @param {number} fromX - x-coordinate of curve start point\n     * @param {number} fromY - y-coordinate of curve start point\n     * @param {number} cpX - x-coordinate of curve control point\n     * @param {number} cpY - y-coordinate of curve control point\n     * @param {number} toX - x-coordinate of curve end point\n     * @param {number} toY - y-coordinate of curve end point\n     * @return {number} Length of quadratic curve\n     */\n    static curveLength(fromX, fromY, cpX, cpY, toX, toY)\n    {\n        const ax = fromX - (2.0 * cpX) + toX;\n        const ay = fromY - (2.0 * cpY) + toY;\n        const bx = (2.0 * cpX) - (2.0 * fromX);\n        const by = (2.0 * cpY) - (2.0 * fromY);\n        const a = 4.0 * ((ax * ax) + (ay * ay));\n        const b = 4.0 * ((ax * bx) + (ay * by));\n        const c = (bx * bx) + (by * by);\n\n        const s = 2.0 * Math.sqrt(a + b + c);\n        const a2 = Math.sqrt(a);\n        const a32 = 2.0 * a * a2;\n        const c2 = 2.0 * Math.sqrt(c);\n        const ba = b / a2;\n\n        return (\n            (a32 * s)\n                + (a2 * b * (s - c2))\n                + (\n                    ((4.0 * c * a) - (b * b))\n                   * Math.log(((2.0 * a2) + ba + s) / (ba + c2))\n                )\n        ) / (4.0 * a32);\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @private\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @param {number[]} points - Points to add segments to.\n     */\n    static curveTo(cpX, cpY, toX, toY, points)\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const n = GRAPHICS_CURVES._segmentsCount(\n            QuadraticUtils.curveLength(fromX, fromY, cpX, cpY, toX, toY)\n        );\n\n        let xa = 0;\n        let ya = 0;\n\n        for (let i = 1; i <= n; ++i)\n        {\n            const j = i / n;\n\n            xa = fromX + ((cpX - fromX) * j);\n            ya = fromY + ((cpY - fromY) * j);\n\n            points.push(xa + (((cpX + ((toX - cpX) * j)) - xa) * j),\n                ya + (((cpY + ((toY - cpY) * j)) - ya) * j));\n        }\n    }\n}\n","import { GRAPHICS_CURVES } from '../const';\nimport { PI_2 } from '@pixi/math';\n\n/**\n * Utilities for arc curves\n * @class\n * @private\n */\nexport default class ArcUtils\n{\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @private\n     * @param {number} x1 - The x-coordinate of the beginning of the arc\n     * @param {number} y1 - The y-coordinate of the beginning of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {object} If the arc length is valid, return center of circle, radius and other info otherwise `null`.\n     */\n    static curveTo(x1, y1, x2, y2, radius, points)\n    {\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        const a1 = fromY - y1;\n        const b1 = fromX - x1;\n        const a2 = y2 - y1;\n        const b2 = x2 - x1;\n        const mm = Math.abs((a1 * b2) - (b1 * a2));\n\n        if (mm < 1.0e-8 || radius === 0)\n        {\n            if (points[points.length - 2] !== x1 || points[points.length - 1] !== y1)\n            {\n                points.push(x1, y1);\n            }\n\n            return null;\n        }\n\n        const dd = (a1 * a1) + (b1 * b1);\n        const cc = (a2 * a2) + (b2 * b2);\n        const tt = (a1 * a2) + (b1 * b2);\n        const k1 = radius * Math.sqrt(dd) / mm;\n        const k2 = radius * Math.sqrt(cc) / mm;\n        const j1 = k1 * tt / dd;\n        const j2 = k2 * tt / cc;\n        const cx = (k1 * b2) + (k2 * b1);\n        const cy = (k1 * a2) + (k2 * a1);\n        const px = b1 * (k2 + j1);\n        const py = a1 * (k2 + j1);\n        const qx = b2 * (k1 + j2);\n        const qy = a2 * (k1 + j2);\n        const startAngle = Math.atan2(py - cy, px - cx);\n        const endAngle = Math.atan2(qy - cy, qx - cx);\n\n        return {\n            cx: (cx + x1),\n            cy: (cy + y1),\n            radius,\n            startAngle,\n            endAngle,\n            anticlockwise: (b1 * a2 > b2 * a1),\n        };\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @private\n     * @param {number} startX - Start x location of arc\n     * @param {number} startY - Start y location of arc\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} anticlockwise - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @param {number} n - Number of segments\n     * @param {number[]} points - Collection of points to add to\n     */\n    static arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points)\n    {\n        const sweep = endAngle - startAngle;\n        const n = GRAPHICS_CURVES._segmentsCount(\n            Math.abs(sweep) * radius,\n            Math.ceil(Math.abs(sweep) / PI_2) * 40\n        );\n\n        const theta = (sweep) / (n * 2);\n        const theta2 = theta * 2;\n        const cTheta = Math.cos(theta);\n        const sTheta = Math.sin(theta);\n        const segMinus = n - 1;\n        const remainder = (segMinus % 1) / segMinus;\n\n        for (let i = 0; i <= segMinus; ++i)\n        {\n            const real = i + (remainder * i);\n            const angle = ((theta) + startAngle + (theta2 * real));\n            const c = Math.cos(angle);\n            const s = -Math.sin(angle);\n\n            points.push(\n                (((cTheta * c) + (sTheta * s)) * radius) + cx,\n                (((cTheta * -s) + (sTheta * c)) * radius) + cy\n            );\n        }\n    }\n}\n","import { Polygon, PI_2 } from '@pixi/math';\n\n/**\n * Draw a star shape with an arbitrary number of points.\n *\n * @class\n * @extends PIXI.Polygon\n * @memberof PIXI\n * @param {number} x - Center X position of the star\n * @param {number} y - Center Y position of the star\n * @param {number} points - The number of points of the star, must be > 1\n * @param {number} radius - The outer radius of the star\n * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n */\nexport default class Star extends Polygon\n{\n    constructor(x, y, points, radius, innerRadius, rotation)\n    {\n        innerRadius = innerRadius || radius / 2;\n\n        const startAngle = (-1 * Math.PI / 2) + rotation;\n        const len = points * 2;\n        const delta = PI_2 / len;\n        const polygon = [];\n\n        for (let i = 0; i < len; i++)\n        {\n            const r = i % 2 ? innerRadius : radius;\n            const angle = (i * delta) + startAngle;\n\n            polygon.push(\n                x + (r * Math.cos(angle)),\n                y + (r * Math.sin(angle))\n            );\n        }\n\n        super(polygon);\n    }\n}\n","import {\n    Circle,\n    Ellipse,\n    PI_2,\n    Point,\n    Polygon,\n    Rectangle,\n    RoundedRectangle,\n    Matrix,\n} from '@pixi/math';\nimport { hex2rgb } from '@pixi/utils';\nimport {\n    Texture,\n    Shader,\n    UniformGroup, State,\n} from '@pixi/core';\nimport FillStyle from './styles/FillStyle';\nimport GraphicsGeometry from './GraphicsGeometry';\nimport LineStyle from './styles/LineStyle';\nimport BezierUtils from './utils/BezierUtils';\nimport QuadraticUtils from './utils/QuadraticUtils';\nimport ArcUtils from './utils/ArcUtils';\nimport Star from './utils/Star';\nimport { BLEND_MODES } from '@pixi/constants';\nimport { Container } from '@pixi/display';\n\nconst temp = new Float32Array(3);\n\n// a default shaders map used by graphics..\nconst DEFAULT_SHADERS = {};\n\n/**\n * The Graphics class contains methods used to draw primitive shapes such as lines, circles and\n * rectangles to the display, and to color and fill them.\n *\n * Note that because Graphics can share a GraphicsGeometry with other instances,\n * it is necessary to call `destroy()` to properly dereference the underlying\n * GraphicsGeometry and avoid a memory leak. Alternatively, keep using the same\n * Graphics instance and call `clear()` between redraws.\n *\n * @class\n * @extends PIXI.Container\n * @memberof PIXI\n */\nexport default class Graphics extends Container\n{\n    /**\n     * @param {PIXI.GraphicsGeometry} [geometry=null] - Geometry to use, if omitted\n     *        will create a new GraphicsGeometry instance.\n     */\n    constructor(geometry = null)\n    {\n        super();\n        /**\n         * Includes vertex positions, face indices, normals, colors, UVs, and\n         * custom attributes within buffers, reducing the cost of passing all\n         * this data to the GPU. Can be shared between multiple Mesh or Graphics objects.\n         * @member {PIXI.GraphicsGeometry}\n         * @readonly\n         */\n        this.geometry = geometry || new GraphicsGeometry();\n\n        this.geometry.refCount++;\n\n        /**\n         * Represents the vertex and fragment shaders that processes the geometry and runs on the GPU.\n         * Can be shared between multiple Graphics objects.\n         * @member {PIXI.Shader}\n         */\n        this.shader = null;\n\n        /**\n         * Represents the WebGL state the Graphics required to render, excludes shader and geometry. E.g.,\n         * blend mode, culling, depth testing, direction of rendering triangles, backface, etc.\n         * @member {PIXI.State}\n         */\n        this.state = State.for2d();\n\n        /**\n         * Current fill style\n         *\n         * @member {PIXI.FillStyle}\n         * @protected\n         */\n        this._fillStyle = new FillStyle();\n\n        /**\n         * Current line style\n         *\n         * @member {PIXI.LineStyle}\n         * @protected\n         */\n        this._lineStyle = new LineStyle();\n\n        /**\n         * Current shape transform matrix.\n         *\n         * @member {PIXI.Matrix}\n         * @protected\n         */\n        this._matrix = null;\n\n        /**\n         * Current hole mode is enabled.\n         *\n         * @member {boolean}\n         * @default false\n         * @protected\n         */\n        this._holeMode = false;\n\n        /**\n         * Current path\n         *\n         * @member {PIXI.Polygon}\n         * @protected\n         */\n        this.currentPath = null;\n\n        /**\n         * When cacheAsBitmap is set to true the graphics object will be rendered as if it was a sprite.\n         * This is useful if your graphics element does not change often, as it will speed up the rendering\n         * of the object in exchange for taking up texture memory. It is also useful if you need the graphics\n         * object to be anti-aliased, because it will be rendered using canvas. This is not recommended if\n         * you are constantly redrawing the graphics element.\n         *\n         * @name cacheAsBitmap\n         * @member {boolean}\n         * @memberof PIXI.Graphics#\n         * @default false\n         */\n\n        /**\n         * A collections of batches! These can be drawn by the renderer batch system.\n         *\n         * @protected\n         * @member {object[]}\n         */\n        this.batches = [];\n\n        /**\n         * Update dirty for limiting calculating tints for batches.\n         *\n         * @protected\n         * @member {number}\n         * @default -1\n         */\n        this.batchTint = -1;\n\n        /**\n         * Copy of the object vertex data.\n         *\n         * @protected\n         * @member {Float32Array}\n         */\n        this.vertexData = null;\n\n        this._transformID = -1;\n        this.batchDirty = -1;\n\n        /**\n         * Renderer plugin for batching\n         *\n         * @member {string}\n         * @default 'batch'\n         */\n        this.pluginName = 'batch';\n\n        // Set default\n        this.tint = 0xFFFFFF;\n        this.blendMode = BLEND_MODES.NORMAL;\n    }\n\n    /**\n     * Creates a new Graphics object with the same values as this one.\n     * Note that the only the properties of the object are cloned, not its transform (position,scale,etc)\n     *\n     * @return {PIXI.Graphics} A clone of the graphics object\n     */\n    clone()\n    {\n        this.finishPoly();\n\n        return new Graphics(this.geometry);\n    }\n\n    /**\n     * The blend mode to be applied to the graphic shape. Apply a value of\n     * `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL;\n     * @see PIXI.BLEND_MODES\n     */\n    set blendMode(value)\n    {\n        this.state.blendMode = value;\n    }\n\n    get blendMode()\n    {\n        return this.state.blendMode;\n    }\n\n    /**\n     * The tint applied to the graphic shape. This is a hex value. A value of\n     * 0xFFFFFF will remove any tint effect.\n     *\n     * @member {number}\n     * @default 0xFFFFFF\n     */\n    get tint()\n    {\n        return this._tint;\n    }\n    set tint(value)\n    {\n        this._tint = value;\n    }\n\n    /**\n     * The current fill style.\n     *\n     * @member {PIXI.FillStyle}\n     * @readonly\n     */\n    get fill()\n    {\n        return this._fillStyle;\n    }\n\n    /**\n     * The current line style.\n     *\n     * @member {PIXI.LineStyle}\n     * @readonly\n     */\n    get line()\n    {\n        return this._lineStyle;\n    }\n\n    /**\n     * Specifies the line style used for subsequent calls to Graphics methods such as the lineTo()\n     * method or the drawCircle() method.\n     *\n     * @param {number} [width=0] - width of the line to draw, will update the objects stored style\n     * @param {number} [color=0] - color of the line to draw, will update the objects stored style\n     * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineStyle(width = 0, color = 0, alpha = 1, alignment = 0.5, native = false)\n    {\n        this.lineTextureStyle(width, Texture.WHITE, color, alpha, null, alignment, native);\n\n        return this;\n    }\n\n    /**\n     * Like line style but support texture for line fill.\n     *\n     * @param {number} [width=0] - width of the line to draw, will update the objects stored style\n     * @param {PIXI.Texture} [texture=PIXI.Texture.WHITE] - Texture to use\n     * @param {number} [color=0] - color of the line to draw, will update the objects stored style\n     * @param {number} [alpha=1] - alpha of the line to draw, will update the objects stored style\n     * @param {PIXI.Matrix} [matrix=null] Texture matrix to transform texture\n     * @param {number} [alignment=0.5] - alignment of the line to draw, (0 = inner, 0.5 = middle, 1 = outter)\n     * @param {boolean} [native=false] - If true the lines will be draw using LINES instead of TRIANGLE_STRIP\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineTextureStyle(width = 0, texture = Texture.WHITE, color = 0xFFFFFF, alpha = 1,\n        matrix = null, alignment = 0.5, native = false)\n    {\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = width > 0 && alpha > 0;\n\n        if (!visible)\n        {\n            this._lineStyle.reset();\n        }\n        else\n        {\n            if (matrix)\n            {\n                matrix = matrix.clone();\n                matrix.invert();\n            }\n\n            Object.assign(this._lineStyle, {\n                color,\n                width,\n                alpha,\n                matrix,\n                texture,\n                alignment,\n                native,\n                visible,\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Start a polygon object internally\n     * @protected\n     */\n    startPoly()\n    {\n        if (this.currentPath)\n        {\n            const points = this.currentPath.points;\n            const len = this.currentPath.points.length;\n\n            if (len > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = new Polygon();\n                this.currentPath.closeStroke = false;\n                this.currentPath.points.push(points[len - 2], points[len - 1]);\n            }\n        }\n        else\n        {\n            this.currentPath = new Polygon();\n            this.currentPath.closeStroke = false;\n        }\n    }\n\n    /**\n     * Finish the polygon object.\n     * @protected\n     */\n    finishPoly()\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length > 2)\n            {\n                this.drawShape(this.currentPath);\n                this.currentPath = null;\n            }\n            else\n            {\n                this.currentPath.points.length = 0;\n            }\n        }\n    }\n\n    /**\n     * Moves the current drawing position to x, y.\n     *\n     * @param {number} x - the X coordinate to move to\n     * @param {number} y - the Y coordinate to move to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    moveTo(x, y)\n    {\n        this.startPoly();\n        this.currentPath.points[0] = x;\n        this.currentPath.points[1] = y;\n\n        return this;\n    }\n\n    /**\n     * Draws a line using the current line style from the current drawing position to (x, y);\n     * The current drawing position is then set to (x, y).\n     *\n     * @param {number} x - the X coordinate to draw to\n     * @param {number} y - the Y coordinate to draw to\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    lineTo(x, y)\n    {\n        if (!this.currentPath)\n        {\n            this.moveTo(0, 0);\n        }\n\n        // remove duplicates..\n        const points = this.currentPath.points;\n        const fromX = points[points.length - 2];\n        const fromY = points[points.length - 1];\n\n        if (fromX !== x || fromY !== y)\n        {\n            points.push(x, y);\n        }\n\n        return this;\n    }\n\n    /**\n     * Initialize the curve\n     *\n     * @protected\n     * @param {number} [x=0]\n     * @param {number} [y=0]\n     */\n    _initCurve(x = 0, y = 0)\n    {\n        if (this.currentPath)\n        {\n            if (this.currentPath.points.length === 0)\n            {\n                this.currentPath.points = [x, y];\n            }\n        }\n        else\n        {\n            this.moveTo(x, y);\n        }\n    }\n\n    /**\n     * Calculate the points for a quadratic bezier curve and then draws it.\n     * Based on: https://stackoverflow.com/questions/785097/how-do-i-implement-a-bezier-curve-in-c\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    quadraticCurveTo(cpX, cpY, toX, toY)\n    {\n        this._initCurve();\n\n        const points = this.currentPath.points;\n\n        if (points.length === 0)\n        {\n            this.moveTo(0, 0);\n        }\n\n        QuadraticUtils.curveTo(cpX, cpY, toX, toY, points);\n\n        return this;\n    }\n\n    /**\n     * Calculate the points for a bezier curve and then draws it.\n     *\n     * @param {number} cpX - Control point x\n     * @param {number} cpY - Control point y\n     * @param {number} cpX2 - Second Control point x\n     * @param {number} cpY2 - Second Control point y\n     * @param {number} toX - Destination point x\n     * @param {number} toY - Destination point y\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    bezierCurveTo(cpX, cpY, cpX2, cpY2, toX, toY)\n    {\n        this._initCurve();\n\n        BezierUtils.curveTo(cpX, cpY, cpX2, cpY2, toX, toY, this.currentPath.points);\n\n        return this;\n    }\n\n    /**\n     * The arcTo() method creates an arc/curve between two tangents on the canvas.\n     *\n     * \"borrowed\" from https://code.google.com/p/fxcanvas/ - thanks google!\n     *\n     * @param {number} x1 - The x-coordinate of the first tangent point of the arc\n     * @param {number} y1 - The y-coordinate of the first tangent point of the arc\n     * @param {number} x2 - The x-coordinate of the end of the arc\n     * @param {number} y2 - The y-coordinate of the end of the arc\n     * @param {number} radius - The radius of the arc\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    arcTo(x1, y1, x2, y2, radius)\n    {\n        this._initCurve(x1, y1);\n\n        const points = this.currentPath.points;\n\n        const result = ArcUtils.curveTo(x1, y1, x2, y2, radius, points);\n\n        if (result)\n        {\n            const { cx, cy, radius, startAngle, endAngle, anticlockwise } = result;\n\n            this.arc(cx, cy, radius, startAngle, endAngle, anticlockwise);\n        }\n\n        return this;\n    }\n\n    /**\n     * The arc method creates an arc/curve (used to create circles, or parts of circles).\n     *\n     * @param {number} cx - The x-coordinate of the center of the circle\n     * @param {number} cy - The y-coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @param {number} startAngle - The starting angle, in radians (0 is at the 3 o'clock position\n     *  of the arc's circle)\n     * @param {number} endAngle - The ending angle, in radians\n     * @param {boolean} [anticlockwise=false] - Specifies whether the drawing should be\n     *  counter-clockwise or clockwise. False is default, and indicates clockwise, while true\n     *  indicates counter-clockwise.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    arc(cx, cy, radius, startAngle, endAngle, anticlockwise = false)\n    {\n        if (startAngle === endAngle)\n        {\n            return this;\n        }\n\n        if (!anticlockwise && endAngle <= startAngle)\n        {\n            endAngle += PI_2;\n        }\n        else if (anticlockwise && startAngle <= endAngle)\n        {\n            startAngle += PI_2;\n        }\n\n        const sweep = endAngle - startAngle;\n\n        if (sweep === 0)\n        {\n            return this;\n        }\n\n        const startX = cx + (Math.cos(startAngle) * radius);\n        const startY = cy + (Math.sin(startAngle) * radius);\n        const eps = this.geometry.closePointEps;\n\n        // If the currentPath exists, take its points. Otherwise call `moveTo` to start a path.\n        let points = this.currentPath ? this.currentPath.points : null;\n\n        if (points)\n        {\n            // TODO: make a better fix.\n\n            // We check how far our start is from the last existing point\n            const xDiff = Math.abs(points[points.length - 2] - startX);\n            const yDiff = Math.abs(points[points.length - 1] - startY);\n\n            if (xDiff < eps && yDiff < eps)\n            {\n                // If the point is very close, we don't add it, since this would lead to artifacts\n                // during tessellation due to floating point imprecision.\n            }\n            else\n            {\n                points.push(startX, startY);\n            }\n        }\n        else\n        {\n            this.moveTo(startX, startY);\n            points = this.currentPath.points;\n        }\n\n        ArcUtils.arc(startX, startY, cx, cy, radius, startAngle, endAngle, anticlockwise, points);\n\n        return this;\n    }\n\n    /**\n     * Specifies a simple one-color fill that subsequent calls to other Graphics methods\n     * (such as lineTo() or drawCircle()) use when drawing.\n     *\n     * @param {number} [color=0] - the color of the fill\n     * @param {number} [alpha=1] - the alpha of the fill\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginFill(color = 0, alpha = 1)\n    {\n        return this.beginTextureFill(Texture.WHITE, color, alpha);\n    }\n\n    /**\n     * Begin the texture fill\n     *\n     * @param {PIXI.Texture} [texture=PIXI.Texture.WHITE] - Texture to fill\n     * @param {number} [color=0xffffff] - Background to fill behind texture\n     * @param {number} [alpha=1] - Alpha of fill\n     * @param {PIXI.Matrix} [matrix=null] - Transform matrix\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    beginTextureFill(texture = Texture.WHITE, color = 0xFFFFFF, alpha = 1, matrix = null)\n    {\n        if (this.currentPath)\n        {\n            this.startPoly();\n        }\n\n        const visible = alpha > 0;\n\n        if (!visible)\n        {\n            this._fillStyle.reset();\n        }\n        else\n        {\n            if (matrix)\n            {\n                matrix = matrix.clone();\n                matrix.invert();\n            }\n\n            Object.assign(this._fillStyle, {\n                color,\n                alpha,\n                texture,\n                matrix,\n                visible,\n            });\n        }\n\n        return this;\n    }\n\n    /**\n     * Applies a fill to the lines and shapes that were added since the last call to the beginFill() method.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    endFill()\n    {\n        this.finishPoly();\n\n        this._fillStyle.reset();\n\n        return this;\n    }\n\n    /**\n     * Draws a rectangle shape.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawRect(x, y, width, height)\n    {\n        return this.drawShape(new Rectangle(x, y, width, height));\n    }\n\n    /**\n     * Draw a rectangle shape with rounded/beveled corners.\n     *\n     * @param {number} x - The X coord of the top-left of the rectangle\n     * @param {number} y - The Y coord of the top-left of the rectangle\n     * @param {number} width - The width of the rectangle\n     * @param {number} height - The height of the rectangle\n     * @param {number} radius - Radius of the rectangle corners\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawRoundedRect(x, y, width, height, radius)\n    {\n        return this.drawShape(new RoundedRectangle(x, y, width, height, radius));\n    }\n\n    /**\n     * Draws a circle.\n     *\n     * @param {number} x - The X coordinate of the center of the circle\n     * @param {number} y - The Y coordinate of the center of the circle\n     * @param {number} radius - The radius of the circle\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawCircle(x, y, radius)\n    {\n        return this.drawShape(new Circle(x, y, radius));\n    }\n\n    /**\n     * Draws an ellipse.\n     *\n     * @param {number} x - The X coordinate of the center of the ellipse\n     * @param {number} y - The Y coordinate of the center of the ellipse\n     * @param {number} width - The half width of the ellipse\n     * @param {number} height - The half height of the ellipse\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawEllipse(x, y, width, height)\n    {\n        return this.drawShape(new Ellipse(x, y, width, height));\n    }\n\n    /**\n     * Draws a polygon using the given path.\n     *\n     * @param {number[]|PIXI.Point[]|PIXI.Polygon} path - The path data used to construct the polygon.\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawPolygon(path)\n    {\n        // prevents an argument assignment deopt\n        // see section 3.1: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n        let points = path;\n\n        let closeStroke = true;// !!this._fillStyle;\n\n        // check if data has points..\n        if (points.points)\n        {\n            closeStroke = points.closeStroke;\n            points = points.points;\n        }\n\n        if (!Array.isArray(points))\n        {\n            // prevents an argument leak deopt\n            // see section 3.2: https://github.com/petkaantonov/bluebird/wiki/Optimization-killers#3-managing-arguments\n            points = new Array(arguments.length);\n\n            for (let i = 0; i < points.length; ++i)\n            {\n                points[i] = arguments[i]; // eslint-disable-line prefer-rest-params\n            }\n        }\n\n        const shape = new Polygon(points);\n\n        shape.closeStroke = closeStroke;\n\n        this.drawShape(shape);\n\n        return this;\n    }\n\n    /**\n     * Draw any shape.\n     *\n     * @param {PIXI.Circle|PIXI.Ellipse|PIXI.Polygon|PIXI.Rectangle|PIXI.RoundedRectangle} shape - Shape to draw\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawShape(shape)\n    {\n        if (!this._holeMode)\n        {\n            this.geometry.drawShape(\n                shape,\n                this._fillStyle.clone(),\n                this._lineStyle.clone(),\n                this._matrix\n            );\n        }\n        else\n        {\n            this.geometry.drawHole(shape, this._matrix);\n        }\n\n        return this;\n    }\n\n    /**\n     * Draw a star shape with an arbitrary number of points.\n     *\n     * @param {number} x - Center X position of the star\n     * @param {number} y - Center Y position of the star\n     * @param {number} points - The number of points of the star, must be > 1\n     * @param {number} radius - The outer radius of the star\n     * @param {number} [innerRadius] - The inner radius between points, default half `radius`\n     * @param {number} [rotation=0] - The rotation of the star in radians, where 0 is vertical\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    drawStar(x, y, points, radius, innerRadius, rotation = 0)\n    {\n        return this.drawPolygon(new Star(x, y, points, radius, innerRadius, rotation));\n    }\n\n    /**\n     * Clears the graphics that were drawn to this Graphics object, and resets fill and line style settings.\n     *\n     * @return {PIXI.Graphics} This Graphics object. Good for chaining method calls\n     */\n    clear()\n    {\n        this.geometry.clear();\n        this._lineStyle.reset();\n        this._fillStyle.reset();\n\n        this._matrix = null;\n        this._holeMode = false;\n        this.currentPath = null;\n\n        return this;\n    }\n\n    /**\n     * True if graphics consists of one rectangle, and thus, can be drawn like a Sprite and\n     * masked with gl.scissor.\n     *\n     * @returns {boolean} True if only 1 rect.\n     */\n    isFastRect()\n    {\n        // will fix this!\n        return false;\n        // this.graphicsData.length === 1\n        //  && this.graphicsData[0].shape.type === SHAPES.RECT\n        // && !this.graphicsData[0].lineWidth;\n    }\n\n    /**\n     * Renders the object using the WebGL renderer\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _render(renderer)\n    {\n        this.finishPoly();\n\n        const geometry = this.geometry;\n\n        // batch part..\n        // batch it!\n        geometry.updateBatches();\n\n        if (geometry.batchable)\n        {\n            if (this.batchDirty !== geometry.batchDirty)\n            {\n                this._populateBatches();\n            }\n\n            this._renderBatched(renderer);\n        }\n        else\n        {\n            // no batching...\n            renderer.batch.flush();\n\n            this._renderDirect(renderer);\n        }\n    }\n\n    /**\n     * Populating batches for rendering\n     *\n     * @protected\n     */\n    _populateBatches()\n    {\n        const geometry = this.geometry;\n        const blendMode = this.blendMode;\n\n        this.batches = [];\n        this.batchTint = -1;\n        this._transformID = -1;\n        this.batchDirty = geometry.batchDirty;\n\n        this.vertexData = new Float32Array(geometry.points);\n\n        for (let i = 0, l = geometry.batches.length; i < l; i++)\n        {\n            const gI = geometry.batches[i];\n            const color = gI.style.color;\n            const vertexData = new Float32Array(this.vertexData.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const uvs = new Float32Array(geometry.uvsFloat32.buffer,\n                gI.attribStart * 4 * 2,\n                gI.attribSize * 2);\n\n            const indices = new Uint16Array(geometry.indicesUint16.buffer,\n                gI.start * 2,\n                gI.size);\n\n            const batch = {\n                vertexData,\n                blendMode,\n                indices,\n                uvs,\n                _batchRGB: hex2rgb(color),\n                _tintRGB: color,\n                _texture: gI.style.texture,\n                alpha: gI.style.alpha,\n                worldAlpha: 1 };\n\n            this.batches[i] = batch;\n        }\n    }\n\n    /**\n     * Renders the batches using the BathedRenderer plugin\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _renderBatched(renderer)\n    {\n        if (!this.batches.length)\n        {\n            return;\n        }\n\n        renderer.batch.setObjectRenderer(renderer.plugins[this.pluginName]);\n\n        this.calculateVertices();\n        this.calculateTints();\n\n        for (let i = 0, l = this.batches.length; i < l; i++)\n        {\n            const batch = this.batches[i];\n\n            batch.worldAlpha = this.worldAlpha * batch.alpha;\n\n            renderer.plugins[this.pluginName].render(batch);\n        }\n    }\n\n    /**\n     * Renders the graphics direct\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _renderDirect(renderer)\n    {\n        const shader = this._resolveDirectShader(renderer);\n\n        const geometry = this.geometry;\n        const tint = this.tint;\n        const worldAlpha = this.worldAlpha;\n        const uniforms = shader.uniforms;\n        const drawCalls = geometry.drawCalls;\n\n        // lets set the transfomr\n        uniforms.translationMatrix = this.transform.worldTransform;\n\n        // and then lets set the tint..\n        uniforms.tint[0] = (((tint >> 16) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[1] = (((tint >> 8) & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[2] = ((tint & 0xFF) / 255) * worldAlpha;\n        uniforms.tint[3] = worldAlpha;\n\n        // the first draw call, we can set the uniforms of the shader directly here.\n\n        // this means that we can tack advantage of the sync function of pixi!\n        // bind and sync uniforms..\n        // there is a way to optimise this..\n        renderer.shader.bind(shader);\n        renderer.geometry.bind(geometry, shader);\n\n        // set state..\n        renderer.state.set(this.state);\n\n        // then render the rest of them...\n        for (let i = 0, l = drawCalls.length; i < l; i++)\n        {\n            this._renderDrawCallDirect(renderer, geometry.drawCalls[i]);\n        }\n    }\n\n    /**\n     * Renders specific DrawCall\n     *\n     * @param {PIXI.Renderer} renderer\n     * @param {PIXI.BatchDrawCall} drawCall\n     */\n    _renderDrawCallDirect(renderer, drawCall)\n    {\n        const groupTextureCount = drawCall.textureCount;\n\n        for (let j = 0; j < groupTextureCount; j++)\n        {\n            renderer.texture.bind(drawCall.textures[j], j);\n        }\n\n        renderer.geometry.draw(drawCall.type, drawCall.size, drawCall.start);\n    }\n\n    /**\n     * Resolves shader for direct rendering\n     *\n     * @protected\n     * @param {PIXI.Renderer} renderer - The renderer\n     */\n    _resolveDirectShader(renderer)\n    {\n        let shader = this.shader;\n\n        const pluginName = this.pluginName;\n\n        if (!shader)\n        {\n            // if there is no shader here, we can use the default shader.\n            // and that only gets created if we actually need it..\n            // but may be more than one plugins for graphics\n            if (!DEFAULT_SHADERS[pluginName])\n            {\n                const sampleValues = new Int32Array(16);\n\n                for (let i = 0; i < 16; i++)\n                {\n                    sampleValues[i] = i;\n                }\n\n                const uniforms = {\n                    tint: new Float32Array([1, 1, 1, 1]),\n                    translationMatrix: new Matrix(),\n                    default: UniformGroup.from({ uSamplers: sampleValues }, true),\n                };\n\n                const program = renderer.plugins[pluginName]._shader.program;\n\n                DEFAULT_SHADERS[pluginName] = new Shader(program, uniforms);\n            }\n\n            shader = DEFAULT_SHADERS[pluginName];\n        }\n\n        return shader;\n    }\n\n    /**\n     * Retrieves the bounds of the graphic shape as a rectangle object\n     *\n     * @protected\n     */\n    _calculateBounds()\n    {\n        this.finishPoly();\n        const lb = this.geometry.bounds;\n\n        this._bounds.addFrame(this.transform, lb.minX, lb.minY, lb.maxX, lb.maxY);\n    }\n\n    /**\n     * Tests if a point is inside this graphics object\n     *\n     * @param {PIXI.Point} point - the point to test\n     * @return {boolean} the result of the test\n     */\n    containsPoint(point)\n    {\n        this.worldTransform.applyInverse(point, Graphics._TEMP_POINT);\n\n        return this.geometry.containsPoint(Graphics._TEMP_POINT);\n    }\n\n    /**\n     * Recalcuate the tint by applying tin to batches using Graphics tint.\n     * @protected\n     */\n    calculateTints()\n    {\n        if (this.batchTint !== this.tint)\n        {\n            this.batchTint = this.tint;\n\n            const tintRGB = hex2rgb(this.tint, temp);\n\n            for (let i = 0; i < this.batches.length; i++)\n            {\n                const batch = this.batches[i];\n\n                const batchTint = batch._batchRGB;\n\n                const r = (tintRGB[0] * batchTint[0]) * 255;\n                const g = (tintRGB[1] * batchTint[1]) * 255;\n                const b = (tintRGB[2] * batchTint[2]) * 255;\n\n                // TODO Ivan, can this be done in one go?\n                const color = (r << 16) + (g << 8) + (b | 0);\n\n                batch._tintRGB = (color >> 16)\n                        + (color & 0xff00)\n                        + ((color & 0xff) << 16);\n            }\n        }\n    }\n\n    /**\n     * If there's a transform update or a change to the shape of the\n     * geometry, recaculate the vertices.\n     * @protected\n     */\n    calculateVertices()\n    {\n        if (this._transformID === this.transform._worldID)\n        {\n            return;\n        }\n\n        this._transformID = this.transform._worldID;\n\n        const wt = this.transform.worldTransform;\n        const a = wt.a;\n        const b = wt.b;\n        const c = wt.c;\n        const d = wt.d;\n        const tx = wt.tx;\n        const ty = wt.ty;\n\n        const data = this.geometry.points;// batch.vertexDataOriginal;\n        const vertexData = this.vertexData;\n\n        let count = 0;\n\n        for (let i = 0; i < data.length; i += 2)\n        {\n            const x = data[i];\n            const y = data[i + 1];\n\n            vertexData[count++] = (a * x) + (c * y) + tx;\n            vertexData[count++] = (d * y) + (b * x) + ty;\n        }\n    }\n\n    /**\n     * Closes the current path.\n     *\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    closePath()\n    {\n        const currentPath = this.currentPath;\n\n        if (currentPath)\n        {\n            // we don't need to add extra point in the end because buildLine will take care of that\n            currentPath.closeStroke = true;\n        }\n\n        return this;\n    }\n\n    /**\n     * Apply a matrix to the positional data.\n     *\n     * @param {PIXI.Matrix} matrix - Matrix to use for transform current shape.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    setMatrix(matrix)\n    {\n        this._matrix = matrix;\n\n        return this;\n    }\n\n    /**\n     * Begin adding holes to the last draw shape\n     * IMPORTANT: holes must be fully inside a shape to work\n     * Also weirdness ensues if holes overlap!\n     * Ellipses, Circles, Rectangles and Rounded Rectangles cannot be holes or host for holes in CanvasRenderer,\n     * please use `moveTo` `lineTo`, `quadraticCurveTo` if you rely on pixi-legacy bundle.\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    beginHole()\n    {\n        this.finishPoly();\n        this._holeMode = true;\n\n        return this;\n    }\n\n    /**\n     * End adding holes to the last draw shape\n     * @return {PIXI.Graphics} Returns itself.\n     */\n    endHole()\n    {\n        this.finishPoly();\n        this._holeMode = false;\n\n        return this;\n    }\n\n    /**\n     * Destroys the Graphics object.\n     *\n     * @param {object|boolean} [options] - Options parameter. A boolean will act as if all\n     *  options have been set to that value\n     * @param {boolean} [options.children=false] - if set to true, all the children will have\n     *  their destroy method called as well. 'options' will be passed on to those calls.\n     * @param {boolean} [options.texture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the texture of the child sprite\n     * @param {boolean} [options.baseTexture=false] - Only used for child Sprites if options.children is set to true\n     *  Should it destroy the base texture of the child sprite\n     */\n    destroy(options)\n    {\n        super.destroy(options);\n\n        this.geometry.refCount--;\n        if (this.geometry.refCount === 0)\n        {\n            this.geometry.dispose();\n        }\n\n        this._matrix = null;\n        this.currentPath = null;\n        this._lineStyle.destroy();\n        this._lineStyle = null;\n        this._fillStyle.destroy();\n        this._fillStyle = null;\n        this.geometry = null;\n        this.shader = null;\n        this.vertexData = null;\n        this.batches.length = 0;\n        this.batches = null;\n\n        super.destroy(options);\n    }\n}\n\n/**\n * Temporary point to use for containsPoint\n *\n * @static\n * @private\n * @member {PIXI.Point}\n */\nGraphics._TEMP_POINT = new Point();\n"],"names":["let","const","Texture","SHAPES","buildLine","Point","i","earcut","j","super","Bounds","data","style","index","WRAP_MODES","BaseTexture","BatchDrawCall","DRAW_MODES","premultiplyTint","BatchGeometry","PI_2","Polygon","State","BLEND_MODES","radius","Rectangle","RoundedRectangle","Circle","Ellipse","arguments","hex2rgb","Matrix","UniformGroup","Shader","Container"],"mappings":"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"}