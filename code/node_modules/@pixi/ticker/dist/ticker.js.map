{"version":3,"file":"ticker.js","sources":["../src/settings.js","../src/const.js","../src/TickerListener.js","../src/Ticker.js","../src/TickerPlugin.js"],"sourcesContent":["import { settings } from '@pixi/settings';\n\n/**\n * Target frames per millisecond.\n *\n * @static\n * @name TARGET_FPMS\n * @memberof PIXI.settings\n * @type {number}\n * @default 0.06\n */\nsettings.TARGET_FPMS = 0.06;\n\nexport { settings };\n","/**\n * Represents the update priorities used by internal PIXI classes when registered with\n * the {@link PIXI.Ticker} object. Higher priority items are updated first and lower\n * priority items, such as render, should go later.\n *\n * @static\n * @constant\n * @name UPDATE_PRIORITY\n * @memberof PIXI\n * @type {object}\n * @property {number} INTERACTION=50 Highest priority, used for {@link PIXI.interaction.InteractionManager}\n * @property {number} HIGH=25 High priority updating, {@link PIXI.VideoBaseTexture} and {@link PIXI.AnimatedSprite}\n * @property {number} NORMAL=0 Default priority for ticker events, see {@link PIXI.Ticker#add}.\n * @property {number} LOW=-25 Low priority used for {@link PIXI.Application} rendering.\n * @property {number} UTILITY=-50 Lowest priority used for {@link PIXI.prepare.BasePrepare} utility.\n */\nexport const UPDATE_PRIORITY = {\n    INTERACTION: 50,\n    HIGH: 25,\n    NORMAL: 0,\n    LOW: -25,\n    UTILITY: -50,\n};\n","/**\n * Internal class for handling the priority sorting of ticker handlers.\n *\n * @private\n * @class\n * @memberof PIXI\n */\nexport default class TickerListener\n{\n    /**\n     * Constructor\n     * @private\n     * @param {Function} fn - The listener function to be added for one update\n     * @param {*} [context=null] - The listener context\n     * @param {number} [priority=0] - The priority for emitting\n     * @param {boolean} [once=false] - If the handler should fire once\n     */\n    constructor(fn, context = null, priority = 0, once = false)\n    {\n        /**\n         * The handler function to execute.\n         * @private\n         * @member {Function}\n         */\n        this.fn = fn;\n\n        /**\n         * The calling to execute.\n         * @private\n         * @member {*}\n         */\n        this.context = context;\n\n        /**\n         * The current priority.\n         * @private\n         * @member {number}\n         */\n        this.priority = priority;\n\n        /**\n         * If this should only execute once.\n         * @private\n         * @member {boolean}\n         */\n        this.once = once;\n\n        /**\n         * The next item in chain.\n         * @private\n         * @member {TickerListener}\n         */\n        this.next = null;\n\n        /**\n         * The previous item in chain.\n         * @private\n         * @member {TickerListener}\n         */\n        this.previous = null;\n\n        /**\n         * `true` if this listener has been destroyed already.\n         * @member {boolean}\n         * @private\n         */\n        this._destroyed = false;\n    }\n\n    /**\n     * Simple compare function to figure out if a function and context match.\n     * @private\n     * @param {Function} fn - The listener function to be added for one update\n     * @param {Function} context - The listener context\n     * @return {boolean} `true` if the listener match the arguments\n     */\n    match(fn, context)\n    {\n        context = context || null;\n\n        return this.fn === fn && this.context === context;\n    }\n\n    /**\n     * Emit by calling the current function.\n     * @private\n     * @param {number} deltaTime - time since the last emit.\n     * @return {TickerListener} Next ticker\n     */\n    emit(deltaTime)\n    {\n        if (this.fn)\n        {\n            if (this.context)\n            {\n                this.fn.call(this.context, deltaTime);\n            }\n            else\n            {\n                this.fn(deltaTime);\n            }\n        }\n\n        const redirect = this.next;\n\n        if (this.once)\n        {\n            this.destroy(true);\n        }\n\n        // Soft-destroying should remove\n        // the next reference\n        if (this._destroyed)\n        {\n            this.next = null;\n        }\n\n        return redirect;\n    }\n\n    /**\n     * Connect to the list.\n     * @private\n     * @param {TickerListener} previous - Input node, previous listener\n     */\n    connect(previous)\n    {\n        this.previous = previous;\n        if (previous.next)\n        {\n            previous.next.previous = this;\n        }\n        this.next = previous.next;\n        previous.next = this;\n    }\n\n    /**\n     * Destroy and don't use after this.\n     * @private\n     * @param {boolean} [hard = false] `true` to remove the `next` reference, this\n     *        is considered a hard destroy. Soft destroy maintains the next reference.\n     * @return {TickerListener} The listener to redirect while emitting or removing.\n     */\n    destroy(hard = false)\n    {\n        this._destroyed = true;\n        this.fn = null;\n        this.context = null;\n\n        // Disconnect, hook up next and previous\n        if (this.previous)\n        {\n            this.previous.next = this.next;\n        }\n\n        if (this.next)\n        {\n            this.next.previous = this.previous;\n        }\n\n        // Redirect to the next item\n        const redirect = this.next;\n\n        // Remove references\n        this.next = hard ? null : redirect;\n        this.previous = null;\n\n        return redirect;\n    }\n}\n","import { settings } from './settings';\nimport { UPDATE_PRIORITY } from './const';\nimport TickerListener from './TickerListener';\n\n/**\n * A Ticker class that runs an update loop that other objects listen to.\n *\n * This class is composed around listeners meant for execution on the next requested animation frame.\n * Animation frames are requested only when necessary, e.g. When the ticker is started and the emitter has listeners.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Ticker\n{\n    constructor()\n    {\n        /**\n         * The first listener. All new listeners added are chained on this.\n         * @private\n         * @type {TickerListener}\n         */\n        this._head = new TickerListener(null, null, Infinity);\n\n        /**\n         * Internal current frame request ID\n         * @type {?number}\n         * @private\n         */\n        this._requestId = null;\n\n        /**\n         * Internal value managed by minFPS property setter and getter.\n         * This is the maximum allowed milliseconds between updates.\n         * @type {number}\n         * @private\n         */\n        this._maxElapsedMS = 100;\n\n        /**\n         * Internal value managed by maxFPS property setter and getter.\n         * This is the minimum allowed milliseconds between updates.\n         * @private\n         */\n        this._minElapsedMS = 0;\n\n        /**\n         * Whether or not this ticker should invoke the method\n         * {@link PIXI.Ticker#start} automatically\n         * when a listener is added.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.autoStart = false;\n\n        /**\n         * Scalar time value from last frame to this frame.\n         * This value is capped by setting {@link PIXI.Ticker#minFPS}\n         * and is scaled with {@link PIXI.Ticker#speed}.\n         * **Note:** The cap may be exceeded by scaling.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.deltaTime = 1;\n\n        /**\n         * Scaler time elapsed in milliseconds from last frame to this frame.\n         * This value is capped by setting {@link PIXI.Ticker#minFPS}\n         * and is scaled with {@link PIXI.Ticker#speed}.\n         * **Note:** The cap may be exceeded by scaling.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         * Defaults to target frame time\n         *\n         * @member {number}\n         * @default 16.66\n         */\n        this.deltaMS = 1 / settings.TARGET_FPMS;\n\n        /**\n         * Time elapsed in milliseconds from last frame to this frame.\n         * Opposed to what the scalar {@link PIXI.Ticker#deltaTime}\n         * is based, this value is neither capped nor scaled.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         * Defaults to target frame time\n         *\n         * @member {number}\n         * @default 16.66\n         */\n        this.elapsedMS = 1 / settings.TARGET_FPMS;\n\n        /**\n         * The last time {@link PIXI.Ticker#update} was invoked.\n         * This value is also reset internally outside of invoking\n         * update, but only when a new animation frame is requested.\n         * If the platform supports DOMHighResTimeStamp,\n         * this value will have a precision of 1 µs.\n         *\n         * @member {number}\n         * @default -1\n         */\n        this.lastTime = -1;\n\n        /**\n         * Factor of current {@link PIXI.Ticker#deltaTime}.\n         * @example\n         * // Scales ticker.deltaTime to what would be\n         * // the equivalent of approximately 120 FPS\n         * ticker.speed = 2;\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.speed = 1;\n\n        /**\n         * Whether or not this ticker has been started.\n         * `true` if {@link PIXI.Ticker#start} has been called.\n         * `false` if {@link PIXI.Ticker#stop} has been called.\n         * While `false`, this value may change to `true` in the\n         * event of {@link PIXI.Ticker#autoStart} being `true`\n         * and a listener is added.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.started = false;\n\n        /**\n         * If enabled, deleting is disabled.\n         * @member {boolean}\n         * @default false\n         * @private\n         */\n        this._protected = false;\n\n        /**\n         * The last time keyframe was executed.\n         * Maintains a relatively fixed interval with the previous value.\n         * @member {number}\n         * @default -1\n         * @private\n         */\n        this._lastFrame = -1;\n\n        /**\n         * Internal tick method bound to ticker instance.\n         * This is because in early 2015, Function.bind\n         * is still 60% slower in high performance scenarios.\n         * Also separating frame requests from update method\n         * so listeners may be called at any time and with\n         * any animation API, just invoke ticker.update(time).\n         *\n         * @private\n         * @param {number} time - Time since last tick.\n         */\n        this._tick = (time) =>\n        {\n            this._requestId = null;\n\n            if (this.started)\n            {\n                // Invoke listeners now\n                this.update(time);\n                // Listener side effects may have modified ticker state.\n                if (this.started && this._requestId === null && this._head.next)\n                {\n                    this._requestId = requestAnimationFrame(this._tick);\n                }\n            }\n        };\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If a frame has not already been requested, and if the internal\n     * emitter has listeners, a new frame is requested.\n     *\n     * @private\n     */\n    _requestIfNeeded()\n    {\n        if (this._requestId === null && this._head.next)\n        {\n            // ensure callbacks get correct delta\n            this.lastTime = performance.now();\n            this._lastFrame = this.lastTime;\n            this._requestId = requestAnimationFrame(this._tick);\n        }\n    }\n\n    /**\n     * Conditionally cancels a pending animation frame.\n     *\n     * @private\n     */\n    _cancelIfNeeded()\n    {\n        if (this._requestId !== null)\n        {\n            cancelAnimationFrame(this._requestId);\n            this._requestId = null;\n        }\n    }\n\n    /**\n     * Conditionally requests a new animation frame.\n     * If the ticker has been started it checks if a frame has not already\n     * been requested, and if the internal emitter has listeners. If these\n     * conditions are met, a new frame is requested. If the ticker has not\n     * been started, but autoStart is `true`, then the ticker starts now,\n     * and continues with the previous conditions to request a new frame.\n     *\n     * @private\n     */\n    _startIfPossible()\n    {\n        if (this.started)\n        {\n            this._requestIfNeeded();\n        }\n        else if (this.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Register a handler for tick events. Calls continuously unless\n     * it is removed or the ticker is stopped.\n     *\n     * @param {Function} fn - The listener function to be added for updates\n     * @param {*} [context] - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns {PIXI.Ticker} This instance of a ticker\n     */\n    add(fn, context, priority = UPDATE_PRIORITY.NORMAL)\n    {\n        return this._addListener(new TickerListener(fn, context, priority));\n    }\n\n    /**\n     * Add a handler for the tick event which is only execute once.\n     *\n     * @param {Function} fn - The listener function to be added for one update\n     * @param {*} [context] - The listener context\n     * @param {number} [priority=PIXI.UPDATE_PRIORITY.NORMAL] - The priority for emitting\n     * @returns {PIXI.Ticker} This instance of a ticker\n     */\n    addOnce(fn, context, priority = UPDATE_PRIORITY.NORMAL)\n    {\n        return this._addListener(new TickerListener(fn, context, priority, true));\n    }\n\n    /**\n     * Internally adds the event handler so that it can be sorted by priority.\n     * Priority allows certain handler (user, AnimatedSprite, Interaction) to be run\n     * before the rendering.\n     *\n     * @private\n     * @param {TickerListener} listener - Current listener being added.\n     * @returns {PIXI.Ticker} This instance of a ticker\n     */\n    _addListener(listener)\n    {\n        // For attaching to head\n        let current = this._head.next;\n        let previous = this._head;\n\n        // Add the first item\n        if (!current)\n        {\n            listener.connect(previous);\n        }\n        else\n        {\n            // Go from highest to lowest priority\n            while (current)\n            {\n                if (listener.priority > current.priority)\n                {\n                    listener.connect(previous);\n                    break;\n                }\n                previous = current;\n                current = current.next;\n            }\n\n            // Not yet connected\n            if (!listener.previous)\n            {\n                listener.connect(previous);\n            }\n        }\n\n        this._startIfPossible();\n\n        return this;\n    }\n\n    /**\n     * Removes any handlers matching the function and context parameters.\n     * If no handlers are left after removing, then it cancels the animation frame.\n     *\n     * @param {Function} fn - The listener function to be removed\n     * @param {*} [context] - The listener context to be removed\n     * @returns {PIXI.Ticker} This instance of a ticker\n     */\n    remove(fn, context)\n    {\n        let listener = this._head.next;\n\n        while (listener)\n        {\n            // We found a match, lets remove it\n            // no break to delete all possible matches\n            // incase a listener was added 2+ times\n            if (listener.match(fn, context))\n            {\n                listener = listener.destroy();\n            }\n            else\n            {\n                listener = listener.next;\n            }\n        }\n\n        if (!this._head.next)\n        {\n            this._cancelIfNeeded();\n        }\n\n        return this;\n    }\n\n    /**\n     * Starts the ticker. If the ticker has listeners\n     * a new animation frame is requested at this point.\n     */\n    start()\n    {\n        if (!this.started)\n        {\n            this.started = true;\n            this._requestIfNeeded();\n        }\n    }\n\n    /**\n     * Stops the ticker. If the ticker has requested\n     * an animation frame it is canceled at this point.\n     */\n    stop()\n    {\n        if (this.started)\n        {\n            this.started = false;\n            this._cancelIfNeeded();\n        }\n    }\n\n    /**\n     * Destroy the ticker and don't use after this. Calling\n     * this method removes all references to internal events.\n     */\n    destroy()\n    {\n        if (!this._protected)\n        {\n            this.stop();\n\n            let listener = this._head.next;\n\n            while (listener)\n            {\n                listener = listener.destroy(true);\n            }\n\n            this._head.destroy();\n            this._head = null;\n        }\n    }\n\n    /**\n     * Triggers an update. An update entails setting the\n     * current {@link PIXI.Ticker#elapsedMS},\n     * the current {@link PIXI.Ticker#deltaTime},\n     * invoking all listeners with current deltaTime,\n     * and then finally setting {@link PIXI.Ticker#lastTime}\n     * with the value of currentTime that was provided.\n     * This method will be called automatically by animation\n     * frame callbacks if the ticker instance has been started\n     * and listeners are added.\n     *\n     * @param {number} [currentTime=performance.now()] - the current time of execution\n     */\n    update(currentTime = performance.now())\n    {\n        let elapsedMS;\n\n        // If the difference in time is zero or negative, we ignore most of the work done here.\n        // If there is no valid difference, then should be no reason to let anyone know about it.\n        // A zero delta, is exactly that, nothing should update.\n        //\n        // The difference in time can be negative, and no this does not mean time traveling.\n        // This can be the result of a race condition between when an animation frame is requested\n        // on the current JavaScript engine event loop, and when the ticker's start method is invoked\n        // (which invokes the internal _requestIfNeeded method). If a frame is requested before\n        // _requestIfNeeded is invoked, then the callback for the animation frame the ticker requests,\n        // can receive a time argument that can be less than the lastTime value that was set within\n        // _requestIfNeeded. This difference is in microseconds, but this is enough to cause problems.\n        //\n        // This check covers this browser engine timing issue, as well as if consumers pass an invalid\n        // currentTime value. This may happen if consumers opt-out of the autoStart, and update themselves.\n\n        if (currentTime > this.lastTime)\n        {\n            // Save uncapped elapsedMS for measurement\n            elapsedMS = this.elapsedMS = currentTime - this.lastTime;\n\n            // cap the milliseconds elapsed used for deltaTime\n            if (elapsedMS > this._maxElapsedMS)\n            {\n                elapsedMS = this._maxElapsedMS;\n            }\n\n            elapsedMS *= this.speed;\n\n            // If not enough time has passed, exit the function.\n            // Get ready for next frame by setting _lastFrame, but based on _minElapsedMS\n            // adjustment to ensure a relatively stable interval.\n            if (this._minElapsedMS)\n            {\n                const delta = currentTime - this._lastFrame | 0;\n\n                if (delta < this._minElapsedMS)\n                {\n                    return;\n                }\n\n                this._lastFrame = currentTime - (delta % this._minElapsedMS);\n            }\n\n            this.deltaMS = elapsedMS;\n            this.deltaTime = this.deltaMS * settings.TARGET_FPMS;\n\n            // Cache a local reference, in-case ticker is destroyed\n            // during the emit, we can still check for head.next\n            const head = this._head;\n\n            // Invoke listeners added to internal emitter\n            let listener = head.next;\n\n            while (listener)\n            {\n                listener = listener.emit(this.deltaTime);\n            }\n\n            if (!head.next)\n            {\n                this._cancelIfNeeded();\n            }\n        }\n        else\n        {\n            this.deltaTime = this.deltaMS = this.elapsedMS = 0;\n        }\n\n        this.lastTime = currentTime;\n    }\n\n    /**\n     * The frames per second at which this ticker is running.\n     * The default is approximately 60 in most modern browsers.\n     * **Note:** This does not factor in the value of\n     * {@link PIXI.Ticker#speed}, which is specific\n     * to scaling {@link PIXI.Ticker#deltaTime}.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get FPS()\n    {\n        return 1000 / this.elapsedMS;\n    }\n\n    /**\n     * Manages the maximum amount of milliseconds allowed to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This value is used to cap {@link PIXI.Ticker#deltaTime},\n     * but does not effect the measured value of {@link PIXI.Ticker#FPS}.\n     * When setting this property it is clamped to a value between\n     * `0` and `PIXI.settings.TARGET_FPMS * 1000`.\n     *\n     * @member {number}\n     * @default 10\n     */\n    get minFPS()\n    {\n        return 1000 / this._maxElapsedMS;\n    }\n\n    set minFPS(fps) // eslint-disable-line require-jsdoc\n    {\n        // Minimum must be below the maxFPS\n        const minFPS = Math.min(this.maxFPS, fps);\n\n        // Must be at least 0, but below 1 / settings.TARGET_FPMS\n        const minFPMS = Math.min(Math.max(0, minFPS) / 1000, settings.TARGET_FPMS);\n\n        this._maxElapsedMS = 1 / minFPMS;\n    }\n\n    /**\n     * Manages the minimum amount of milliseconds required to\n     * elapse between invoking {@link PIXI.Ticker#update}.\n     * This will effect the measured value of {@link PIXI.Ticker#FPS}.\n     * If it is set to `0`, then there is no limit; PixiJS will render as many frames as it can.\n     * Otherwise it will be at least `minFPS`\n     *\n     * @member {number}\n     * @default 0\n     */\n    get maxFPS()\n    {\n        if (this._minElapsedMS)\n        {\n            return Math.round(1000 / this._minElapsedMS);\n        }\n\n        return 0;\n    }\n\n    set maxFPS(fps)\n    {\n        if (fps === 0)\n        {\n            this._minElapsedMS = 0;\n        }\n        else\n        {\n            // Max must be at least the minFPS\n            const maxFPS = Math.max(this.minFPS, fps);\n\n            this._minElapsedMS = 1 / (maxFPS / 1000);\n        }\n    }\n\n    /**\n     * The shared ticker instance used by {@link PIXI.AnimatedSprite} and by\n     * {@link PIXI.VideoResource} to update animation frames / video textures.\n     *\n     * It may also be used by {@link PIXI.Application} if created with the `sharedTicker` option property set to true.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     * Please follow the examples for usage, including how to opt-out of auto-starting the shared ticker.\n     *\n     * @example\n     * let ticker = PIXI.Ticker.shared;\n     * // Set this to prevent starting this ticker when listeners are added.\n     * // By default this is true only for the PIXI.Ticker.shared instance.\n     * ticker.autoStart = false;\n     * // FYI, call this to ensure the ticker is stopped. It should be stopped\n     * // if you have not attempted to render anything yet.\n     * ticker.stop();\n     * // Call this when you are ready for a running shared ticker.\n     * ticker.start();\n     *\n     * @example\n     * // You may use the shared ticker to render...\n     * let renderer = PIXI.autoDetectRenderer();\n     * let stage = new PIXI.Container();\n     * document.body.appendChild(renderer.view);\n     * ticker.add(function (time) {\n     *     renderer.render(stage);\n     * });\n     *\n     * @example\n     * // Or you can just update it manually.\n     * ticker.autoStart = false;\n     * ticker.stop();\n     * function animate(time) {\n     *     ticker.update(time);\n     *     renderer.render(stage);\n     *     requestAnimationFrame(animate);\n     * }\n     * animate(performance.now());\n     *\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get shared()\n    {\n        if (!Ticker._shared)\n        {\n            const shared = Ticker._shared = new Ticker();\n\n            shared.autoStart = true;\n            shared._protected = true;\n        }\n\n        return Ticker._shared;\n    }\n\n    /**\n     * The system ticker instance used by {@link PIXI.interaction.InteractionManager} and by\n     * {@link PIXI.BasePrepare} for core timing functionality that shouldn't usually need to be paused,\n     * unlike the `shared` ticker which drives visual animations and rendering which may want to be paused.\n     *\n     * The property {@link PIXI.Ticker#autoStart} is set to `true` for this instance.\n     *\n     * @member {PIXI.Ticker}\n     * @static\n     */\n    static get system()\n    {\n        if (!Ticker._system)\n        {\n            const system = Ticker._system = new Ticker();\n\n            system.autoStart = true;\n            system._protected = true;\n        }\n\n        return Ticker._system;\n    }\n}\n","import Ticker from './Ticker';\nimport { UPDATE_PRIORITY } from './const';\n\n/**\n * Middleware for for Application Ticker.\n *\n * @example\n * import {TickerPlugin} from '@pixi/ticker';\n * import {Application} from '@pixi/app';\n * Application.registerPlugin(TickerPlugin);\n *\n * @class\n * @memberof PIXI\n */\nexport default class TickerPlugin\n{\n    /**\n     * Initialize the plugin with scope of application instance\n     *\n     * @static\n     * @private\n     * @param {object} [options] - See application options\n     */\n    static init(options)\n    {\n        // Set default\n        options = Object.assign({\n            autoStart: true,\n            sharedTicker: false,\n        }, options);\n\n        // Create ticker setter\n        Object.defineProperty(this, 'ticker',\n            {\n                set(ticker)\n                {\n                    if (this._ticker)\n                    {\n                        this._ticker.remove(this.render, this);\n                    }\n                    this._ticker = ticker;\n                    if (ticker)\n                    {\n                        ticker.add(this.render, this, UPDATE_PRIORITY.LOW);\n                    }\n                },\n                get()\n                {\n                    return this._ticker;\n                },\n            });\n\n        /**\n         * Convenience method for stopping the render.\n         *\n         * @method PIXI.Application#stop\n         */\n        this.stop = () =>\n        {\n            this._ticker.stop();\n        };\n\n        /**\n         * Convenience method for starting the render.\n         *\n         * @method PIXI.Application#start\n         */\n        this.start = () =>\n        {\n            this._ticker.start();\n        };\n\n        /**\n         * Internal reference to the ticker.\n         *\n         * @type {PIXI.Ticker}\n         * @name _ticker\n         * @memberof PIXI.Application#\n         * @private\n         */\n        this._ticker = null;\n\n        /**\n         * Ticker for doing render updates.\n         *\n         * @type {PIXI.Ticker}\n         * @name ticker\n         * @memberof PIXI.Application#\n         * @default PIXI.Ticker.shared\n         */\n        this.ticker = options.sharedTicker ? Ticker.shared : new Ticker();\n\n        // Start the rendering\n        if (options.autoStart)\n        {\n            this.start();\n        }\n    }\n\n    /**\n     * Clean up the ticker, scoped to application.\n     *\n     * @static\n     * @private\n     */\n    static destroy()\n    {\n        if (this._ticker)\n        {\n            const oldTicker = this._ticker;\n\n            this.ticker = null;\n            oldTicker.destroy();\n        }\n    }\n}\n"],"names":["settings","const","this","let"],"mappings":"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"}