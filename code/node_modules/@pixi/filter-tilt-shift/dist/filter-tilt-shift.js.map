{"version":3,"file":"filter-tilt-shift.js","sources":["../src/TiltShiftAxisFilter.js","../src/TiltShiftXFilter.js","../src/TiltShiftYFilter.js","../src/TiltShiftFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './tilt-shift.frag';\nimport {Filter} from '@pixi/core';\nimport {Point} from '@pixi/math';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftAxisFilter.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @private\n */\nclass TiltShiftAxisFilter extends Filter {\n\n    constructor(blur = 100, gradientBlur = 600, start = null, end = null){\n        super(vertex, fragment);\n        this.uniforms.blur = blur;\n        this.uniforms.gradientBlur = gradientBlur;\n        this.uniforms.start = start || new Point(0, window.innerHeight / 2);\n        this.uniforms.end = end || new Point(600, window.innerHeight / 2);\n        this.uniforms.delta = new Point(30, 30);\n        this.uniforms.texSize = new Point(window.innerWidth, window.innerHeight);\n        this.updateDelta();\n    }\n\n    /**\n     * Updates the filter delta values.\n     * This is overridden in the X and Y filters, does nothing for this class.\n     *\n     */\n    updateDelta() {\n        this.uniforms.delta.x = 0;\n        this.uniforms.delta.y = 0;\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get blur() {\n        return this.uniforms.blur;\n    }\n    set blur(value) {\n        this.uniforms.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get gradientBlur() {\n        return this.uniforms.gradientBlur;\n    }\n    set gradientBlur(value) {\n        this.uniforms.gradientBlur = value;\n    }\n\n    /**\n     * The X value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get start() {\n        return this.uniforms.start;\n    }\n    set start(value) {\n        this.uniforms.start = value;\n        this.updateDelta();\n    }\n\n    /**\n     * The X value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     * @memberof PIXI.filters.TiltShiftAxisFilter#\n     */\n    get end() {\n        return this.uniforms.end;\n    }\n    set end(value) {\n        this.uniforms.end = value;\n        this.updateDelta();\n    }\n}\n\nexport { TiltShiftAxisFilter };\n","import {TiltShiftAxisFilter} from './TiltShiftAxisFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftXFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nclass TiltShiftXFilter extends TiltShiftAxisFilter {\n    /**\n     * Updates the filter delta values.\n     */\n    updateDelta() {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = dx / d;\n        this.uniforms.delta.y = dy / d;\n    }\n}\n\nexport { TiltShiftXFilter };\n","import {TiltShiftAxisFilter} from './TiltShiftAxisFilter';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShiftYFilter.\n *\n * @class\n * @extends PIXI.TiltShiftAxisFilter\n * @memberof PIXI.filters\n * @private\n */\nclass TiltShiftYFilter extends TiltShiftAxisFilter {\n    /**\n     * Updates the filter delta values.\n     */\n    updateDelta() {\n        const dx = this.uniforms.end.x - this.uniforms.start.x;\n        const dy = this.uniforms.end.y - this.uniforms.start.y;\n        const d = Math.sqrt(dx * dx + dy * dy);\n        this.uniforms.delta.x = -dy / d;\n        this.uniforms.delta.y = dx / d;\n    }\n}\n\nexport { TiltShiftYFilter };\n","import {TiltShiftXFilter} from './TiltShiftXFilter';\nimport {TiltShiftYFilter} from './TiltShiftYFilter';\nimport {Filter} from '@pixi/core';\n\n/**\n * @author Vico @vicocotea\n * original filter https://github.com/evanw/glfx.js/blob/master/src/filters/blur/tiltshift.js by Evan Wallace : http://madebyevan.com/\n */\n\n/**\n * A TiltShift Filter. Manages the pass of both a TiltShiftXFilter and TiltShiftYFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/tilt-shift.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-tilt-shift|@pixi/filter-tilt-shift}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number} [blur=100] The strength of the blur.\n * @param {number} [gradientBlur=600] The strength of the gradient blur.\n * @param {PIXI.Point} [start=null] The Y value to start the effect at.\n * @param {PIXI.Point} [end=null] The Y value to end the effect at.\n */\nclass TiltShiftFilter extends Filter {\n\n    constructor(blur = 100, gradientBlur = 600, start = null, end = null) {\n        super();\n        this.tiltShiftXFilter = new TiltShiftXFilter(blur, gradientBlur, start, end);\n        this.tiltShiftYFilter = new TiltShiftYFilter(blur, gradientBlur, start, end);\n    }\n\n    apply(filterManager, input, output) {\n        let renderTarget = filterManager.getFilterTexture();\n        this.tiltShiftXFilter.apply(filterManager, input, renderTarget);\n        this.tiltShiftYFilter.apply(filterManager, renderTarget, output);\n        filterManager.returnFilterTexture(renderTarget);\n    }\n\n    /**\n     * The strength of the blur.\n     *\n     * @member {number}\n     */\n    get blur() {\n        return this.tiltShiftXFilter.blur;\n    }\n    set blur(value) {\n        this.tiltShiftXFilter.blur = this.tiltShiftYFilter.blur = value;\n    }\n\n    /**\n     * The strength of the gradient blur.\n     *\n     * @member {number}\n     */\n    get gradientBlur() {\n        return this.tiltShiftXFilter.gradientBlur;\n    }\n    set gradientBlur(value) {\n        this.tiltShiftXFilter.gradientBlur = this.tiltShiftYFilter.gradientBlur = value;\n    }\n\n    /**\n     * The Y value to start the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get start() {\n        return this.tiltShiftXFilter.start;\n    }\n    set start(value) {\n        this.tiltShiftXFilter.start = this.tiltShiftYFilter.start = value;\n    }\n\n    /**\n     * The Y value to end the effect at.\n     *\n     * @member {PIXI.Point}\n     */\n    get end() {\n        return this.tiltShiftXFilter.end;\n    }\n    set end(value) {\n        this.tiltShiftXFilter.end = this.tiltShiftYFilter.end = value;\n    }\n}\n\nexport { TiltShiftFilter };\n\n"],"names":["TiltShiftAxisFilter","blur","gradientBlur","start","end","super","vertex","fragment","this","uniforms","Point","window","innerHeight","delta","texSize","innerWidth","updateDelta","x","y","prototypeAccessors","value","Filter","TiltShiftXFilter","const","dx","dy","d","Math","sqrt","TiltShiftYFilter","TiltShiftFilter","tiltShiftXFilter","tiltShiftYFilter","apply","filterManager","input","output","let","renderTarget","getFilterTexture","returnFilterTexture"],"mappings":";;;;;;;04CAkBMA,cAEF,WAAYC,EAAYC,EAAoBC,EAAcC,kBAAvC,oBAAoB,oBAAa,qBAAY,MAC5DC,YAAMC,EAAQC,GACdC,KAAKC,SAASR,KAAOA,EACrBO,KAAKC,SAASP,aAAeA,EAC7BM,KAAKC,SAASN,MAAQA,GAAS,IAAIO,QAAM,EAAGC,OAAOC,YAAc,GACjEJ,KAAKC,SAASL,IAAMA,GAAO,IAAIM,QAAM,IAAKC,OAAOC,YAAc,GAC/DJ,KAAKC,SAASI,MAAQ,IAAIH,QAAM,GAAI,IACpCF,KAAKC,SAASK,QAAU,IAAIJ,QAAMC,OAAOI,WAAYJ,OAAOC,aAC5DJ,KAAKQ,oOAQTA,uBACIR,KAAKC,SAASI,MAAMI,EAAI,EACxBT,KAAKC,SAASI,MAAMK,EAAI,GAS5BC,EAAIlB,oBACA,OAAOO,KAAKC,SAASR,MAEzBkB,EAAIlB,kBAAKmB,GACLZ,KAAKC,SAASR,KAAOmB,GASzBD,EAAIjB,4BACA,OAAOM,KAAKC,SAASP,cAEzBiB,EAAIjB,0BAAakB,GACbZ,KAAKC,SAASP,aAAekB,GASjCD,EAAIhB,qBACA,OAAOK,KAAKC,SAASN,OAEzBgB,EAAIhB,mBAAMiB,GACNZ,KAAKC,SAASN,MAAQiB,EACtBZ,KAAKQ,eASTG,EAAIf,mBACA,OAAOI,KAAKC,SAASL,KAEzBe,EAAIf,iBAAIgB,GACJZ,KAAKC,SAASL,IAAMgB,EACpBZ,KAAKQ,yDA1EqBK,UCH5BC,6JAIFN,uBACIO,IAAMC,EAAKhB,KAAKC,SAASL,IAAIa,EAAIT,KAAKC,SAASN,MAAMc,EAC/CQ,EAAKjB,KAAKC,SAASL,IAAIc,EAAIV,KAAKC,SAASN,MAAMe,EAC/CQ,EAAIC,KAAKC,KAAKJ,EAAKA,EAAKC,EAAKA,GACnCjB,KAAKC,SAASI,MAAMI,EAAIO,EAAKE,EAC7BlB,KAAKC,SAASI,MAAMK,EAAIO,EAAKC,MATN1B,GCAzB6B,6JAIFb,uBACIO,IAAMC,EAAKhB,KAAKC,SAASL,IAAIa,EAAIT,KAAKC,SAASN,MAAMc,EAC/CQ,EAAKjB,KAAKC,SAASL,IAAIc,EAAIV,KAAKC,SAASN,MAAMe,EAC/CQ,EAAIC,KAAKC,KAAKJ,EAAKA,EAAKC,EAAKA,GACnCjB,KAAKC,SAASI,MAAMI,GAAKQ,EAAKC,EAC9BlB,KAAKC,SAASI,MAAMK,EAAIM,EAAKE,MATN1B,GCQzB8B,cAEF,WAAY7B,EAAYC,EAAoBC,EAAcC,kBAAvC,oBAAoB,oBAAa,qBAAY,MAC5DC,aACAG,KAAKuB,iBAAmB,IAAIT,EAAiBrB,EAAMC,EAAcC,EAAOC,GACxEI,KAAKwB,iBAAmB,IAAIH,EAAiB5B,EAAMC,EAAcC,EAAOC,yNAG5E6B,eAAMC,EAAeC,EAAOC,GACxBC,IAAIC,EAAeJ,EAAcK,mBACjC/B,KAAKuB,iBAAiBE,MAAMC,EAAeC,EAAOG,GAClD9B,KAAKwB,iBAAiBC,MAAMC,EAAeI,EAAcF,GACzDF,EAAcM,oBAAoBF,IAQtCnB,EAAIlB,oBACA,OAAOO,KAAKuB,iBAAiB9B,MAEjCkB,EAAIlB,kBAAKmB,GACLZ,KAAKuB,iBAAiB9B,KAAOO,KAAKwB,iBAAiB/B,KAAOmB,GAQ9DD,EAAIjB,4BACA,OAAOM,KAAKuB,iBAAiB7B,cAEjCiB,EAAIjB,0BAAakB,GACbZ,KAAKuB,iBAAiB7B,aAAeM,KAAKwB,iBAAiB9B,aAAekB,GAQ9ED,EAAIhB,qBACA,OAAOK,KAAKuB,iBAAiB5B,OAEjCgB,EAAIhB,mBAAMiB,GACNZ,KAAKuB,iBAAiB5B,MAAQK,KAAKwB,iBAAiB7B,MAAQiB,GAQhED,EAAIf,mBACA,OAAOI,KAAKuB,iBAAiB3B,KAEjCe,EAAIf,iBAAIgB,GACJZ,KAAKuB,iBAAiB3B,IAAMI,KAAKwB,iBAAiB5B,IAAMgB,6CA5DlCC"}