{"version":3,"file":"filter-advanced-bloom.cjs.js","sources":["../src/ExtractBrightnessFilter.js","../src/AdvancedBloomFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './extract-brightness.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * Internal filter for AdvancedBloomFilter to get brightness.\n * @class\n * @private\n * @param {number} [threshold=0.5] Defines how bright a color needs to be extracted.\n */\nexport class ExtractBrightnessFilter extends Filter {\n\n    constructor(threshold = 0.5) {\n        super(vertex, fragment);\n\n        this.threshold = threshold;\n    }\n\n    /**\n     * Defines how bright a color needs to be extracted.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get threshold() {\n        return this.uniforms.threshold;\n    }\n    set threshold(value) {\n        this.uniforms.threshold = value;\n    }\n}\n\n","import {ExtractBrightnessFilter} from './ExtractBrightnessFilter';\nimport {KawaseBlurFilter} from '@pixi/filter-kawase-blur';\nimport {vertex} from '@tools/fragments';\nimport fragment from './advanced-bloom.frag';\nimport {Filter} from '@pixi/core';\nimport {settings} from '@pixi/settings';\n\n/**\n * The AdvancedBloomFilter applies a Bloom Effect to an object. Unlike the normal BloomFilter\n * this had some advanced controls for adjusting the look of the bloom. Note: this filter\n * is slower than normal BloomFilter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/advanced-bloom.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-advanced-bloom|@pixi/filter-advanced-bloom}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object|number} [options] - The optional parameters of advanced bloom filter.\n *                        When options is a number , it will be `options.threshold`.\n * @param {number} [options.threshold=0.5] - Defines how bright a color needs to be to affect bloom.\n * @param {number} [options.bloomScale=1.0] - To adjust the strength of the bloom. Higher values is more intense brightness.\n * @param {number} [options.brightness=1.0] - The brightness, lower value is more subtle brightness, higher value is blown-out.\n * @param {number} [options.blur=8] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=4] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nclass AdvancedBloomFilter extends Filter {\n\n    constructor(options) {\n\n        super(vertex, fragment);\n\n        if (typeof options === 'number') {\n            options = { threshold: options };\n        }\n\n        options = Object.assign({\n            threshold: 0.5,\n            bloomScale: 1.0,\n            brightness: 1.0,\n            kernels: null,\n            blur: 8,\n            quality: 4,\n            pixelSize: 1,\n            resolution: settings.RESOLUTION,\n        }, options);\n\n        /**\n         * To adjust the strength of the bloom. Higher values is more intense brightness.\n         *\n         * @member {number}\n         * @default 1.0\n         */\n        this.bloomScale = options.bloomScale;\n\n        /**\n         * The brightness, lower value is more subtle brightness, higher value is blown-out.\n         *\n         * @member {number}\n         * @default 1.0\n         */\n        this.brightness = options.brightness;\n\n        const { kernels, blur, quality, pixelSize, resolution } = options;\n\n        this._extractFilter = new ExtractBrightnessFilter(options.threshold);\n        this._extractFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear, currentState) {\n\n        const brightTarget = filterManager.getFilterTexture();\n\n        this._extractFilter.apply(filterManager, input, brightTarget, true, currentState);\n\n        const bloomTarget = filterManager.getFilterTexture();\n\n        this._blurFilter.apply(filterManager, brightTarget, bloomTarget, true, currentState);\n\n        this.uniforms.bloomScale = this.bloomScale;\n        this.uniforms.brightness = this.brightness;\n        this.uniforms.bloomTexture = bloomTarget;\n\n        filterManager.applyFilter(this, input, output, clear);\n\n        filterManager.returnFilterTexture(bloomTarget);\n        filterManager.returnFilterTexture(brightTarget);\n    }\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     */\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(value) {\n        this._resolution = value;\n\n        if (this._extractFilter) {\n            this._extractFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Defines how bright a color needs to be to affect bloom.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    get threshold() {\n        return this._extractFilter.threshold;\n    }\n    set threshold(value) {\n        this._extractFilter.threshold = value;\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get kernels() {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value) {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * Sets the strength of the Blur properties simultaneously\n     *\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this._blurFilter.blur;\n    }\n    set blur(value) {\n        this._blurFilter.blur = value;\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality() {\n        return this._blurFilter.quality;\n    }\n    set quality(value) {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize() {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value) {\n        this._blurFilter.pixelSize = value;\n    }\n}\n\nexport { AdvancedBloomFilter };\n"],"names":["super","Filter","fragment","settings","KawaseBlurFilter","const"],"mappings":"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"}