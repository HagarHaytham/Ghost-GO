{"version":3,"file":"filter-motion-blur.js","sources":["../src/MotionBlurFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './motion-blur.frag';\nimport {Filter} from '@pixi/core';\nimport {ObservablePoint, Point} from '@pixi/math';\n\n/**\n * The MotionBlurFilter applies a Motion blur to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/motion-blur.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-motion-blur|@pixi/filter-motion-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {PIXI.ObservablePoint|PIXI.Point|number[]} [velocity=[0, 0]] Sets the velocity of the motion for blur effect.\n * @param {number} [kernelSize=5] - The kernelSize of the blur filter. Must be odd number >= 5\n * @param {number} [offset=0] - The offset of the blur filter.\n */\nclass MotionBlurFilter extends Filter {\n    constructor(velocity = [0, 0], kernelSize = 5, offset = 0) {\n        super(vertex, fragment);\n        this.uniforms.uVelocity = new Float32Array(2);\n        this._velocity = new ObservablePoint(this.velocityChanged, this);\n        this.velocity = velocity;\n\n        /**\n         * The kernelSize of the blur, higher values are slower but look better.\n         * Use odd value greater than 5.\n         * @member {number}\n         * @default 5\n         */\n        this.kernelSize = kernelSize;\n        this.offset = offset;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        const {x, y} = this.velocity;\n\n        this.uniforms.uKernelSize = (x !== 0 || y !== 0) ? this.kernelSize : 0;\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the velocity of the motion for blur effect.\n     *\n     * @member {PIXI.ObservablePoint}\n     */\n    set velocity(value) {\n        if (Array.isArray(value)) {\n            this._velocity.set(value[0], value[1]);\n        }\n        else if (value instanceof Point || value instanceof ObservablePoint) {\n            this._velocity.copy(value);\n        }\n    }\n\n    get velocity() {\n        return this._velocity;\n    }\n\n    /**\n     * Handle velocity changed\n     * @private\n     */\n    velocityChanged() {\n        this.uniforms.uVelocity[0] = this._velocity.x;\n        this.uniforms.uVelocity[1] = this._velocity.y;\n    }\n\n    /**\n     * The offset of the blur filter.\n     *\n     * @member {number}\n     * @default 0\n     */\n    set offset(value) {\n        this.uniforms.uOffset = value;\n    }\n\n    get offset() {\n        return this.uniforms.uOffset;\n    }\n}\n\nexport { MotionBlurFilter };\n\n"],"names":["MotionBlurFilter","velocity","kernelSize","offset","super","vertex","fragment","this","uniforms","uVelocity","Float32Array","_velocity","ObservablePoint","velocityChanged","apply","filterManager","input","output","clear","uKernelSize","x","y","applyFilter","prototypeAccessors","value","Array","isArray","set","Point","copy","uOffset","Filter"],"mappings":";;;;;;;yyCAkBMA,cACF,WAAYC,EAAmBC,EAAgBC,kBAAxB,CAAC,EAAG,mBAAiB,kBAAY,GACpDC,YAAMC,EAAQC,GACdC,KAAKC,SAASC,UAAY,IAAIC,aAAa,GAC3CH,KAAKI,UAAY,IAAIC,kBAAgBL,KAAKM,gBAAiBN,MAC3DA,KAAKN,SAAWA,EAQhBM,KAAKL,WAAaA,EAClBK,KAAKJ,OAASA,wKAOlBW,eAAMC,EAAeC,EAAOC,EAAQC,GAChC,MAAeX,KAAKN,qBAEpBM,KAAKC,SAASW,YAAqB,IAANC,GAAiB,IAANC,EAAWd,KAAKL,WAAa,EACrEa,EAAcO,YAAYf,KAAMS,EAAOC,EAAQC,IAQnDK,EAAItB,sBAASuB,GACLC,MAAMC,QAAQF,GACdjB,KAAKI,UAAUgB,IAAIH,EAAM,GAAIA,EAAM,KAE9BA,aAAiBI,SAASJ,aAAiBZ,oBAChDL,KAAKI,UAAUkB,KAAKL,IAI5BD,EAAItB,wBACA,OAAOM,KAAKI,uBAOhBE,2BACIN,KAAKC,SAASC,UAAU,GAAKF,KAAKI,UAAUS,EAC5Cb,KAAKC,SAASC,UAAU,GAAKF,KAAKI,UAAUU,GAShDE,EAAIpB,oBAAOqB,GACPjB,KAAKC,SAASsB,QAAUN,GAG5BD,EAAIpB,sBACA,OAAOI,KAAKC,SAASsB,mDAlEEC"}