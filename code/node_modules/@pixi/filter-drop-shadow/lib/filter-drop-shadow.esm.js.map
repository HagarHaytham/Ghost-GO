{"version":3,"file":"filter-drop-shadow.esm.js","sources":["../src/DropShadowFilter.js"],"sourcesContent":["import {KawaseBlurFilter} from '@pixi/filter-kawase-blur';\nimport {vertex} from '@tools/fragments';\nimport fragment from './dropshadow.frag';\nimport {Filter} from '@pixi/core';\nimport {settings} from '@pixi/settings';\nimport {DEG_TO_RAD, Point} from '@pixi/math';\nimport {rgb2hex, hex2rgb} from '@pixi/utils';\n\n/**\n * Drop shadow filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/drop-shadow.png)\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-drop-shadow|@pixi/filter-drop-shadow}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] Filter options\n * @param {number} [options.rotation=45] The angle of the shadow in degrees.\n * @param {number} [options.distance=5] Distance of shadow\n * @param {number} [options.color=0x000000] Color of the shadow\n * @param {number} [options.alpha=0.5] Alpha of the shadow\n * @param {number} [options.shadowOnly=false] Whether render shadow only\n * @param {number} [options.blur=2] - Sets the strength of the Blur properties simultaneously\n * @param {number} [options.quality=3] - The quality of the Blur filter.\n * @param {number[]} [options.kernels=null] - The kernels of the Blur filter.\n * @param {number|number[]|PIXI.Point} [options.pixelSize=1] - the pixelSize of the Blur filter.\n * @param {number} [options.resolution=PIXI.settings.RESOLUTION] - The resolution of the Blur filter.\n */\nclass DropShadowFilter extends Filter {\n    constructor(options) {\n\n        // Fallback support for ctor: (rotation, distance, blur, color, alpha)\n        if (options && options.constructor !== Object) {\n            // eslint-disable-next-line no-console\n            console.warn('DropShadowFilter now uses options instead of (rotation, distance, blur, color, alpha)');\n            options = { rotation: options };\n            if (arguments[1] !== undefined) {\n                options.distance = arguments[1];\n            }\n            if (arguments[2] !== undefined) {\n                options.blur = arguments[2];\n            }\n            if (arguments[3] !== undefined) {\n                options.color = arguments[3];\n            }\n            if (arguments[4] !== undefined) {\n                options.alpha = arguments[4];\n            }\n        }\n\n        options = Object.assign({\n            rotation: 45,\n            distance: 5,\n            color: 0x000000,\n            alpha: 0.5,\n            shadowOnly: false,\n            kernels: null,\n            blur: 2,\n            quality: 3,\n            pixelSize: 1,\n            resolution: settings.RESOLUTION,\n        }, options);\n\n        super();\n\n        const { kernels, blur, quality, pixelSize, resolution } = options;\n\n        this._tintFilter = new Filter(vertex, fragment);\n        this._tintFilter.uniforms.color = new Float32Array(4);\n        this._tintFilter.uniforms.shift = new Point();\n        this._tintFilter.resolution = resolution;\n        this._blurFilter = kernels ?\n            new KawaseBlurFilter(kernels) :\n            new KawaseBlurFilter(blur, quality);\n\n        this.pixelSize = pixelSize;\n        this.resolution = resolution;\n\n        const { shadowOnly, rotation, distance, alpha, color } = options;\n\n        this.shadowOnly = shadowOnly;\n        this.rotation = rotation;\n        this.distance = distance;\n        this.alpha = alpha;\n        this.color = color;\n\n        this._updatePadding();\n    }\n\n    apply(filterManager, input, output, clear) {\n        const target = filterManager.getFilterTexture();\n\n        this._tintFilter.apply(filterManager, input, target, true);\n        this._blurFilter.apply(filterManager, target, output, clear);\n\n        if (this.shadowOnly !== true) {\n            filterManager.applyFilter(this, input, output, false);\n        }\n\n        filterManager.returnFilterTexture(target);\n    }\n\n    /**\n     * Recalculate the proper padding amount.\n     * @private\n     */\n    _updatePadding() {\n        this.padding = this.distance + (this.blur * 2);\n    }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    _updateShift() {\n        this._tintFilter.uniforms.shift.set(\n            this.distance * Math.cos(this.angle),\n            this.distance * Math.sin(this.angle)\n        );\n    }\n\n    /**\n     * The resolution of the filter.\n     *\n     * @member {number}\n     * @default PIXI.settings.RESOLUTION\n     */\n    get resolution() {\n        return this._resolution;\n    }\n    set resolution(value) {\n        this._resolution = value;\n\n        if (this._tintFilter) {\n            this._tintFilter.resolution = value;\n        }\n        if (this._blurFilter) {\n            this._blurFilter.resolution = value;\n        }\n    }\n\n    /**\n     * Distance offset of the shadow\n     * @member {number}\n     * @default 5\n     */\n    get distance() {\n        return this._distance;\n    }\n    set distance(value) {\n        this._distance = value;\n        this._updatePadding();\n        this._updateShift();\n    }\n\n    /**\n     * The angle of the shadow in degrees\n     * @member {number}\n     * @default 2\n     */\n    get rotation() {\n        return this.angle / DEG_TO_RAD;\n    }\n    set rotation(value) {\n        this.angle = value * DEG_TO_RAD;\n        this._updateShift();\n    }\n\n    /**\n     * The alpha of the shadow\n     * @member {number}\n     * @default 1\n     */\n    get alpha() {\n        return this._tintFilter.uniforms.alpha;\n    }\n    set alpha(value) {\n        this._tintFilter.uniforms.alpha = value;\n    }\n\n    /**\n     * The color of the shadow.\n     * @member {number}\n     * @default 0x000000\n     */\n    get color() {\n        return rgb2hex(this._tintFilter.uniforms.color);\n    }\n    set color(value) {\n        hex2rgb(value, this._tintFilter.uniforms.color);\n    }\n\n    /**\n     * Sets the kernels of the Blur Filter\n     *\n     * @member {number[]}\n     */\n    get kernels() {\n        return this._blurFilter.kernels;\n    }\n    set kernels(value) {\n        this._blurFilter.kernels = value;\n    }\n\n    /**\n     * The blur of the shadow\n     * @member {number}\n     * @default 2\n     */\n    get blur() {\n        return this._blurFilter.blur;\n    }\n    set blur(value) {\n        this._blurFilter.blur = value;\n        this._updatePadding();\n    }\n\n    /**\n     * Sets the quality of the Blur Filter\n     *\n     * @member {number}\n     * @default 4\n     */\n    get quality() {\n        return this._blurFilter.quality;\n    }\n    set quality(value) {\n        this._blurFilter.quality = value;\n    }\n\n    /**\n     * Sets the pixelSize of the Kawase Blur filter\n     *\n     * @member {number|number[]|PIXI.Point}\n     * @default 1\n     */\n    get pixelSize() {\n        return this._blurFilter.pixelSize;\n    }\n    set pixelSize(value) {\n        this._blurFilter.pixelSize = value;\n    }\n}\n\nexport { DropShadowFilter };\n"],"names":["super","const"],"mappings":"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"}