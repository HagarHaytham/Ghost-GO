{"version":3,"file":"filter-kawase-blur.esm.js","sources":["../src/KawaseBlurFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './kawase-blur.frag';\nimport fragmentClamp from './kawase-blur-clamp.frag';\nimport {Filter} from '@pixi/core';\nimport {Point} from '@pixi/math';\n\n/**\n * A much faster blur than Gaussian blur, but more complicated to use.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/kawase-blur.png)\n *\n * @see https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-kawase-blur|@pixi/filter-kawase-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number|number[]} [blur=4] - The blur of the filter. Should be greater than `0`. If\n *        value is an Array, setting kernels.\n * @param {number} [quality=3] - The quality of the filter. Should be an integer greater than `1`.\n * @param {boolean} [clamp=false] - Clamp edges, useful for removing dark edges\n *        from fullscreen filters or bleeding to the edge of filterArea.\n */\nclass KawaseBlurFilter extends Filter {\n    constructor(blur = 4, quality = 3, clamp = false) {\n        super(vertex, clamp ? fragmentClamp : fragment);\n        this.uniforms.uOffset = new Float32Array(2);\n\n        this._pixelSize = new Point();\n        this.pixelSize = 1;\n        this._clamp = clamp;\n        this._kernels = null;\n\n        // if `blur` is array , as kernels\n        if (Array.isArray(blur)) {\n            this.kernels = blur;\n        }\n        else {\n            this._blur = blur;\n            this.quality = quality;\n        }\n    }\n\n    /**\n     * Overrides apply\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        const uvX = this.pixelSize.x / input._frame.width;\n        const uvY = this.pixelSize.y / input._frame.height;\n        let offset;\n\n        if (this._quality === 1 || this._blur === 0) {\n            offset = this._kernels[0] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else {\n            const renderTarget = filterManager.getFilterTexture();\n\n            let source = input;\n            let target = renderTarget;\n            let tmp;\n\n            const last = this._quality - 1;\n\n            for (let i = 0; i < last; i++) {\n                offset = this._kernels[i] + 0.5;\n                this.uniforms.uOffset[0] = offset * uvX;\n                this.uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, true);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n            }\n            offset = this._kernels[last] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, source, output, clear);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n\n    /**\n     * Auto generate kernels by blur & quality\n     * @private\n     */\n    _generateKernels() {\n        const blur = this._blur;\n        const quality = this._quality;\n        const kernels = [ blur ];\n\n        if (blur > 0) {\n            let k = blur;\n            const step = blur / quality;\n\n            for (let i = 1; i < quality; i++) {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this._kernels = kernels;\n    }\n\n    /**\n     * The kernel size of the blur filter, for advanced usage.\n     *\n     * @member {number[]}\n     * @default [0]\n     */\n    get kernels() {\n        return this._kernels;\n    }\n    set kernels(value) {\n        if (Array.isArray(value) && value.length > 0) {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max.apply(Math, value);\n        }\n        else {\n            // if value is invalid , set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    }\n\n    /**\n     * Get the if the filter is clampped.\n     *\n     * @readonly\n     * @member {boolean}\n     * @default false\n     */\n    get clamp() {\n        return this._clamp;\n    }\n\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [1, 1]\n     */\n    set pixelSize(value) {\n        if (typeof value === 'number') {\n            this._pixelSize.x = value;\n            this._pixelSize.y = value;\n        }\n        else if (Array.isArray(value)) {\n            this._pixelSize.x = value[0];\n            this._pixelSize.y = value[1];\n        }\n        else if (value instanceof Point) {\n            this._pixelSize.x = value.x;\n            this._pixelSize.y = value.y;\n        }\n        else {\n            // if value is invalid , set default value\n            this._pixelSize.x = 1;\n            this._pixelSize.y = 1;\n        }\n    }\n    get pixelSize() {\n        return this._pixelSize;\n    }\n\n    /**\n     * The quality of the filter, integer greater than `1`.\n     *\n     * @member {number}\n     * @default 3\n     */\n    get quality() {\n        return this._quality;\n    }\n    set quality(value) {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    }\n\n    /**\n     * The amount of blur, value greater than `0`.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get blur() {\n        return this._blur;\n    }\n    set blur(value) {\n        this._blur = value;\n        this._generateKernels();\n    }\n}\n\nexport { KawaseBlurFilter };\n"],"names":["super","const","let"],"mappings":"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"}