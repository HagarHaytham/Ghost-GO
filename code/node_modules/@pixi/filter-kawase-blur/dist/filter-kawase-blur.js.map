{"version":3,"file":"filter-kawase-blur.js","sources":["../src/KawaseBlurFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './kawase-blur.frag';\nimport fragmentClamp from './kawase-blur-clamp.frag';\nimport {Filter} from '@pixi/core';\nimport {Point} from '@pixi/math';\n\n/**\n * A much faster blur than Gaussian blur, but more complicated to use.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/kawase-blur.png)\n *\n * @see https://software.intel.com/en-us/blogs/2014/07/15/an-investigation-of-fast-real-time-gpu-based-image-blur-algorithms\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-kawase-blur|@pixi/filter-kawase-blur}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {number|number[]} [blur=4] - The blur of the filter. Should be greater than `0`. If\n *        value is an Array, setting kernels.\n * @param {number} [quality=3] - The quality of the filter. Should be an integer greater than `1`.\n * @param {boolean} [clamp=false] - Clamp edges, useful for removing dark edges\n *        from fullscreen filters or bleeding to the edge of filterArea.\n */\nclass KawaseBlurFilter extends Filter {\n    constructor(blur = 4, quality = 3, clamp = false) {\n        super(vertex, clamp ? fragmentClamp : fragment);\n        this.uniforms.uOffset = new Float32Array(2);\n\n        this._pixelSize = new Point();\n        this.pixelSize = 1;\n        this._clamp = clamp;\n        this._kernels = null;\n\n        // if `blur` is array , as kernels\n        if (Array.isArray(blur)) {\n            this.kernels = blur;\n        }\n        else {\n            this._blur = blur;\n            this.quality = quality;\n        }\n    }\n\n    /**\n     * Overrides apply\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        const uvX = this.pixelSize.x / input._frame.width;\n        const uvY = this.pixelSize.y / input._frame.height;\n        let offset;\n\n        if (this._quality === 1 || this._blur === 0) {\n            offset = this._kernels[0] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, input, output, clear);\n        }\n        else {\n            const renderTarget = filterManager.getFilterTexture();\n\n            let source = input;\n            let target = renderTarget;\n            let tmp;\n\n            const last = this._quality - 1;\n\n            for (let i = 0; i < last; i++) {\n                offset = this._kernels[i] + 0.5;\n                this.uniforms.uOffset[0] = offset * uvX;\n                this.uniforms.uOffset[1] = offset * uvY;\n                filterManager.applyFilter(this, source, target, true);\n\n                tmp = source;\n                source = target;\n                target = tmp;\n            }\n            offset = this._kernels[last] + 0.5;\n            this.uniforms.uOffset[0] = offset * uvX;\n            this.uniforms.uOffset[1] = offset * uvY;\n            filterManager.applyFilter(this, source, output, clear);\n\n            filterManager.returnFilterTexture(renderTarget);\n        }\n    }\n\n    /**\n     * Auto generate kernels by blur & quality\n     * @private\n     */\n    _generateKernels() {\n        const blur = this._blur;\n        const quality = this._quality;\n        const kernels = [ blur ];\n\n        if (blur > 0) {\n            let k = blur;\n            const step = blur / quality;\n\n            for (let i = 1; i < quality; i++) {\n                k -= step;\n                kernels.push(k);\n            }\n        }\n\n        this._kernels = kernels;\n    }\n\n    /**\n     * The kernel size of the blur filter, for advanced usage.\n     *\n     * @member {number[]}\n     * @default [0]\n     */\n    get kernels() {\n        return this._kernels;\n    }\n    set kernels(value) {\n        if (Array.isArray(value) && value.length > 0) {\n            this._kernels = value;\n            this._quality = value.length;\n            this._blur = Math.max.apply(Math, value);\n        }\n        else {\n            // if value is invalid , set default value\n            this._kernels = [0];\n            this._quality = 1;\n        }\n    }\n\n    /**\n     * Get the if the filter is clampped.\n     *\n     * @readonly\n     * @member {boolean}\n     * @default false\n     */\n    get clamp() {\n        return this._clamp;\n    }\n\n    /**\n     * Sets the pixel size of the filter. Large size is blurrier. For advanced usage.\n     *\n     * @member {PIXI.Point|number[]}\n     * @default [1, 1]\n     */\n    set pixelSize(value) {\n        if (typeof value === 'number') {\n            this._pixelSize.x = value;\n            this._pixelSize.y = value;\n        }\n        else if (Array.isArray(value)) {\n            this._pixelSize.x = value[0];\n            this._pixelSize.y = value[1];\n        }\n        else if (value instanceof Point) {\n            this._pixelSize.x = value.x;\n            this._pixelSize.y = value.y;\n        }\n        else {\n            // if value is invalid , set default value\n            this._pixelSize.x = 1;\n            this._pixelSize.y = 1;\n        }\n    }\n    get pixelSize() {\n        return this._pixelSize;\n    }\n\n    /**\n     * The quality of the filter, integer greater than `1`.\n     *\n     * @member {number}\n     * @default 3\n     */\n    get quality() {\n        return this._quality;\n    }\n    set quality(value) {\n        this._quality = Math.max(1, Math.round(value));\n        this._generateKernels();\n    }\n\n    /**\n     * The amount of blur, value greater than `0`.\n     *\n     * @member {number}\n     * @default 4\n     */\n    get blur() {\n        return this._blur;\n    }\n    set blur(value) {\n        this._blur = value;\n        this._generateKernels();\n    }\n}\n\nexport { KawaseBlurFilter };\n"],"names":["KawaseBlurFilter","blur","quality","clamp","super","vertex","fragmentClamp","fragment","this","uniforms","uOffset","Float32Array","_pixelSize","Point","pixelSize","_clamp","_kernels","Array","isArray","kernels","_blur","apply","filterManager","input","output","clear","const","offset","uvX","x","_frame","width","uvY","y","height","_quality","applyFilter","tmp","renderTarget","getFilterTexture","source","target","last","i","returnFilterTexture","_generateKernels","let","k","step","push","prototypeAccessors","value","length","Math","max","round","Filter"],"mappings":"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"}