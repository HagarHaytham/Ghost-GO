{"version":3,"file":"filter-color-map.cjs.js","sources":["../src/ColorMapFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './color-map.frag';\nimport {Filter, Texture} from '@pixi/core';\nimport {SCALE_MODES} from '@pixi/constants';\n\n/**\n * The ColorMapFilter applies a color-map effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-map.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-map|@pixi/filter-color-map}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture} [colorMap] - The colorMap texture of the filter.\n * @param {boolean} [nearest=false] - Whether use NEAREST for colorMap texture.\n * @param {number} [mix=1] - The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n */\nclass ColorMapFilter extends Filter {\n\n    constructor(colorMap, nearest = false, mix = 1) {\n        super(vertex, fragment);\n\n        this._size = 0;\n        this._sliceSize = 0;\n        this._slicePixelSize = 0;\n        this._sliceInnerSize = 0;\n\n        this._scaleMode = null;\n        this._nearest = false;\n        this.nearest = nearest;\n\n        /**\n         * The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n         * @member {number}\n         */\n        this.mix = mix;\n\n        this.colorMap = colorMap;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms._mix = this.mix;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * the size of one color slice\n     * @member {number}\n     * @readonly\n     */\n    get colorSize() {\n        return this._size;\n    }\n\n    /**\n     * the colorMap texture\n     * @member {PIXI.Texture}\n     */\n    get colorMap() {\n        return this._colorMap;\n    }\n    set colorMap(colorMap) {\n        if (!(colorMap instanceof Texture)) {\n            colorMap = Texture.from(colorMap);\n        }\n        if (colorMap && colorMap.baseTexture) {\n            colorMap.baseTexture.scaleMode = this._scaleMode;\n            colorMap.baseTexture.mipmap = false;\n\n            this._size = colorMap.height;\n            this._sliceSize = 1 / this._size;\n            this._slicePixelSize = this._sliceSize / this._size;\n            this._sliceInnerSize = this._slicePixelSize * (this._size - 1);\n\n            this.uniforms._size = this._size;\n            this.uniforms._sliceSize = this._sliceSize;\n            this.uniforms._slicePixelSize = this._slicePixelSize;\n            this.uniforms._sliceInnerSize = this._sliceInnerSize;\n\n            this.uniforms.colorMap = colorMap;\n        }\n\n        this._colorMap = colorMap;\n    }\n\n    /**\n     * Whether use NEAREST for colorMap texture.\n     * @member {boolean}\n     */\n    get nearest() {\n        return this._nearest;\n    }\n    set nearest(nearest) {\n        this._nearest = nearest;\n        this._scaleMode = nearest ? SCALE_MODES.NEAREST : SCALE_MODES.LINEAR;\n\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture.baseTexture._glTextures = {};\n\n            texture.baseTexture.scaleMode = this._scaleMode;\n            texture.baseTexture.mipmap = false;\n\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n        }\n    }\n\n    /**\n     * If the colorMap is based on canvas , and the content of canvas has changed,\n     *   then call `updateColorMap` for update texture.\n     */\n    updateColorMap() {\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n\n            this.colorMap = texture;\n        }\n    }\n\n    /**\n     * Destroys this filter\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture of colorMap as well\n     */\n    destroy(destroyBase) {\n        if (this._colorMap) {\n            this._colorMap.destroy(destroyBase);\n        }\n        super.destroy();\n    }\n}\n\nexport { ColorMapFilter };\n\n"],"names":["super","Texture","SCALE_MODES","const","Filter"],"mappings":"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"}