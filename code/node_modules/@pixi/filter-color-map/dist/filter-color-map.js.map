{"version":3,"file":"filter-color-map.js","sources":["../src/ColorMapFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './color-map.frag';\nimport {Filter, Texture} from '@pixi/core';\nimport {SCALE_MODES} from '@pixi/constants';\n\n/**\n * The ColorMapFilter applies a color-map effect to an object.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/color-map.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-color-map|@pixi/filter-color-map}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {HTMLImageElement|HTMLCanvasElement|PIXI.BaseTexture|PIXI.Texture} [colorMap] - The colorMap texture of the filter.\n * @param {boolean} [nearest=false] - Whether use NEAREST for colorMap texture.\n * @param {number} [mix=1] - The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n */\nclass ColorMapFilter extends Filter {\n\n    constructor(colorMap, nearest = false, mix = 1) {\n        super(vertex, fragment);\n\n        this._size = 0;\n        this._sliceSize = 0;\n        this._slicePixelSize = 0;\n        this._sliceInnerSize = 0;\n\n        this._scaleMode = null;\n        this._nearest = false;\n        this.nearest = nearest;\n\n        /**\n         * The mix from 0 to 1, where 0 is the original image and 1 is the color mapped image.\n         * @member {number}\n         */\n        this.mix = mix;\n\n        this.colorMap = colorMap;\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms._mix = this.mix;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * the size of one color slice\n     * @member {number}\n     * @readonly\n     */\n    get colorSize() {\n        return this._size;\n    }\n\n    /**\n     * the colorMap texture\n     * @member {PIXI.Texture}\n     */\n    get colorMap() {\n        return this._colorMap;\n    }\n    set colorMap(colorMap) {\n        if (!(colorMap instanceof Texture)) {\n            colorMap = Texture.from(colorMap);\n        }\n        if (colorMap && colorMap.baseTexture) {\n            colorMap.baseTexture.scaleMode = this._scaleMode;\n            colorMap.baseTexture.mipmap = false;\n\n            this._size = colorMap.height;\n            this._sliceSize = 1 / this._size;\n            this._slicePixelSize = this._sliceSize / this._size;\n            this._sliceInnerSize = this._slicePixelSize * (this._size - 1);\n\n            this.uniforms._size = this._size;\n            this.uniforms._sliceSize = this._sliceSize;\n            this.uniforms._slicePixelSize = this._slicePixelSize;\n            this.uniforms._sliceInnerSize = this._sliceInnerSize;\n\n            this.uniforms.colorMap = colorMap;\n        }\n\n        this._colorMap = colorMap;\n    }\n\n    /**\n     * Whether use NEAREST for colorMap texture.\n     * @member {boolean}\n     */\n    get nearest() {\n        return this._nearest;\n    }\n    set nearest(nearest) {\n        this._nearest = nearest;\n        this._scaleMode = nearest ? SCALE_MODES.NEAREST : SCALE_MODES.LINEAR;\n\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture.baseTexture._glTextures = {};\n\n            texture.baseTexture.scaleMode = this._scaleMode;\n            texture.baseTexture.mipmap = false;\n\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n        }\n    }\n\n    /**\n     * If the colorMap is based on canvas , and the content of canvas has changed,\n     *   then call `updateColorMap` for update texture.\n     */\n    updateColorMap() {\n        const texture = this._colorMap;\n\n        if (texture && texture.baseTexture) {\n            texture._updateID++;\n            texture.baseTexture.emit('update', texture.baseTexture);\n\n            this.colorMap = texture;\n        }\n    }\n\n    /**\n     * Destroys this filter\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture of colorMap as well\n     */\n    destroy(destroyBase) {\n        if (this._colorMap) {\n            this._colorMap.destroy(destroyBase);\n        }\n        super.destroy();\n    }\n}\n\nexport { ColorMapFilter };\n\n"],"names":["ColorMapFilter","colorMap","nearest","mix","super","vertex","fragment","this","_size","_sliceSize","_slicePixelSize","_sliceInnerSize","_scaleMode","_nearest","apply","filterManager","input","output","clear","uniforms","_mix","applyFilter","prototypeAccessors","colorSize","_colorMap","Texture","from","baseTexture","scaleMode","mipmap","height","SCALE_MODES","NEAREST","LINEAR","const","texture","_glTextures","_updateID","emit","updateColorMap","destroy","destroyBase","Filter"],"mappings":";;;;;;;i9CAkBMA,cAEF,WAAYC,EAAUC,EAAiBC,mBAAP,kBAAa,GACzCC,YAAMC,EAAQC,GAEdC,KAAKC,MAAQ,EACbD,KAAKE,WAAa,EAClBF,KAAKG,gBAAkB,EACvBH,KAAKI,gBAAkB,EAEvBJ,KAAKK,WAAa,KAClBL,KAAKM,UAAW,EAChBN,KAAKL,QAAUA,EAMfK,KAAKJ,IAAMA,EAEXI,KAAKN,SAAWA,qMAOpBa,eAAMC,EAAeC,EAAOC,EAAQC,GAChCX,KAAKY,SAASC,KAAOb,KAAKJ,IAE1BY,EAAcM,YAAYd,KAAMS,EAAOC,EAAQC,IAQnDI,EAAIC,yBACA,OAAOhB,KAAKC,OAOhBc,EAAIrB,wBACA,OAAOM,KAAKiB,WAEhBF,EAAIrB,sBAASA,GACHA,aAAoBwB,YACtBxB,EAAWwB,UAAQC,KAAKzB,IAExBA,GAAYA,EAAS0B,cACrB1B,EAAS0B,YAAYC,UAAYrB,KAAKK,WACtCX,EAAS0B,YAAYE,QAAS,EAE9BtB,KAAKC,MAAQP,EAAS6B,OACtBvB,KAAKE,WAAa,EAAIF,KAAKC,MAC3BD,KAAKG,gBAAkBH,KAAKE,WAAaF,KAAKC,MAC9CD,KAAKI,gBAAkBJ,KAAKG,iBAAmBH,KAAKC,MAAQ,GAE5DD,KAAKY,SAASX,MAAQD,KAAKC,MAC3BD,KAAKY,SAASV,WAAaF,KAAKE,WAChCF,KAAKY,SAAST,gBAAkBH,KAAKG,gBACrCH,KAAKY,SAASR,gBAAkBJ,KAAKI,gBAErCJ,KAAKY,SAASlB,SAAWA,GAG7BM,KAAKiB,UAAYvB,GAOrBqB,EAAIpB,uBACA,OAAOK,KAAKM,UAEhBS,EAAIpB,qBAAQA,GACRK,KAAKM,SAAWX,EAChBK,KAAKK,WAAaV,EAAU6B,cAAYC,QAAUD,cAAYE,OAE9DC,IAAMC,EAAU5B,KAAKiB,UAEjBW,GAAWA,EAAQR,cACnBQ,EAAQR,YAAYS,YAAc,GAElCD,EAAQR,YAAYC,UAAYrB,KAAKK,WACrCuB,EAAQR,YAAYE,QAAS,EAE7BM,EAAQE,YACRF,EAAQR,YAAYW,KAAK,SAAUH,EAAQR,2BAQnDY,0BACIL,IAAMC,EAAU5B,KAAKiB,UAEjBW,GAAWA,EAAQR,cACnBQ,EAAQE,YACRF,EAAQR,YAAYW,KAAK,SAAUH,EAAQR,aAE3CpB,KAAKN,SAAWkC,gBASxBK,iBAAQC,GACAlC,KAAKiB,WACLjB,KAAKiB,UAAUgB,QAAQC,GAE3BrC,YAAMoC,8DAzHeE"}