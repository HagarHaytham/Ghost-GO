{"version":3,"file":"interaction.min.js","sources":["../src/InteractionData.js","../src/InteractionEvent.js","../src/InteractionTrackingData.js","../src/interactiveTarget.js","../src/InteractionManager.js"],"sourcesContent":["import { Point } from '@pixi/math';\n\n/**\n * Holds all information related to an Interaction event\n *\n * @class\n * @memberof PIXI.interaction\n */\nexport default class InteractionData\n{\n    constructor()\n    {\n        /**\n         * This point stores the global coords of where the touch/mouse event happened\n         *\n         * @member {PIXI.Point}\n         */\n        this.global = new Point();\n\n        /**\n         * The target Sprite that was interacted with\n         *\n         * @member {PIXI.Sprite}\n         */\n        this.target = null;\n\n        /**\n         * When passed to an event handler, this will be the original DOM Event that was captured\n         *\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/TouchEvent\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent\n         * @member {MouseEvent|TouchEvent|PointerEvent}\n         */\n        this.originalEvent = null;\n\n        /**\n         * Unique identifier for this interaction\n         *\n         * @member {number}\n         */\n        this.identifier = null;\n\n        /**\n         * Indicates whether or not the pointer device that created the event is the primary pointer.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/isPrimary\n         * @type {Boolean}\n         */\n        this.isPrimary = false;\n\n        /**\n         * Indicates which button was pressed on the mouse or pointer device to trigger the event.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/button\n         * @type {number}\n         */\n        this.button = 0;\n\n        /**\n         * Indicates which buttons are pressed on the mouse or pointer device when the event is triggered.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/MouseEvent/buttons\n         * @type {number}\n         */\n        this.buttons = 0;\n\n        /**\n         * The width of the pointer's contact along the x-axis, measured in CSS pixels.\n         * radiusX of TouchEvents will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/width\n         * @type {number}\n         */\n        this.width = 0;\n\n        /**\n         * The height of the pointer's contact along the y-axis, measured in CSS pixels.\n         * radiusY of TouchEvents will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/height\n         * @type {number}\n         */\n        this.height = 0;\n\n        /**\n         * The angle, in degrees, between the pointer device and the screen.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltX\n         * @type {number}\n         */\n        this.tiltX = 0;\n\n        /**\n         * The angle, in degrees, between the pointer device and the screen.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/tiltY\n         * @type {number}\n         */\n        this.tiltY = 0;\n\n        /**\n         * The type of pointer that triggered the event.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerType\n         * @type {string}\n         */\n        this.pointerType = null;\n\n        /**\n         * Pressure applied by the pointing device during the event. A Touch's force property\n         * will be represented by this value.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pressure\n         * @type {number}\n         */\n        this.pressure = 0;\n\n        /**\n         * From TouchEvents (not PointerEvents triggered by touches), the rotationAngle of the Touch.\n         * @see https://developer.mozilla.org/en-US/docs/Web/API/Touch/rotationAngle\n         * @type {number}\n         */\n        this.rotationAngle = 0;\n\n        /**\n         * Twist of a stylus pointer.\n         * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n         * @type {number}\n         */\n        this.twist = 0;\n\n        /**\n         * Barrel pressure on a stylus pointer.\n         * @see https://w3c.github.io/pointerevents/#pointerevent-interface\n         * @type {number}\n         */\n        this.tangentialPressure = 0;\n    }\n\n    /**\n     * The unique identifier of the pointer. It will be the same as `identifier`.\n     * @readonly\n     * @member {number}\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/PointerEvent/pointerId\n     */\n    get pointerId()\n    {\n        return this.identifier;\n    }\n\n    /**\n     * This will return the local coordinates of the specified displayObject for this InteractionData\n     *\n     * @param {PIXI.DisplayObject} displayObject - The DisplayObject that you would like the local\n     *  coords off\n     * @param {PIXI.Point} [point] - A Point object in which to store the value, optional (otherwise\n     *  will create a new point)\n     * @param {PIXI.Point} [globalPos] - A Point object containing your custom global coords, optional\n     *  (otherwise will use the current global coords)\n     * @return {PIXI.Point} A point containing the coordinates of the InteractionData position relative\n     *  to the DisplayObject\n     */\n    getLocalPosition(displayObject, point, globalPos)\n    {\n        return displayObject.worldTransform.applyInverse(globalPos || this.global, point);\n    }\n\n    /**\n     * Copies properties from normalized event data.\n     *\n     * @param {Touch|MouseEvent|PointerEvent} event The normalized event data\n     */\n    copyEvent(event)\n    {\n        // isPrimary should only change on touchstart/pointerdown, so we don't want to overwrite\n        // it with \"false\" on later events when our shim for it on touch events might not be\n        // accurate\n        if (event.isPrimary)\n        {\n            this.isPrimary = true;\n        }\n        this.button = event.button;\n        // event.buttons is not available in all browsers (ie. Safari), but it does have a non-standard\n        // event.which property instead, which conveys the same information.\n        this.buttons = Number.isInteger(event.buttons) ? event.buttons : event.which;\n        this.width = event.width;\n        this.height = event.height;\n        this.tiltX = event.tiltX;\n        this.tiltY = event.tiltY;\n        this.pointerType = event.pointerType;\n        this.pressure = event.pressure;\n        this.rotationAngle = event.rotationAngle;\n        this.twist = event.twist || 0;\n        this.tangentialPressure = event.tangentialPressure || 0;\n    }\n\n    /**\n     * Resets the data for pooling.\n     */\n    reset()\n    {\n        // isPrimary is the only property that we really need to reset - everything else is\n        // guaranteed to be overwritten\n        this.isPrimary = false;\n    }\n}\n","/**\n * Event class that mimics native DOM events.\n *\n * @class\n * @memberof PIXI.interaction\n */\nexport default class InteractionEvent\n{\n    constructor()\n    {\n        /**\n         * Whether this event will continue propagating in the tree.\n         *\n         * Remaining events for the {@link stopsPropagatingAt} object\n         * will still be dispatched.\n         *\n         * @member {boolean}\n         */\n        this.stopped = false;\n\n        /**\n         * At which object this event stops propagating.\n         *\n         * @private\n         * @member {PIXI.DisplayObject}\n         */\n        this.stopsPropagatingAt = null;\n\n        /**\n         * Whether we already reached the element we want to\n         * stop propagating at. This is important for delayed events,\n         * where we start over deeper in the tree again.\n         *\n         * @private\n         * @member {boolean}\n         */\n        this.stopPropagationHint = false;\n\n        /**\n         * The object which caused this event to be dispatched.\n         * For listener callback see {@link PIXI.interaction.InteractionEvent.currentTarget}.\n         *\n         * @member {PIXI.DisplayObject}\n         */\n        this.target = null;\n\n        /**\n         * The object whose event listenerâ€™s callback is currently being invoked.\n         *\n         * @member {PIXI.DisplayObject}\n         */\n        this.currentTarget = null;\n\n        /**\n         * Type of the event\n         *\n         * @member {string}\n         */\n        this.type = null;\n\n        /**\n         * InteractionData related to this event\n         *\n         * @member {PIXI.interaction.InteractionData}\n         */\n        this.data = null;\n    }\n\n    /**\n     * Prevents event from reaching any objects other than the current object.\n     *\n     */\n    stopPropagation()\n    {\n        this.stopped = true;\n        this.stopPropagationHint = true;\n        this.stopsPropagatingAt = this.currentTarget;\n    }\n\n    /**\n     * Resets the event.\n     */\n    reset()\n    {\n        this.stopped = false;\n        this.stopsPropagatingAt = null;\n        this.stopPropagationHint = false;\n        this.currentTarget = null;\n        this.target = null;\n    }\n}\n","/**\n * DisplayObjects with the {@link PIXI.interaction.interactiveTarget} mixin use this class to track interactions\n *\n * @class\n * @private\n * @memberof PIXI.interaction\n */\nexport default class InteractionTrackingData\n{\n    /**\n     * @param {number} pointerId - Unique pointer id of the event\n     * @private\n     */\n    constructor(pointerId)\n    {\n        this._pointerId = pointerId;\n        this._flags = InteractionTrackingData.FLAGS.NONE;\n    }\n\n    /**\n     *\n     * @private\n     * @param {number} flag - The interaction flag to set\n     * @param {boolean} yn - Should the flag be set or unset\n     */\n    _doSet(flag, yn)\n    {\n        if (yn)\n        {\n            this._flags = this._flags | flag;\n        }\n        else\n        {\n            this._flags = this._flags & (~flag);\n        }\n    }\n\n    /**\n     * Unique pointer id of the event\n     *\n     * @readonly\n     * @private\n     * @member {number}\n     */\n    get pointerId()\n    {\n        return this._pointerId;\n    }\n\n    /**\n     * State of the tracking data, expressed as bit flags\n     *\n     * @private\n     * @member {number}\n     */\n    get flags()\n    {\n        return this._flags;\n    }\n\n    set flags(flags) // eslint-disable-line require-jsdoc\n    {\n        this._flags = flags;\n    }\n\n    /**\n     * Is the tracked event inactive (not over or down)?\n     *\n     * @private\n     * @member {number}\n     */\n    get none()\n    {\n        return this._flags === this.constructor.FLAGS.NONE;\n    }\n\n    /**\n     * Is the tracked event over the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get over()\n    {\n        return (this._flags & this.constructor.FLAGS.OVER) !== 0;\n    }\n\n    set over(yn) // eslint-disable-line require-jsdoc\n    {\n        this._doSet(this.constructor.FLAGS.OVER, yn);\n    }\n\n    /**\n     * Did the right mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get rightDown()\n    {\n        return (this._flags & this.constructor.FLAGS.RIGHT_DOWN) !== 0;\n    }\n\n    set rightDown(yn) // eslint-disable-line require-jsdoc\n    {\n        this._doSet(this.constructor.FLAGS.RIGHT_DOWN, yn);\n    }\n\n    /**\n     * Did the left mouse button come down in the DisplayObject?\n     *\n     * @private\n     * @member {boolean}\n     */\n    get leftDown()\n    {\n        return (this._flags & this.constructor.FLAGS.LEFT_DOWN) !== 0;\n    }\n\n    set leftDown(yn) // eslint-disable-line require-jsdoc\n    {\n        this._doSet(this.constructor.FLAGS.LEFT_DOWN, yn);\n    }\n}\n\nInteractionTrackingData.FLAGS = Object.freeze({\n    NONE: 0,\n    OVER: 1 << 0,\n    LEFT_DOWN: 1 << 1,\n    RIGHT_DOWN: 1 << 2,\n});\n","/**\n * Interface for classes that represent a hit area.\n *\n * It is implemented by the following classes:\n * - {@link PIXI.Circle}\n * - {@link PIXI.Ellipse}\n * - {@link PIXI.Polygon}\n * - {@link PIXI.RoundedRectangle}\n *\n * @interface IHitArea\n * @memberof PIXI\n */\n\n/**\n * Checks whether the x and y coordinates given are contained within this area\n *\n * @method\n * @name contains\n * @memberof PIXI.IHitArea#\n * @param {number} x - The X coordinate of the point to test\n * @param {number} y - The Y coordinate of the point to test\n * @return {boolean} Whether the x/y coordinates are within this area\n */\n\n/**\n * Default property values of interactive objects\n * Used by {@link PIXI.interaction.InteractionManager} to automatically give all DisplayObjects these properties\n *\n * @private\n * @name interactiveTarget\n * @type {Object}\n * @memberof PIXI.interaction\n * @example\n *      function MyObject() {}\n *\n *      Object.assign(\n *          DisplayObject.prototype,\n *          PIXI.interaction.interactiveTarget\n *      );\n */\nexport default {\n\n    /**\n     * Enable interaction events for the DisplayObject. Touch, pointer and mouse\n     * events will not be emitted unless `interactive` is set to `true`.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.on('tap', (event) => {\n     *    //handle event\n     * });\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    interactive: false,\n\n    /**\n     * Determines if the children to the displayObject can be clicked/touched\n     * Setting this to false allows PixiJS to bypass a recursive `hitTest` function\n     *\n     * @member {boolean}\n     * @memberof PIXI.Container#\n     */\n    interactiveChildren: true,\n\n    /**\n     * Interaction shape. Children will be hit first, then this shape will be checked.\n     * Setting this will cause this shape to be checked in hit tests rather than the displayObject's bounds.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.hitArea = new PIXI.Rectangle(0, 0, 100, 100);\n     * @member {PIXI.IHitArea}\n     * @memberof PIXI.DisplayObject#\n     */\n    hitArea: null,\n\n    /**\n     * If enabled, the mouse cursor use the pointer behavior when hovered over the displayObject if it is interactive\n     * Setting this changes the 'cursor' property to `'pointer'`.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.buttonMode = true;\n     * @member {boolean}\n     * @memberof PIXI.DisplayObject#\n     */\n    get buttonMode()\n    {\n        return this.cursor === 'pointer';\n    },\n    set buttonMode(value)\n    {\n        if (value)\n        {\n            this.cursor = 'pointer';\n        }\n        else if (this.cursor === 'pointer')\n        {\n            this.cursor = null;\n        }\n    },\n\n    /**\n     * This defines what cursor mode is used when the mouse cursor\n     * is hovered over the displayObject.\n     *\n     * @example\n     * const sprite = new PIXI.Sprite(texture);\n     * sprite.interactive = true;\n     * sprite.cursor = 'wait';\n     * @see https://developer.mozilla.org/en/docs/Web/CSS/cursor\n     *\n     * @member {string}\n     * @memberof PIXI.DisplayObject#\n     */\n    cursor: null,\n\n    /**\n     * Internal set of all active pointers, by identifier\n     *\n     * @member {Map<number, InteractionTrackingData>}\n     * @memberof PIXI.DisplayObject#\n     * @private\n     */\n    get trackedPointers()\n    {\n        if (this._trackedPointers === undefined) this._trackedPointers = {};\n\n        return this._trackedPointers;\n    },\n\n    /**\n     * Map of all tracked pointers, by identifier. Use trackedPointers to access.\n     *\n     * @private\n     * @type {Map<number, InteractionTrackingData>}\n     */\n    _trackedPointers: undefined,\n};\n","import { Ticker, UPDATE_PRIORITY } from '@pixi/ticker';\nimport { Point } from '@pixi/math';\nimport { DisplayObject } from '@pixi/display';\nimport InteractionData from './InteractionData';\nimport InteractionEvent from './InteractionEvent';\nimport InteractionTrackingData from './InteractionTrackingData';\nimport { EventEmitter } from '@pixi/utils';\nimport interactiveTarget from './interactiveTarget';\n\n// Mix interactiveTarget into DisplayObject.prototype,\n// after deprecation has been handled\nDisplayObject.mixin(interactiveTarget);\n\nconst MOUSE_POINTER_ID = 1;\n\n// helpers for hitTest() - only used inside hitTest()\nconst hitTestEvent = {\n    target: null,\n    data: {\n        global: null,\n    },\n};\n\n/**\n * The interaction manager deals with mouse, touch and pointer events.\n *\n * Any DisplayObject can be interactive if its `interactive` property is set to true.\n *\n * This manager also supports multitouch.\n *\n * An instance of this class is automatically created by default, and can be found at `renderer.plugins.interaction`\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI.interaction\n */\nexport default class InteractionManager extends EventEmitter\n{\n    /**\n     * @param {PIXI.CanvasRenderer|PIXI.Renderer} renderer - A reference to the current renderer\n     * @param {object} [options] - The options for the manager.\n     * @param {boolean} [options.autoPreventDefault=true] - Should the manager automatically prevent default browser actions.\n     * @param {number} [options.interactionFrequency=10] - Frequency increases the interaction events will be checked.\n     */\n    constructor(renderer, options)\n    {\n        super();\n\n        options = options || {};\n\n        /**\n         * The renderer this interaction manager works for.\n         *\n         * @member {PIXI.AbstractRenderer}\n         */\n        this.renderer = renderer;\n\n        /**\n         * Should default browser actions automatically be prevented.\n         * Does not apply to pointer events for backwards compatibility\n         * preventDefault on pointer events stops mouse events from firing\n         * Thus, for every pointer event, there will always be either a mouse of touch event alongside it.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPreventDefault = options.autoPreventDefault !== undefined ? options.autoPreventDefault : true;\n\n        /**\n         * Frequency in milliseconds that the mousemove, mouseover & mouseout interaction events will be checked.\n         *\n         * @member {number}\n         * @default 10\n         */\n        this.interactionFrequency = options.interactionFrequency || 10;\n\n        /**\n         * The mouse data\n         *\n         * @member {PIXI.interaction.InteractionData}\n         */\n        this.mouse = new InteractionData();\n        this.mouse.identifier = MOUSE_POINTER_ID;\n\n        // setting the mouse to start off far off screen will mean that mouse over does\n        //  not get called before we even move the mouse.\n        this.mouse.global.set(-999999);\n\n        /**\n         * Actively tracked InteractionData\n         *\n         * @private\n         * @member {Object.<number,PIXI.interaction.InteractionData>}\n         */\n        this.activeInteractionData = {};\n        this.activeInteractionData[MOUSE_POINTER_ID] = this.mouse;\n\n        /**\n         * Pool of unused InteractionData\n         *\n         * @private\n         * @member {PIXI.interaction.InteractionData[]}\n         */\n        this.interactionDataPool = [];\n\n        /**\n         * An event data object to handle all the event tracking/dispatching\n         *\n         * @member {object}\n         */\n        this.eventData = new InteractionEvent();\n\n        /**\n         * The DOM element to bind to.\n         *\n         * @protected\n         * @member {HTMLElement}\n         */\n        this.interactionDOMElement = null;\n\n        /**\n         * This property determines if mousemove and touchmove events are fired only when the cursor\n         * is over the object.\n         * Setting to true will make things work more in line with how the DOM version works.\n         * Setting to false can make things easier for things like dragging\n         * It is currently set to false as this is how PixiJS used to work. This will be set to true in\n         * future versions of pixi.\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.moveWhenInside = false;\n\n        /**\n         * Have events been attached to the dom element?\n         *\n         * @protected\n         * @member {boolean}\n         */\n        this.eventsAdded = false;\n\n        /**\n         * Is the mouse hovering over the renderer?\n         *\n         * @protected\n         * @member {boolean}\n         */\n        this.mouseOverRenderer = false;\n\n        /**\n         * Does the device support touch events\n         * https://www.w3.org/TR/touch-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsTouchEvents = 'ontouchstart' in window;\n\n        /**\n         * Does the device support pointer events\n         * https://www.w3.org/Submission/pointer-events/\n         *\n         * @readonly\n         * @member {boolean}\n         */\n        this.supportsPointerEvents = !!window.PointerEvent;\n\n        // this will make it so that you don't have to call bind all the time\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerUp = this.onPointerUp.bind(this);\n        this.processPointerUp = this.processPointerUp.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerCancel = this.onPointerCancel.bind(this);\n        this.processPointerCancel = this.processPointerCancel.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerDown = this.onPointerDown.bind(this);\n        this.processPointerDown = this.processPointerDown.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerMove = this.onPointerMove.bind(this);\n        this.processPointerMove = this.processPointerMove.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOut = this.onPointerOut.bind(this);\n        this.processPointerOverOut = this.processPointerOverOut.bind(this);\n\n        /**\n         * @private\n         * @member {Function}\n         */\n        this.onPointerOver = this.onPointerOver.bind(this);\n\n        /**\n         * Dictionary of how different cursor modes are handled. Strings are handled as CSS cursor\n         * values, objects are handled as dictionaries of CSS values for interactionDOMElement,\n         * and functions are called instead of changing the CSS.\n         * Default CSS cursor values are provided for 'default' and 'pointer' modes.\n         * @member {Object.<string, Object>}\n         */\n        this.cursorStyles = {\n            default: 'inherit',\n            pointer: 'pointer',\n        };\n\n        /**\n         * The mode of the cursor that is being used.\n         * The value of this is a key from the cursorStyles dictionary.\n         *\n         * @member {string}\n         */\n        this.currentCursorMode = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {string}\n         */\n        this.cursor = null;\n\n        /**\n         * Internal cached let.\n         *\n         * @private\n         * @member {PIXI.Point}\n         */\n        this._tempPoint = new Point();\n\n        /**\n         * The current resolution / device pixel ratio.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = 1;\n\n        /**\n         * Delayed pointer events. Used to guarantee correct ordering of over/out events.\n         *\n         * @private\n         * @member {Array}\n         */\n        this.delayedEvents = [];\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display\n         * object.\n         *\n         * @event PIXI.interaction.InteractionManager#mousedown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object.\n         *\n         * @event PIXI.interaction.InteractionManager#mouseup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#click\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#rightclick\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown}.\n         *\n         * @event PIXI.interaction.InteractionManager#mouseupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.interaction.InteractionManager#event:rightdown}.\n         *\n         * @event PIXI.interaction.InteractionManager#rightupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mousemove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mouseover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object\n         *\n         * @event PIXI.interaction.InteractionManager#mouseout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * Not always fired when some buttons are held down while others are released. In those cases,\n         * use [mousedown]{@link PIXI.interaction.InteractionManager#event:mousedown} and\n         * [mouseup]{@link PIXI.interaction.InteractionManager#event:mouseup} instead.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event\n         *\n         * @event PIXI.interaction.InteractionManager#pointercancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#pointertap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.interaction.InteractionManager#event:pointerdown}.\n         *\n         * @event PIXI.interaction.InteractionManager#pointerupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointermove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointerover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object\n         *\n         * @event PIXI.interaction.InteractionManager#pointerout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchstart\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchend\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch\n         *\n         * @event PIXI.interaction.InteractionManager#touchcancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#tap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.interaction.InteractionManager#event:touchstart}.\n         *\n         * @event PIXI.interaction.InteractionManager#touchendoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         *\n         * @event PIXI.interaction.InteractionManager#touchmove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed on the display.\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousedown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released over the display\n         * object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * over the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is pressed and released on\n         * the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#click\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is pressed\n         * and released on the display object. DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightclick\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button (usually a mouse left-button) is released outside the\n         * display object that initially registered a\n         * [mousedown]{@link PIXI.DisplayObject#event:mousedown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device secondary button (usually a mouse right-button) is released\n         * outside the display object that initially registered a\n         * [rightdown]{@link PIXI.DisplayObject#event:rightdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#rightupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mousemove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device (usually a mouse) is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#mouseout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerdown\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerup\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a pointer event.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointercancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is pressed and released on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointertap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device button is released outside the display object that initially\n         * registered a [pointerdown]{@link PIXI.DisplayObject#event:pointerdown}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerupoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved while over the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointermove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved onto the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerover\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a pointer device is moved off the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#pointerout\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed on the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchstart\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchend\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when the operating system cancels a touch.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchcancel\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is placed and removed from the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#tap\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is removed outside of the display object that initially\n         * registered a [touchstart]{@link PIXI.DisplayObject#event:touchstart}.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchendoutside\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        /**\n         * Fired when a touch point is moved along the display object.\n         * DisplayObject's `interactive` property must be set to `true` to fire event.\n         *\n         * @event PIXI.DisplayObject#touchmove\n         * @param {PIXI.interaction.InteractionEvent} event - Interaction event\n         */\n\n        this.setTargetElement(this.renderer.view, this.renderer.resolution);\n    }\n\n    /**\n     * Hit tests a point against the display tree, returning the first interactive object that is hit.\n     *\n     * @param {PIXI.Point} globalPoint - A point to hit test with, in global space.\n     * @param {PIXI.Container} [root] - The root display object to start from. If omitted, defaults\n     * to the last rendered root of the associated renderer.\n     * @return {PIXI.DisplayObject} The hit display object, if any.\n     */\n    hitTest(globalPoint, root)\n    {\n        // clear the target for our hit test\n        hitTestEvent.target = null;\n        // assign the global point\n        hitTestEvent.data.global = globalPoint;\n        // ensure safety of the root\n        if (!root)\n        {\n            root = this.renderer._lastObjectRendered;\n        }\n        // run the hit test\n        this.processInteractive(hitTestEvent, root, null, true);\n        // return our found object - it'll be null if we didn't hit anything\n\n        return hitTestEvent.target;\n    }\n\n    /**\n     * Sets the DOM element which will receive mouse/touch events. This is useful for when you have\n     * other DOM elements on top of the renderers Canvas element. With this you'll be bale to delegate\n     * another DOM element to receive those events.\n     *\n     * @param {HTMLElement} element - the DOM element which will receive mouse and touch events.\n     * @param {number} [resolution=1] - The resolution / device pixel ratio of the new element (relative to the canvas).\n     */\n    setTargetElement(element, resolution = 1)\n    {\n        this.removeEvents();\n\n        this.interactionDOMElement = element;\n\n        this.resolution = resolution;\n\n        this.addEvents();\n    }\n\n    /**\n     * Registers all the DOM events\n     *\n     * @private\n     */\n    addEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        Ticker.system.add(this.update, this, UPDATE_PRIORITY.INTERACTION);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = 'none';\n            this.interactionDOMElement.style['-ms-touch-action'] = 'none';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = 'none';\n        }\n\n        /**\n         * These events are added first, so that if pointer events are normalized, they are fired\n         * in the same order as non-normalized events. ie. pointer event 1st, mouse / touch 2nd\n         */\n        if (this.supportsPointerEvents)\n        {\n            window.document.addEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('pointerdown', this.onPointerDown, true);\n            // pointerout is fired in addition to pointerup (for touch events) and pointercancel\n            // we already handle those, so for the purposes of what we do in onPointerOut, we only\n            // care about the pointerleave event\n            this.interactionDOMElement.addEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('pointerover', this.onPointerOver, true);\n            window.addEventListener('pointercancel', this.onPointerCancel, true);\n            window.addEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.addEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.addEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.addEventListener('mouseover', this.onPointerOver, true);\n            window.addEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        // always look directly for touch events so that we can provide original data\n        // In a future version we should change this to being just a fallback and rely solely on\n        // PointerEvents whenever available\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.addEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.addEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.addEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.addEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.eventsAdded = true;\n    }\n\n    /**\n     * Removes all the DOM events that were previously registered\n     *\n     * @private\n     */\n    removeEvents()\n    {\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        Ticker.system.remove(this.update, this);\n\n        if (window.navigator.msPointerEnabled)\n        {\n            this.interactionDOMElement.style['-ms-content-zooming'] = '';\n            this.interactionDOMElement.style['-ms-touch-action'] = '';\n        }\n        else if (this.supportsPointerEvents)\n        {\n            this.interactionDOMElement.style['touch-action'] = '';\n        }\n\n        if (this.supportsPointerEvents)\n        {\n            window.document.removeEventListener('pointermove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('pointerdown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('pointerleave', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('pointerover', this.onPointerOver, true);\n            window.removeEventListener('pointercancel', this.onPointerCancel, true);\n            window.removeEventListener('pointerup', this.onPointerUp, true);\n        }\n        else\n        {\n            window.document.removeEventListener('mousemove', this.onPointerMove, true);\n            this.interactionDOMElement.removeEventListener('mousedown', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('mouseout', this.onPointerOut, true);\n            this.interactionDOMElement.removeEventListener('mouseover', this.onPointerOver, true);\n            window.removeEventListener('mouseup', this.onPointerUp, true);\n        }\n\n        if (this.supportsTouchEvents)\n        {\n            this.interactionDOMElement.removeEventListener('touchstart', this.onPointerDown, true);\n            this.interactionDOMElement.removeEventListener('touchcancel', this.onPointerCancel, true);\n            this.interactionDOMElement.removeEventListener('touchend', this.onPointerUp, true);\n            this.interactionDOMElement.removeEventListener('touchmove', this.onPointerMove, true);\n        }\n\n        this.interactionDOMElement = null;\n\n        this.eventsAdded = false;\n    }\n\n    /**\n     * Updates the state of interactive objects.\n     * Invoked by a throttled ticker update from {@link PIXI.Ticker.system}.\n     *\n     * @param {number} deltaTime - time delta since last tick\n     */\n    update(deltaTime)\n    {\n        this._deltaTime += deltaTime;\n\n        if (this._deltaTime < this.interactionFrequency)\n        {\n            return;\n        }\n\n        this._deltaTime = 0;\n\n        if (!this.interactionDOMElement)\n        {\n            return;\n        }\n\n        // if the user move the mouse this check has already been done using the mouse move!\n        if (this.didMove)\n        {\n            this.didMove = false;\n\n            return;\n        }\n\n        this.cursor = null;\n\n        // Resets the flag as set by a stopPropagation call. This flag is usually reset by a user interaction of any kind,\n        // but there was a scenario of a display object moving under a static mouse cursor.\n        // In this case, mouseover and mouseevents would not pass the flag test in dispatchEvent function\n        for (const k in this.activeInteractionData)\n        {\n            // eslint-disable-next-line no-prototype-builtins\n            if (this.activeInteractionData.hasOwnProperty(k))\n            {\n                const interactionData = this.activeInteractionData[k];\n\n                if (interactionData.originalEvent && interactionData.pointerType !== 'touch')\n                {\n                    const interactionEvent = this.configureInteractionEventForDOMEvent(\n                        this.eventData,\n                        interactionData.originalEvent,\n                        interactionData\n                    );\n\n                    this.processInteractive(\n                        interactionEvent,\n                        this.renderer._lastObjectRendered,\n                        this.processPointerOverOut,\n                        true\n                    );\n                }\n            }\n        }\n\n        this.setCursorMode(this.cursor);\n    }\n\n    /**\n     * Sets the current cursor mode, handling any callbacks or CSS style changes.\n     *\n     * @param {string} mode - cursor mode, a key from the cursorStyles dictionary\n     */\n    setCursorMode(mode)\n    {\n        mode = mode || 'default';\n        // if the mode didn't actually change, bail early\n        if (this.currentCursorMode === mode)\n        {\n            return;\n        }\n        this.currentCursorMode = mode;\n        const style = this.cursorStyles[mode];\n\n        // only do things if there is a cursor style for it\n        if (style)\n        {\n            switch (typeof style)\n            {\n                case 'string':\n                    // string styles are handled as cursor CSS\n                    this.interactionDOMElement.style.cursor = style;\n                    break;\n                case 'function':\n                    // functions are just called, and passed the cursor mode\n                    style(mode);\n                    break;\n                case 'object':\n                    // if it is an object, assume that it is a dictionary of CSS styles,\n                    // apply it to the interactionDOMElement\n                    Object.assign(this.interactionDOMElement.style, style);\n                    break;\n            }\n        }\n        else if (typeof mode === 'string' && !Object.prototype.hasOwnProperty.call(this.cursorStyles, mode))\n        {\n            // if it mode is a string (not a Symbol) and cursorStyles doesn't have any entry\n            // for the mode, then assume that the dev wants it to be CSS for the cursor.\n            this.interactionDOMElement.style.cursor = mode;\n        }\n    }\n\n    /**\n     * Dispatches an event on the display object that was interacted with\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    dispatchEvent(displayObject, eventString, eventData)\n    {\n        // Even if the event was stopped, at least dispatch any remaining events\n        // for the same display object.\n        if (!eventData.stopPropagationHint || displayObject === eventData.stopsPropagatingAt)\n        {\n            eventData.currentTarget = displayObject;\n            eventData.type = eventString;\n\n            displayObject.emit(eventString, eventData);\n\n            if (displayObject[eventString])\n            {\n                displayObject[eventString](eventData);\n            }\n        }\n    }\n\n    /**\n     * Puts a event on a queue to be dispatched later. This is used to guarantee correct\n     * ordering of over/out events.\n     *\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the display object in question\n     * @param {string} eventString - the name of the event (e.g, mousedown)\n     * @param {object} eventData - the event data object\n     * @private\n     */\n    delayDispatchEvent(displayObject, eventString, eventData)\n    {\n        this.delayedEvents.push({ displayObject, eventString, eventData });\n    }\n\n    /**\n     * Maps x and y coords from a DOM object and maps them correctly to the PixiJS view. The\n     * resulting value is stored in the point. This takes into account the fact that the DOM\n     * element could be scaled and positioned anywhere on the screen.\n     *\n     * @param  {PIXI.Point} point - the point that the result will be stored in\n     * @param  {number} x - the x coord of the position to map\n     * @param  {number} y - the y coord of the position to map\n     */\n    mapPositionToPoint(point, x, y)\n    {\n        let rect;\n\n        // IE 11 fix\n        if (!this.interactionDOMElement.parentElement)\n        {\n            rect = { x: 0, y: 0, width: 0, height: 0 };\n        }\n        else\n        {\n            rect = this.interactionDOMElement.getBoundingClientRect();\n        }\n\n        const resolutionMultiplier = 1.0 / this.resolution;\n\n        point.x = ((x - rect.left) * (this.interactionDOMElement.width / rect.width)) * resolutionMultiplier;\n        point.y = ((y - rect.top) * (this.interactionDOMElement.height / rect.height)) * resolutionMultiplier;\n    }\n\n    /**\n     * This function is provides a neat way of crawling through the scene graph and running a\n     * specified function on all interactive objects it finds. It will also take care of hit\n     * testing the interactive objects and passes the hit across in the function.\n     *\n     * @protected\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - event containing the point that\n     *  is tested for collision\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - the displayObject\n     *  that will be hit test (recursively crawls its children)\n     * @param {Function} [func] - the function that will be called on each interactive object. The\n     *  interactionEvent, displayObject and hit will be passed to the function\n     * @param {boolean} [hitTest] - this indicates if the objects inside should be hit test against the point\n     * @param {boolean} [interactive] - Whether the displayObject is interactive\n     * @param {boolean} [skipDelayed] - Whether to process delayed events before returning. This is\n     *  used to avoid processing them too early during recursive calls.\n     * @return {boolean} returns true if the displayObject hit the point\n     */\n    processInteractive(interactionEvent, displayObject, func, hitTest, interactive, skipDelayed)\n    {\n        if (!displayObject || !displayObject.visible)\n        {\n            return false;\n        }\n\n        const point = interactionEvent.data.global;\n\n        // Took a little while to rework this function correctly! But now it is done and nice and optimized! ^_^\n        //\n        // This function will now loop through all objects and then only hit test the objects it HAS\n        // to, not all of them. MUCH faster..\n        // An object will be hit test if the following is true:\n        //\n        // 1: It is interactive.\n        // 2: It belongs to a parent that is interactive AND one of the parents children have not already been hit.\n        //\n        // As another little optimization once an interactive object has been hit we can carry on\n        // through the scenegraph, but we know that there will be no more hits! So we can avoid extra hit tests\n        // A final optimization is that an object is not hit test directly if a child has already been hit.\n\n        interactive = displayObject.interactive || interactive;\n\n        let hit = false;\n        let interactiveParent = interactive;\n\n        // Flag here can set to false if the event is outside the parents hitArea or mask\n        let hitTestChildren = true;\n\n        // If there is a hitArea, no need to test against anything else if the pointer is not within the hitArea\n        // There is also no longer a need to hitTest children.\n        if (displayObject.hitArea)\n        {\n            if (hitTest)\n            {\n                displayObject.worldTransform.applyInverse(point, this._tempPoint);\n                if (!displayObject.hitArea.contains(this._tempPoint.x, this._tempPoint.y))\n                {\n                    hitTest = false;\n                    hitTestChildren = false;\n                }\n                else\n                {\n                    hit = true;\n                }\n            }\n            interactiveParent = false;\n        }\n        // If there is a mask, no need to hitTest against anything else if the pointer is not within the mask.\n        // We still want to hitTestChildren, however, to ensure a mouseout can still be generated.\n        // https://github.com/pixijs/pixi.js/issues/5135\n        else if (displayObject._mask)\n        {\n            if (hitTest)\n            {\n                if (!(displayObject._mask.containsPoint && displayObject._mask.containsPoint(point)))\n                {\n                    hitTest = false;\n                }\n            }\n        }\n\n        // ** FREE TIP **! If an object is not interactive or has no buttons in it\n        // (such as a game scene!) set interactiveChildren to false for that displayObject.\n        // This will allow PixiJS to completely ignore and bypass checking the displayObjects children.\n        if (hitTestChildren && displayObject.interactiveChildren && displayObject.children)\n        {\n            const children = displayObject.children;\n\n            for (let i = children.length - 1; i >= 0; i--)\n            {\n                const child = children[i];\n\n                // time to get recursive.. if this function will return if something is hit..\n                const childHit = this.processInteractive(interactionEvent, child, func, hitTest, interactiveParent, true);\n\n                if (childHit)\n                {\n                    // its a good idea to check if a child has lost its parent.\n                    // this means it has been removed whilst looping so its best\n                    if (!child.parent)\n                    {\n                        continue;\n                    }\n\n                    // we no longer need to hit test any more objects in this container as we we\n                    // now know the parent has been hit\n                    interactiveParent = false;\n\n                    // If the child is interactive , that means that the object hit was actually\n                    // interactive and not just the child of an interactive object.\n                    // This means we no longer need to hit test anything else. We still need to run\n                    // through all objects, but we don't need to perform any hit tests.\n\n                    if (childHit)\n                    {\n                        if (interactionEvent.target)\n                        {\n                            hitTest = false;\n                        }\n                        hit = true;\n                    }\n                }\n            }\n        }\n\n        // no point running this if the item is not interactive or does not have an interactive parent.\n        if (interactive)\n        {\n            // if we are hit testing (as in we have no hit any objects yet)\n            // We also don't need to worry about hit testing if once of the displayObjects children\n            // has already been hit - but only if it was interactive, otherwise we need to keep\n            // looking for an interactive child, just in case we hit one\n            if (hitTest && !interactionEvent.target)\n            {\n                // already tested against hitArea if it is defined\n                if (!displayObject.hitArea && displayObject.containsPoint)\n                {\n                    if (displayObject.containsPoint(point))\n                    {\n                        hit = true;\n                    }\n                }\n            }\n\n            if (displayObject.interactive)\n            {\n                if (hit && !interactionEvent.target)\n                {\n                    interactionEvent.target = displayObject;\n                }\n\n                if (func)\n                {\n                    func(interactionEvent, displayObject, !!hit);\n                }\n            }\n        }\n\n        const delayedEvents = this.delayedEvents;\n\n        if (delayedEvents.length && !skipDelayed)\n        {\n            // Reset the propagation hint, because we start deeper in the tree again.\n            interactionEvent.stopPropagationHint = false;\n\n            const delayedLen = delayedEvents.length;\n\n            this.delayedEvents = [];\n\n            for (let i = 0; i < delayedLen; i++)\n            {\n                const { displayObject, eventString, eventData } = delayedEvents[i];\n\n                // When we reach the object we wanted to stop propagating at,\n                // set the propagation hint.\n                if (eventData.stopsPropagatingAt === displayObject)\n                {\n                    eventData.stopPropagationHint = true;\n                }\n\n                this.dispatchEvent(displayObject, eventString, eventData);\n            }\n        }\n\n        return hit;\n    }\n\n    /**\n     * Is called when the pointer button is pressed down on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being pressed down\n     */\n    onPointerDown(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        /**\n         * No need to prevent default on natural pointer events, as there are no side effects\n         * Normalized events, however, may have the double mousedown/touchstart issue on the native android browser,\n         * so still need to be prevented.\n         */\n\n        // Guaranteed that there will be at least one event in events, and all events must have the same pointer type\n\n        if (this.autoPreventDefault && events[0].isNormalized)\n        {\n            const cancelable = originalEvent.cancelable || !('cancelable' in originalEvent);\n\n            if (cancelable)\n            {\n                originalEvent.preventDefault();\n            }\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerDown, true);\n\n            this.emit('pointerdown', interactionEvent);\n            if (event.pointerType === 'touch')\n            {\n                this.emit('touchstart', interactionEvent);\n            }\n            // emit a mouse event for \"pen\" pointers, the way a browser would emit a fallback event\n            else if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? 'rightdown' : 'mousedown', this.eventData);\n            }\n        }\n    }\n\n    /**\n     * Processes the result of the pointer down check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerDown(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n        const id = interactionEvent.data.identifier;\n\n        if (hit)\n        {\n            if (!displayObject.trackedPointers[id])\n            {\n                displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n            }\n            this.dispatchEvent(displayObject, 'pointerdown', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchstart', interactionEvent);\n            }\n            else if (data.pointerType === 'mouse' || data.pointerType === 'pen')\n            {\n                const isRightButton = data.button === 2;\n\n                if (isRightButton)\n                {\n                    displayObject.trackedPointers[id].rightDown = true;\n                }\n                else\n                {\n                    displayObject.trackedPointers[id].leftDown = true;\n                }\n\n                this.dispatchEvent(displayObject, isRightButton ? 'rightdown' : 'mousedown', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being released\n     * @param {boolean} cancelled - true if the pointer is cancelled\n     * @param {Function} func - Function passed to {@link processInteractive}\n     */\n    onPointerComplete(originalEvent, cancelled, func)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        const eventLen = events.length;\n\n        // if the event wasn't targeting our canvas, then consider it to be pointerupoutside\n        // in all cases (unless it was a pointercancel)\n        const eventAppend = originalEvent.target !== this.interactionDOMElement ? 'outside' : '';\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            // perform hit testing for events targeting our canvas or cancel events\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, func, cancelled || !eventAppend);\n\n            this.emit(cancelled ? 'pointercancel' : `pointerup${eventAppend}`, interactionEvent);\n\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n            {\n                const isRightButton = event.button === 2;\n\n                this.emit(isRightButton ? `rightup${eventAppend}` : `mouseup${eventAppend}`, interactionEvent);\n            }\n            else if (event.pointerType === 'touch')\n            {\n                this.emit(cancelled ? 'touchcancel' : `touchend${eventAppend}`, interactionEvent);\n                this.releaseInteractionDataForPointerId(event.pointerId, interactionData);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is cancelled\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerCancel(event)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n\n        this.onPointerComplete(event, true, this.processPointerCancel);\n    }\n\n    /**\n     * Processes the result of the pointer cancel check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     */\n    processPointerCancel(interactionEvent, displayObject)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        if (displayObject.trackedPointers[id] !== undefined)\n        {\n            delete displayObject.trackedPointers[id];\n            this.dispatchEvent(displayObject, 'pointercancel', interactionEvent);\n\n            if (data.pointerType === 'touch')\n            {\n                this.dispatchEvent(displayObject, 'touchcancel', interactionEvent);\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer button is released on the renderer element\n     *\n     * @private\n     * @param {PointerEvent} event - The DOM event of a pointer button being released\n     */\n    onPointerUp(event)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && event.pointerType === 'touch') return;\n\n        this.onPointerComplete(event, false, this.processPointerUp);\n    }\n\n    /**\n     * Processes the result of the pointer up check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerUp(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const trackingData = displayObject.trackedPointers[id];\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n        // need to track mouse down status in the mouse block so that we can emit\n        // event in a later block\n        let isMouseTap = false;\n\n        // Mouse only\n        if (isMouse)\n        {\n            const isRightButton = data.button === 2;\n\n            const flags = InteractionTrackingData.FLAGS;\n\n            const test = isRightButton ? flags.RIGHT_DOWN : flags.LEFT_DOWN;\n\n            const isDown = trackingData !== undefined && (trackingData.flags & test);\n\n            if (hit)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightup' : 'mouseup', interactionEvent);\n\n                if (isDown)\n                {\n                    this.dispatchEvent(displayObject, isRightButton ? 'rightclick' : 'click', interactionEvent);\n                    // because we can confirm that the mousedown happened on this object, flag for later emit of pointertap\n                    isMouseTap = true;\n                }\n            }\n            else if (isDown)\n            {\n                this.dispatchEvent(displayObject, isRightButton ? 'rightupoutside' : 'mouseupoutside', interactionEvent);\n            }\n            // update the down state of the tracking data\n            if (trackingData)\n            {\n                if (isRightButton)\n                {\n                    trackingData.rightDown = false;\n                }\n                else\n                {\n                    trackingData.leftDown = false;\n                }\n            }\n        }\n\n        // Pointers and Touches, and Mouse\n        if (hit)\n        {\n            this.dispatchEvent(displayObject, 'pointerup', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchend', interactionEvent);\n\n            if (trackingData)\n            {\n                // emit pointertap if not a mouse, or if the mouse block decided it was a tap\n                if (!isMouse || isMouseTap)\n                {\n                    this.dispatchEvent(displayObject, 'pointertap', interactionEvent);\n                }\n                if (isTouch)\n                {\n                    this.dispatchEvent(displayObject, 'tap', interactionEvent);\n                    // touches are no longer over (if they ever were) when we get the touchend\n                    // so we should ensure that we don't keep pretending that they are\n                    trackingData.over = false;\n                }\n            }\n        }\n        else if (trackingData)\n        {\n            this.dispatchEvent(displayObject, 'pointerupoutside', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchendoutside', interactionEvent);\n        }\n        // Only remove the tracking data if there is no over/down state still associated with it\n        if (trackingData && trackingData.none)\n        {\n            delete displayObject.trackedPointers[id];\n        }\n    }\n\n    /**\n     * Is called when the pointer moves across the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer moving\n     */\n    onPointerMove(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        if (events[0].pointerType === 'mouse' || events[0].pointerType === 'pen')\n        {\n            this.didMove = true;\n\n            this.cursor = null;\n        }\n\n        const eventLen = events.length;\n\n        for (let i = 0; i < eventLen; i++)\n        {\n            const event = events[i];\n\n            const interactionData = this.getInteractionDataForPointerId(event);\n\n            const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n            interactionEvent.data.originalEvent = originalEvent;\n\n            this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerMove, true);\n\n            this.emit('pointermove', interactionEvent);\n            if (event.pointerType === 'touch') this.emit('touchmove', interactionEvent);\n            if (event.pointerType === 'mouse' || event.pointerType === 'pen') this.emit('mousemove', interactionEvent);\n        }\n\n        if (events[0].pointerType === 'mouse')\n        {\n            this.setCursorMode(this.cursor);\n\n            // TODO BUG for parents interactive object (border order issue)\n        }\n    }\n\n    /**\n     * Processes the result of the pointer move check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerMove(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const isTouch = data.pointerType === 'touch';\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        if (isMouse)\n        {\n            this.processPointerOverOut(interactionEvent, displayObject, hit);\n        }\n\n        if (!this.moveWhenInside || hit)\n        {\n            this.dispatchEvent(displayObject, 'pointermove', interactionEvent);\n            if (isTouch) this.dispatchEvent(displayObject, 'touchmove', interactionEvent);\n            if (isMouse) this.dispatchEvent(displayObject, 'mousemove', interactionEvent);\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved out of the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer being moved out\n     */\n    onPointerOut(originalEvent)\n    {\n        // if we support touch events, then only use those for touch events, not pointer events\n        if (this.supportsTouchEvents && originalEvent.pointerType === 'touch') return;\n\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOut, so events will always be length 1\n        const event = events[0];\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = false;\n            this.setCursorMode(null);\n        }\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        this.processInteractive(interactionEvent, this.renderer._lastObjectRendered, this.processPointerOverOut, false);\n\n        this.emit('pointerout', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseout', interactionEvent);\n        }\n        else\n        {\n            // we can get touchleave events after touchend, so we want to make sure we don't\n            // introduce memory leaks\n            this.releaseInteractionDataForPointerId(interactionData.identifier);\n        }\n    }\n\n    /**\n     * Processes the result of the pointer over/out check and dispatches the event if need be\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The interaction event wrapping the DOM event\n     * @param {PIXI.Container|PIXI.Sprite|PIXI.TilingSprite} displayObject - The display object that was tested\n     * @param {boolean} hit - the result of the hit test on the display object\n     */\n    processPointerOverOut(interactionEvent, displayObject, hit)\n    {\n        const data = interactionEvent.data;\n\n        const id = interactionEvent.data.identifier;\n\n        const isMouse = (data.pointerType === 'mouse' || data.pointerType === 'pen');\n\n        let trackingData = displayObject.trackedPointers[id];\n\n        // if we just moused over the display object, then we need to track that state\n        if (hit && !trackingData)\n        {\n            trackingData = displayObject.trackedPointers[id] = new InteractionTrackingData(id);\n        }\n\n        if (trackingData === undefined) return;\n\n        if (hit && this.mouseOverRenderer)\n        {\n            if (!trackingData.over)\n            {\n                trackingData.over = true;\n                this.delayDispatchEvent(displayObject, 'pointerover', interactionEvent);\n                if (isMouse)\n                {\n                    this.delayDispatchEvent(displayObject, 'mouseover', interactionEvent);\n                }\n            }\n\n            // only change the cursor if it has not already been changed (by something deeper in the\n            // display tree)\n            if (isMouse && this.cursor === null)\n            {\n                this.cursor = displayObject.cursor;\n            }\n        }\n        else if (trackingData.over)\n        {\n            trackingData.over = false;\n            this.dispatchEvent(displayObject, 'pointerout', this.eventData);\n            if (isMouse)\n            {\n                this.dispatchEvent(displayObject, 'mouseout', interactionEvent);\n            }\n            // if there is no mouse down information for the pointer, then it is safe to delete\n            if (trackingData.none)\n            {\n                delete displayObject.trackedPointers[id];\n            }\n        }\n    }\n\n    /**\n     * Is called when the pointer is moved into the renderer element\n     *\n     * @private\n     * @param {PointerEvent} originalEvent - The DOM event of a pointer button being moved into the renderer view\n     */\n    onPointerOver(originalEvent)\n    {\n        const events = this.normalizeToPointerData(originalEvent);\n\n        // Only mouse and pointer can call onPointerOver, so events will always be length 1\n        const event = events[0];\n\n        const interactionData = this.getInteractionDataForPointerId(event);\n\n        const interactionEvent = this.configureInteractionEventForDOMEvent(this.eventData, event, interactionData);\n\n        interactionEvent.data.originalEvent = event;\n\n        if (event.pointerType === 'mouse')\n        {\n            this.mouseOverRenderer = true;\n        }\n\n        this.emit('pointerover', interactionEvent);\n        if (event.pointerType === 'mouse' || event.pointerType === 'pen')\n        {\n            this.emit('mouseover', interactionEvent);\n        }\n    }\n\n    /**\n     * Get InteractionData for a given pointerId. Store that data as well\n     *\n     * @private\n     * @param {PointerEvent} event - Normalized pointer event, output from normalizeToPointerData\n     * @return {PIXI.interaction.InteractionData} - Interaction data for the given pointer identifier\n     */\n    getInteractionDataForPointerId(event)\n    {\n        const pointerId = event.pointerId;\n\n        let interactionData;\n\n        if (pointerId === MOUSE_POINTER_ID || event.pointerType === 'mouse')\n        {\n            interactionData = this.mouse;\n        }\n        else if (this.activeInteractionData[pointerId])\n        {\n            interactionData = this.activeInteractionData[pointerId];\n        }\n        else\n        {\n            interactionData = this.interactionDataPool.pop() || new InteractionData();\n            interactionData.identifier = pointerId;\n            this.activeInteractionData[pointerId] = interactionData;\n        }\n        // copy properties from the event, so that we can make sure that touch/pointer specific\n        // data is available\n        interactionData.copyEvent(event);\n\n        return interactionData;\n    }\n\n    /**\n     * Return unused InteractionData to the pool, for a given pointerId\n     *\n     * @private\n     * @param {number} pointerId - Identifier from a pointer event\n     */\n    releaseInteractionDataForPointerId(pointerId)\n    {\n        const interactionData = this.activeInteractionData[pointerId];\n\n        if (interactionData)\n        {\n            delete this.activeInteractionData[pointerId];\n            interactionData.reset();\n            this.interactionDataPool.push(interactionData);\n        }\n    }\n\n    /**\n     * Configure an InteractionEvent to wrap a DOM PointerEvent and InteractionData\n     *\n     * @private\n     * @param {PIXI.interaction.InteractionEvent} interactionEvent - The event to be configured\n     * @param {PointerEvent} pointerEvent - The DOM event that will be paired with the InteractionEvent\n     * @param {PIXI.interaction.InteractionData} interactionData - The InteractionData that will be paired\n     *        with the InteractionEvent\n     * @return {PIXI.interaction.InteractionEvent} the interaction event that was passed in\n     */\n    configureInteractionEventForDOMEvent(interactionEvent, pointerEvent, interactionData)\n    {\n        interactionEvent.data = interactionData;\n\n        this.mapPositionToPoint(interactionData.global, pointerEvent.clientX, pointerEvent.clientY);\n\n        // Not really sure why this is happening, but it's how a previous version handled things\n        if (pointerEvent.pointerType === 'touch')\n        {\n            pointerEvent.globalX = interactionData.global.x;\n            pointerEvent.globalY = interactionData.global.y;\n        }\n\n        interactionData.originalEvent = pointerEvent;\n        interactionEvent.reset();\n\n        return interactionEvent;\n    }\n\n    /**\n     * Ensures that the original event object contains all data that a regular pointer event would have\n     *\n     * @private\n     * @param {TouchEvent|MouseEvent|PointerEvent} event - The original event data from a touch or mouse event\n     * @return {PointerEvent[]} An array containing a single normalized pointer event, in the case of a pointer\n     *  or mouse event, or a multiple normalized pointer events if there are multiple changed touches\n     */\n    normalizeToPointerData(event)\n    {\n        const normalizedEvents = [];\n\n        if (this.supportsTouchEvents && event instanceof TouchEvent)\n        {\n            for (let i = 0, li = event.changedTouches.length; i < li; i++)\n            {\n                const touch = event.changedTouches[i];\n\n                if (typeof touch.button === 'undefined') touch.button = event.touches.length ? 1 : 0;\n                if (typeof touch.buttons === 'undefined') touch.buttons = event.touches.length ? 1 : 0;\n                if (typeof touch.isPrimary === 'undefined')\n                {\n                    touch.isPrimary = event.touches.length === 1 && event.type === 'touchstart';\n                }\n                if (typeof touch.width === 'undefined') touch.width = touch.radiusX || 1;\n                if (typeof touch.height === 'undefined') touch.height = touch.radiusY || 1;\n                if (typeof touch.tiltX === 'undefined') touch.tiltX = 0;\n                if (typeof touch.tiltY === 'undefined') touch.tiltY = 0;\n                if (typeof touch.pointerType === 'undefined') touch.pointerType = 'touch';\n                if (typeof touch.pointerId === 'undefined') touch.pointerId = touch.identifier || 0;\n                if (typeof touch.pressure === 'undefined') touch.pressure = touch.force || 0.5;\n                if (typeof touch.twist === 'undefined') touch.twist = 0;\n                if (typeof touch.tangentialPressure === 'undefined') touch.tangentialPressure = 0;\n                // TODO: Remove these, as layerX/Y is not a standard, is deprecated, has uneven\n                // support, and the fill ins are not quite the same\n                // offsetX/Y might be okay, but is not the same as clientX/Y when the canvas's top\n                // left is not 0,0 on the page\n                if (typeof touch.layerX === 'undefined') touch.layerX = touch.offsetX = touch.clientX;\n                if (typeof touch.layerY === 'undefined') touch.layerY = touch.offsetY = touch.clientY;\n\n                // mark the touch as normalized, just so that we know we did it\n                touch.isNormalized = true;\n\n                normalizedEvents.push(touch);\n            }\n        }\n        // apparently PointerEvent subclasses MouseEvent, so yay\n        else if (event instanceof MouseEvent && (!this.supportsPointerEvents || !(event instanceof window.PointerEvent)))\n        {\n            if (typeof event.isPrimary === 'undefined') event.isPrimary = true;\n            if (typeof event.width === 'undefined') event.width = 1;\n            if (typeof event.height === 'undefined') event.height = 1;\n            if (typeof event.tiltX === 'undefined') event.tiltX = 0;\n            if (typeof event.tiltY === 'undefined') event.tiltY = 0;\n            if (typeof event.pointerType === 'undefined') event.pointerType = 'mouse';\n            if (typeof event.pointerId === 'undefined') event.pointerId = MOUSE_POINTER_ID;\n            if (typeof event.pressure === 'undefined') event.pressure = 0.5;\n            if (typeof event.twist === 'undefined') event.twist = 0;\n            if (typeof event.tangentialPressure === 'undefined') event.tangentialPressure = 0;\n\n            // mark the mouse event as normalized, just so that we know we did it\n            event.isNormalized = true;\n\n            normalizedEvents.push(event);\n        }\n        else\n        {\n            normalizedEvents.push(event);\n        }\n\n        return normalizedEvents;\n    }\n\n    /**\n     * Destroys the interaction manager\n     *\n     */\n    destroy()\n    {\n        this.removeEvents();\n\n        this.removeAllListeners();\n\n        this.renderer = null;\n\n        this.mouse = null;\n\n        this.eventData = null;\n\n        this.interactionDOMElement = null;\n\n        this.onPointerDown = null;\n        this.processPointerDown = null;\n\n        this.onPointerUp = null;\n        this.processPointerUp = null;\n\n        this.onPointerCancel = null;\n        this.processPointerCancel = null;\n\n        this.onPointerMove = null;\n        this.processPointerMove = null;\n\n        this.onPointerOut = null;\n        this.processPointerOverOut = null;\n\n        this.onPointerOver = null;\n\n        this._tempPoint = null;\n    }\n}\n"],"names":["InteractionData","this","global","Point","target","originalEvent","identifier","isPrimary","button","buttons","width","height","tiltX","tiltY","pointerType","pressure","rotationAngle","twist","tangentialPressure","prototypeAccessors","pointerId","getLocalPosition","displayObject","point","globalPos","worldTransform","applyInverse","copyEvent","event","Number","isInteger","which","reset","InteractionEvent","stopped","stopsPropagatingAt","stopPropagationHint","currentTarget","type","data","stopPropagation","InteractionTrackingData","_pointerId","_flags","FLAGS","NONE","_doSet","flag","yn","flags","none","constructor","over","OVER","rightDown","RIGHT_DOWN","leftDown","LEFT_DOWN","Object","freeze","interactive","interactiveChildren","hitArea","buttonMode","cursor","value","trackedPointers","undefined","_trackedPointers","mixin","interactiveTarget","const","MOUSE_POINTER_ID","hitTestEvent","InteractionManager","renderer","options","super","autoPreventDefault","interactionFrequency","mouse","set","activeInteractionData","interactionDataPool","eventData","interactionDOMElement","moveWhenInside","eventsAdded","mouseOverRenderer","supportsTouchEvents","window","supportsPointerEvents","PointerEvent","onPointerUp","bind","processPointerUp","onPointerCancel","processPointerCancel","onPointerDown","processPointerDown","onPointerMove","processPointerMove","onPointerOut","processPointerOverOut","onPointerOver","cursorStyles","default","pointer","currentCursorMode","_tempPoint","resolution","delayedEvents","setTargetElement","view","hitTest","globalPoint","root","_lastObjectRendered","processInteractive","element","removeEvents","addEvents","Ticker","system","add","update","UPDATE_PRIORITY","INTERACTION","navigator","msPointerEnabled","style","document","addEventListener","remove","removeEventListener","deltaTime","_deltaTime","didMove","k","hasOwnProperty","interactionData","interactionEvent","configureInteractionEventForDOMEvent","setCursorMode","mode","assign","prototype","call","dispatchEvent","eventString","emit","delayDispatchEvent","push","mapPositionToPoint","x","y","let","rect","parentElement","getBoundingClientRect","resolutionMultiplier","left","top","func","skipDelayed","visible","hit","interactiveParent","hitTestChildren","contains","_mask","containsPoint","children","i","length","child","childHit","parent","delayedLen","events","normalizeToPointerData","isNormalized","cancelable","preventDefault","eventLen","getInteractionDataForPointerId","isRightButton","id","onPointerComplete","cancelled","eventAppend","releaseInteractionDataForPointerId","trackingData","isTouch","isMouse","isMouseTap","test","isDown","pop","pointerEvent","clientX","clientY","globalX","globalY","normalizedEvents","TouchEvent","li","changedTouches","touch","touches","radiusX","radiusY","force","layerX","offsetX","layerY","offsetY","MouseEvent","destroy","removeAllListeners","EventEmitter"],"mappings":"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"}