{"version":3,"file":"core.min.js","sources":["../src/textures/resources/Resource.js","../src/textures/resources/BaseImageResource.js","../src/textures/resources/ImageResource.js","../src/textures/resources/autoDetectResource.js","../src/textures/resources/BufferResource.js","../src/textures/BaseTexture.js","../src/textures/resources/ArrayResource.js","../src/textures/resources/CanvasResource.js","../src/textures/resources/CubeResource.js","../src/textures/resources/SVGResource.js","../src/textures/resources/VideoResource.js","../src/textures/resources/ImageBitmapResource.js","../src/textures/resources/index.js","../src/System.js","../src/textures/resources/DepthResource.js","../src/framebuffer/Framebuffer.js","../src/renderTexture/BaseRenderTexture.js","../src/textures/TextureUvs.js","../src/textures/Texture.js","../src/renderTexture/RenderTexture.js","../src/renderTexture/RenderTexturePool.js","../src/geometry/Attribute.js","../src/geometry/Buffer.js","../src/geometry/utils/getBufferType.js","../src/geometry/utils/interleaveTypedArrays.js","../src/geometry/Geometry.js","../src/utils/Quad.js","../src/utils/QuadUv.js","../src/shader/UniformGroup.js","../src/filters/FilterSystem.js","../src/batch/ObjectRenderer.js","../src/batch/BatchSystem.js","../src/settings.js","../src/context/ContextSystem.js","../src/framebuffer/FramebufferSystem.js","../src/geometry/GLBuffer.js","../src/geometry/GeometrySystem.js","../src/shader/utils/compileProgram.js","../src/shader/utils/defaultValue.js","../src/shader/utils/getTestContext.js","../src/shader/utils/getMaxFragmentPrecision.js","../src/shader/utils/setPrecision.js","../src/shader/utils/mapSize.js","../src/shader/utils/mapType.js","../src/shader/utils/generateUniformsSync.js","../src/shader/utils/checkMaxIfStatementsInShader.js","../src/shader/utils/unsafeEvalSupported.js","../src/shader/Program.js","../src/shader/Shader.js","../src/state/State.js","../src/filters/Filter.js","../src/textures/TextureMatrix.js","../src/filters/spriteMask/SpriteMaskFilter.js","../src/mask/MaskSystem.js","../src/mask/StencilSystem.js","../src/projection/ProjectionSystem.js","../src/renderTexture/RenderTextureSystem.js","../src/shader/GLProgram.js","../src/shader/ShaderSystem.js","../src/state/StateSystem.js","../src/state/utils/mapWebGLBlendModesToPixi.js","../src/textures/TextureGCSystem.js","../src/textures/GLTexture.js","../src/textures/TextureSystem.js","../src/AbstractRenderer.js","../src/Renderer.js","../src/textures/CubeTexture.js","../src/batch/BatchDrawCall.js","../src/geometry/ViewableBuffer.js","../src/batch/AbstractBatchRenderer.js","../src/batch/BatchShaderGenerator.js","../src/batch/BatchGeometry.js","../src/batch/BatchPluginFactory.js","../src/autoDetectRenderer.js"],"sourcesContent":["import { Runner } from '@pixi/runner';\n\n/**\n * Base resource class for textures that manages validation and uploading, depending on its type.\n *\n * Uploading of a base texture to the GPU is required.\n *\n * @class\n * @memberof PIXI.resources\n */\nexport default class Resource\n{\n    /**\n     * @param {number} [width=0] Width of the resource\n     * @param {number} [height=0] Height of the resource\n     */\n    constructor(width = 0, height = 0)\n    {\n        /**\n         * Internal width of the resource\n         * @member {number}\n         * @protected\n         */\n        this._width = width;\n\n        /**\n         * Internal height of the resource\n         * @member {number}\n         * @protected\n         */\n        this._height = height;\n\n        /**\n         * If resource has been destroyed\n         * @member {boolean}\n         * @readonly\n         * @default false\n         */\n        this.destroyed = false;\n\n        /**\n         * `true` if resource is created by BaseTexture\n         * useful for doing cleanup with BaseTexture destroy\n         * and not cleaning up resources that were created\n         * externally.\n         * @member {boolean}\n         * @protected\n         */\n        this.internal = false;\n\n        /**\n         * Mini-runner for handling resize events\n         *\n         * @member {Runner}\n         * @private\n         */\n        this.onResize = new Runner('setRealSize', 2);\n\n        /**\n         * Mini-runner for handling update events\n         *\n         * @member {Runner}\n         * @private\n         */\n        this.onUpdate = new Runner('update');\n\n        /**\n         * Handle internal errors, such as loading errors\n         *\n         * @member {Runner}\n         * @private\n         */\n        this.onError = new Runner('onError', 1);\n    }\n\n    /**\n     * Bind to a parent BaseTexture\n     *\n     * @param {PIXI.BaseTexture} baseTexture - Parent texture\n     */\n    bind(baseTexture)\n    {\n        this.onResize.add(baseTexture);\n        this.onUpdate.add(baseTexture);\n        this.onError.add(baseTexture);\n\n        // Call a resize immediate if we already\n        // have the width and height of the resource\n        if (this._width || this._height)\n        {\n            this.onResize.run(this._width, this._height);\n        }\n    }\n\n    /**\n     * Unbind to a parent BaseTexture\n     *\n     * @param {PIXI.BaseTexture} baseTexture - Parent texture\n     */\n    unbind(baseTexture)\n    {\n        this.onResize.remove(baseTexture);\n        this.onUpdate.remove(baseTexture);\n        this.onError.remove(baseTexture);\n    }\n\n    /**\n     * Trigger a resize event\n     * @param {number} width X dimension\n     * @param {number} height Y dimension\n     */\n    resize(width, height)\n    {\n        if (width !== this._width || height !== this._height)\n        {\n            this._width = width;\n            this._height = height;\n            this.onResize.run(width, height);\n        }\n    }\n\n    /**\n     * Has been validated\n     * @readonly\n     * @member {boolean}\n     */\n    get valid()\n    {\n        return !!this._width && !!this._height;\n    }\n\n    /**\n     * Has been updated trigger event\n     */\n    update()\n    {\n        if (!this.destroyed)\n        {\n            this.onUpdate.run();\n        }\n    }\n\n    /**\n     * This can be overridden to start preloading a resource\n     * or do any other prepare step.\n     * @protected\n     * @return {Promise<void>} Handle the validate event\n     */\n    load()\n    {\n        return Promise.resolve();\n    }\n\n    /**\n     * The width of the resource.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get width()\n    {\n        return this._width;\n    }\n\n    /**\n     * The height of the resource.\n     *\n     * @member {number}\n     * @readonly\n     */\n    get height()\n    {\n        return this._height;\n    }\n\n    /**\n     * Uploads the texture or returns false if it cant for some reason. Override this.\n     *\n     * @param {PIXI.Renderer} renderer - yeah, renderer!\n     * @param {PIXI.BaseTexture} baseTexture - the texture\n     * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n     * @returns {boolean} true is success\n     */\n    upload(renderer, baseTexture, glTexture) // eslint-disable-line no-unused-vars\n    {\n        return false;\n    }\n\n    /**\n     * Set the style, optional to override\n     *\n     * @param {PIXI.Renderer} renderer - yeah, renderer!\n     * @param {PIXI.BaseTexture} baseTexture - the texture\n     * @param {PIXI.GLTexture} glTexture - texture instance for this webgl context\n     * @returns {boolean} `true` is success\n     */\n    style(renderer, baseTexture, glTexture) // eslint-disable-line no-unused-vars\n    {\n        return false;\n    }\n\n    /**\n     * Clean up anything, this happens when destroying is ready.\n     *\n     * @protected\n     */\n    dispose()\n    {\n        // override\n    }\n\n    /**\n     * Call when destroying resource, unbind any BaseTexture object\n     * before calling this method, as reference counts are maintained\n     * internally.\n     */\n    destroy()\n    {\n        if (!this.destroyed)\n        {\n            this.destroyed = true;\n            this.dispose();\n            this.onError.removeAll();\n            this.onError = null;\n            this.onResize.removeAll();\n            this.onResize = null;\n            this.onUpdate.removeAll();\n            this.onUpdate = null;\n        }\n    }\n}\n","import Resource from './Resource';\nimport { determineCrossOrigin } from '@pixi/utils';\n\n/**\n * Base for all the image/canvas resources\n * @class\n * @extends PIXI.resources.Resource\n * @memberof PIXI.resources\n */\nexport default class BaseImageResource extends Resource\n{\n    /**\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} source\n     */\n    constructor(source)\n    {\n        const width = source.naturalWidth || source.videoWidth || source.width;\n        const height = source.naturalHeight || source.videoHeight || source.height;\n\n        super(width, height);\n\n        /**\n         * The source element\n         * @member {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement}\n         * @readonly\n         */\n        this.source = source;\n\n        /**\n         * If set to `true`, will force `texImage2D` over `texSubImage2D` for uploading.\n         * Certain types of media (e.g. video) using `texImage2D` is more performant.\n         * @member {boolean}\n         * @default false\n         * @private\n         */\n        this.noSubImage = false;\n    }\n\n    /**\n     * Set cross origin based detecting the url and the crossorigin\n     * @protected\n     * @param {HTMLElement} element - Element to apply crossOrigin\n     * @param {string} url - URL to check\n     * @param {boolean|string} [crossorigin=true] - Cross origin value to use\n     */\n    static crossOrigin(element, url, crossorigin)\n    {\n        if (crossorigin === undefined && url.indexOf('data:') !== 0)\n        {\n            element.crossOrigin = determineCrossOrigin(url);\n        }\n        else if (crossorigin !== false)\n        {\n            element.crossOrigin = typeof crossorigin === 'string' ? crossorigin : 'anonymous';\n        }\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param {PIXI.Renderer} renderer Upload to the renderer\n     * @param {PIXI.BaseTexture} baseTexture Reference to parent texture\n     * @param {PIXI.GLTexture} glTexture\n     * @param {HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|SVGElement} [source] (optional)\n     * @returns {boolean} true is success\n     */\n    upload(renderer, baseTexture, glTexture, source)\n    {\n        const gl = renderer.gl;\n        const width = baseTexture.realWidth;\n        const height = baseTexture.realHeight;\n\n        source = source || this.source;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.premultiplyAlpha);\n\n        if (!this.noSubImage\n            && baseTexture.target === gl.TEXTURE_2D\n            && glTexture.width === width\n            && glTexture.height === height)\n        {\n            gl.texSubImage2D(gl.TEXTURE_2D, 0, 0, 0, baseTexture.format, baseTexture.type, source);\n        }\n        else\n        {\n            glTexture.width = width;\n            glTexture.height = height;\n\n            gl.texImage2D(baseTexture.target, 0, baseTexture.format, baseTexture.format, baseTexture.type, source);\n        }\n\n        return true;\n    }\n\n    /**\n     * Checks if source width/height was changed, resize can cause extra baseTexture update.\n     * Triggers one update in any case.\n     */\n    update()\n    {\n        if (this.destroyed)\n        {\n            return;\n        }\n\n        const width = this.source.naturalWidth || this.source.videoWidth || this.source.width;\n        const height = this.source.naturalHeight || this.source.videoHeight || this.source.height;\n\n        this.resize(width, height);\n\n        super.update();\n    }\n\n    /**\n     * Destroy this BaseImageResource\n     * @override\n     * @param {PIXI.BaseTexture} [fromTexture] Optional base texture\n     * @return {boolean} Destroy was successful\n     */\n    dispose()\n    {\n        this.source = null;\n    }\n}\n","import BaseImageResource from './BaseImageResource';\nimport { settings } from '@pixi/settings';\n\n/**\n * Resource type for HTMLImageElement.\n * @class\n * @extends PIXI.resources.BaseImageResource\n * @memberof PIXI.resources\n */\nexport default class ImageResource extends BaseImageResource\n{\n    /**\n     * @param {HTMLImageElement|string} source - image source or URL\n     * @param {boolean} [options.autoLoad=true] start loading process\n     * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] whether its required to create\n     *        a bitmap before upload\n     * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n     * @param {boolean} [options.premultiplyAlpha=true] - Premultiply image alpha in bitmap\n     */\n    constructor(source, options)\n    {\n        options = options || {};\n\n        if (!(source instanceof HTMLImageElement))\n        {\n            const imageElement = new Image();\n\n            BaseImageResource.crossOrigin(imageElement, source, options.crossorigin);\n\n            imageElement.src = source;\n            source = imageElement;\n        }\n\n        super(source);\n\n        // FireFox 68, and possibly other versions, seems like setting the HTMLImageElement#width and #height\n        // to non-zero values before its loading completes if images are in a cache.\n        // Because of this, need to set the `_width` and the `_height` to zero to avoid uploading incomplete images.\n        // Please refer to the issue #5968 (https://github.com/pixijs/pixi.js/issues/5968).\n        if (!source.complete && !!this._width && !!this._height)\n        {\n            this._width = 0;\n            this._height = 0;\n        }\n\n        /**\n         * URL of the image source\n         * @member {string}\n         */\n        this.url = source.src;\n\n        /**\n         * When process is completed\n         * @member {Promise<void>}\n         * @private\n         */\n        this._process = null;\n\n        /**\n         * If the image should be disposed after upload\n         * @member {boolean}\n         * @default false\n         */\n        this.preserveBitmap = false;\n\n        /**\n         * If capable, convert the image using createImageBitmap API\n         * @member {boolean}\n         * @default PIXI.settings.CREATE_IMAGE_BITMAP\n         */\n        this.createBitmap = (options.createBitmap !== undefined\n            ? options.createBitmap : settings.CREATE_IMAGE_BITMAP) && !!window.createImageBitmap;\n\n        /**\n         * Controls texture premultiplyAlpha field\n         * Copies from options\n         * @member {boolean|null}\n         * @readonly\n         */\n        this.premultiplyAlpha = options.premultiplyAlpha !== false;\n\n        /**\n         * The ImageBitmap element created for HTMLImageElement\n         * @member {ImageBitmap}\n         * @default null\n         */\n        this.bitmap = null;\n\n        /**\n         * Promise when loading\n         * @member {Promise<void>}\n         * @private\n         * @default null\n         */\n        this._load = null;\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * returns a promise when image will be loaded and processed\n     *\n     * @param {boolean} [createBitmap=true] whether process image into bitmap\n     * @returns {Promise<void>}\n     */\n    load(createBitmap)\n    {\n        if (createBitmap !== undefined)\n        {\n            this.createBitmap = createBitmap;\n        }\n\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        this._load = new Promise((resolve) =>\n        {\n            this.url = this.source.src;\n            const { source } = this;\n\n            const completed = () =>\n            {\n                if (this.destroyed)\n                {\n                    return;\n                }\n                source.onload = null;\n                source.onerror = null;\n\n                this.resize(source.width, source.height);\n                this._load = null;\n\n                if (this.createBitmap)\n                {\n                    resolve(this.process());\n                }\n                else\n                {\n                    resolve(this);\n                }\n            };\n\n            if (source.complete && source.src)\n            {\n                completed();\n            }\n            else\n            {\n                source.onload = completed;\n                source.onerror = (event) => this.onError.run(event);\n            }\n        });\n\n        return this._load;\n    }\n\n    /**\n     * Called when we need to convert image into BitmapImage.\n     * Can be called multiple times, real promise is cached inside.\n     *\n     * @returns {Promise<void>} cached promise to fill that bitmap\n     */\n    process()\n    {\n        if (this._process !== null)\n        {\n            return this._process;\n        }\n        if (this.bitmap !== null || !window.createImageBitmap)\n        {\n            return Promise.resolve(this);\n        }\n\n        this._process = window.createImageBitmap(this.source,\n            0, 0, this.source.width, this.source.height,\n            {\n                premultiplyAlpha: this.premultiplyAlpha ? 'premultiply' : 'none',\n            })\n            .then((bitmap) =>\n            {\n                if (this.destroyed)\n                {\n                    return Promise.reject();\n                }\n                this.bitmap = bitmap;\n                this.update();\n                this._process = null;\n\n                return Promise.resolve(this);\n            });\n\n        return this._process;\n    }\n\n    /**\n     * Upload the image resource to GPU.\n     *\n     * @param {PIXI.Renderer} renderer - Renderer to upload to\n     * @param {PIXI.BaseTexture} baseTexture - BaseTexture for this resource\n     * @param {PIXI.GLTexture} glTexture - GLTexture to use\n     * @returns {boolean} true is success\n     */\n    upload(renderer, baseTexture, glTexture)\n    {\n        baseTexture.premultiplyAlpha = this.premultiplyAlpha;\n\n        if (!this.createBitmap)\n        {\n            return super.upload(renderer, baseTexture, glTexture);\n        }\n        if (!this.bitmap)\n        {\n            // yeah, ignore the output\n            this.process();\n            if (!this.bitmap)\n            {\n                return false;\n            }\n        }\n\n        super.upload(renderer, baseTexture, glTexture, this.bitmap);\n\n        if (!this.preserveBitmap)\n        {\n            // checks if there are other renderers that possibly need this bitmap\n\n            let flag = true;\n\n            for (const key in baseTexture._glTextures)\n            {\n                const otherTex = baseTexture._glTextures[key];\n\n                if (otherTex !== glTexture && otherTex.dirtyId !== baseTexture.dirtyId)\n                {\n                    flag = false;\n                    break;\n                }\n            }\n\n            if (flag)\n            {\n                if (this.bitmap.close)\n                {\n                    this.bitmap.close();\n                }\n\n                this.bitmap = null;\n            }\n        }\n\n        return true;\n    }\n\n    /**\n     * Destroys this texture\n     * @override\n     */\n    dispose()\n    {\n        this.source.onload = null;\n        this.source.onerror = null;\n\n        super.dispose();\n\n        if (this.bitmap)\n        {\n            this.bitmap.close();\n            this.bitmap = null;\n        }\n        this._process = null;\n        this._load = null;\n    }\n}\n","import ImageResource from './ImageResource';\n\n/**\n * Collection of installed resource types, class must extend {@link PIXI.resources.Resource}.\n * @example\n * class CustomResource extends PIXI.resources.Resource {\n *   // MUST have source, options constructor signature\n *   // for auto-detected resources to be created.\n *   constructor(source, options) {\n *     super();\n *   }\n *   upload(renderer, baseTexture, glTexture) {\n *     // upload with GL\n *     return true;\n *   }\n *   // used to auto-detect resource\n *   static test(source, extension) {\n *     return extension === 'xyz'|| source instanceof SomeClass;\n *   }\n * }\n * // Install the new resource type\n * PIXI.resources.INSTALLED.push(CustomResource);\n *\n * @name PIXI.resources.INSTALLED\n * @type {Array<*>}\n * @static\n * @readonly\n */\nexport const INSTALLED = [];\n\n/**\n * Create a resource element from a single source element. This\n * auto-detects which type of resource to create. All resources that\n * are auto-detectable must have a static `test` method and a constructor\n * with the arguments `(source, options?)`. Currently, the supported\n * resources for auto-detection include:\n *  - {@link PIXI.resources.ImageResource}\n *  - {@link PIXI.resources.CanvasResource}\n *  - {@link PIXI.resources.VideoResource}\n *  - {@link PIXI.resources.SVGResource}\n *  - {@link PIXI.resources.BufferResource}\n * @static\n * @function PIXI.resources.autoDetectResource\n * @param {string|*} source - Resource source, this can be the URL to the resource,\n *        a typed-array (for BufferResource), HTMLVideoElement, SVG data-uri\n *        or any other resource that can be auto-detected. If not resource is\n *        detected, it's assumed to be an ImageResource.\n * @param {object} [options] - Pass-through options to use for Resource\n * @param {number} [options.width] - Width of BufferResource or SVG rasterization\n * @param {number} [options.height] - Height of BufferResource or SVG rasterization\n * @param {boolean} [options.autoLoad=true] - Image, SVG and Video flag to start loading\n * @param {number} [options.scale=1] - SVG source scale. Overridden by width, height\n * @param {boolean} [options.createBitmap=PIXI.settings.CREATE_IMAGE_BITMAP] - Image option to create Bitmap object\n * @param {boolean} [options.crossorigin=true] - Image and Video option to set crossOrigin\n * @param {boolean} [options.autoPlay=true] - Video option to start playing video immediately\n * @param {number} [options.updateFPS=0] - Video option to update how many times a second the\n *        texture should be updated from the video. Leave at 0 to update at every render\n * @return {PIXI.resources.Resource} The created resource.\n */\nexport function autoDetectResource(source, options)\n{\n    if (!source)\n    {\n        return null;\n    }\n\n    let extension = '';\n\n    if (typeof source === 'string')\n    {\n        // search for file extension: period, 3-4 chars, then ?, # or EOL\n        const result = (/\\.(\\w{3,4})(?:$|\\?|#)/i).exec(source);\n\n        if (result)\n        {\n            extension = result[1].toLowerCase();\n        }\n    }\n\n    for (let i = INSTALLED.length - 1; i >= 0; --i)\n    {\n        const ResourcePlugin = INSTALLED[i];\n\n        if (ResourcePlugin.test && ResourcePlugin.test(source, extension))\n        {\n            return new ResourcePlugin(source, options);\n        }\n    }\n\n    // When in doubt: probably an image\n    // might be appropriate to throw an error or return null\n    return new ImageResource(source, options);\n}\n","import Resource from './Resource';\n\n/**\n * @interface SharedArrayBuffer\n */\n\n/**\n * Buffer resource with data of typed array.\n * @class\n * @extends PIXI.resources.Resource\n * @memberof PIXI.resources\n */\nexport default class BufferResource extends Resource\n{\n    /**\n     * @param {Float32Array|Uint8Array|Uint32Array} source - Source buffer\n     * @param {object} options - Options\n     * @param {number} options.width - Width of the texture\n     * @param {number} options.height - Height of the texture\n     */\n    constructor(source, options)\n    {\n        const { width, height } = options || {};\n\n        if (!width || !height)\n        {\n            throw new Error('BufferResource width or height invalid');\n        }\n\n        super(width, height);\n\n        /**\n         * Source array\n         * Cannot be ClampedUint8Array because it cant be uploaded to WebGL\n         *\n         * @member {Float32Array|Uint8Array|Uint32Array}\n         */\n        this.data = source;\n    }\n\n    /**\n     * Upload the texture to the GPU.\n     * @param {PIXI.Renderer} renderer Upload to the renderer\n     * @param {PIXI.BaseTexture} baseTexture Reference to parent texture\n     * @param {PIXI.GLTexture} glTexture glTexture\n     * @returns {boolean} true is success\n     */\n    upload(renderer, baseTexture, glTexture)\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.premultiplyAlpha);\n\n        if (glTexture.width === baseTexture.width && glTexture.height === baseTexture.height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                baseTexture.width,\n                baseTexture.height,\n                baseTexture.format,\n                baseTexture.type,\n                this.data\n            );\n        }\n        else\n        {\n            glTexture.width = baseTexture.width;\n            glTexture.height = baseTexture.height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                glTexture.internalFormat,\n                baseTexture.width,\n                baseTexture.height,\n                0,\n                baseTexture.format,\n                glTexture.type,\n                this.data\n            );\n        }\n\n        return true;\n    }\n\n    /**\n     * Destroy and don't use after this\n     * @override\n     */\n    dispose()\n    {\n        this.data = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     *\n     * @static\n     * @param {*} source - The source object\n     * @return {boolean} `true` if <canvas>\n     */\n    static test(source)\n    {\n        return source instanceof Float32Array\n            || source instanceof Uint8Array\n            || source instanceof Uint32Array;\n    }\n}\n","import { BaseTextureCache, EventEmitter, isPow2, TextureCache, uid } from '@pixi/utils';\nimport { FORMATS, SCALE_MODES, TARGETS, TYPES } from '@pixi/constants';\n\nimport Resource from './resources/Resource';\nimport BufferResource from './resources/BufferResource';\nimport { autoDetectResource } from './resources/autoDetectResource';\n\nimport { settings } from '@pixi/settings';\n\nconst defaultBufferOptions = {\n    scaleMode: SCALE_MODES.NEAREST,\n    format: FORMATS.RGBA,\n    premultiplyAlpha: false,\n};\n\n/**\n * A Texture stores the information that represents an image.\n * All textures have a base texture, which contains information about the source.\n * Therefore you can have many textures all using a single BaseTexture\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n * @param {PIXI.resources.Resource|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement} [resource=null]\n *        The current resource to use, for things that aren't Resource objects, will be converted\n *        into a Resource.\n * @param {Object} [options] - Collection of options\n * @param {PIXI.MIPMAP_MODES} [options.mipmap=PIXI.settings.MIPMAP_TEXTURES] - If mipmapping is enabled for texture\n * @param {number} [options.anisotropicLevel=PIXI.settings.ANISOTROPIC_LEVEL] - Anisotropic filtering level of texture\n * @param {PIXI.WRAP_MODES} [options.wrapMode=PIXI.settings.WRAP_MODE] - Wrap mode for textures\n * @param {PIXI.SCALE_MODES} [options.scaleMode=PIXI.settings.SCALE_MODE] - Default scale mode, linear, nearest\n * @param {PIXI.FORMATS} [options.format=PIXI.FORMATS.RGBA] - GL format type\n * @param {PIXI.TYPES} [options.type=PIXI.TYPES.UNSIGNED_BYTE] - GL data type\n * @param {PIXI.TARGETS} [options.target=PIXI.TARGETS.TEXTURE_2D] - GL texture target\n * @param {boolean} [options.premultiplyAlpha=true] - Pre multiply the image alpha\n * @param {number} [options.width=0] - Width of the texture\n * @param {number} [options.height=0] - Height of the texture\n * @param {number} [options.resolution] - Resolution of the base texture\n * @param {object} [options.resourceOptions] - Optional resource options,\n *        see {@link PIXI.resources.autoDetectResource autoDetectResource}\n */\nexport default class BaseTexture extends EventEmitter\n{\n    constructor(resource = null, options = null)\n    {\n        super();\n\n        options = options || {};\n\n        const { premultiplyAlpha, mipmap, anisotropicLevel, scaleMode, width, height,\n            wrapMode, format, type, target, resolution, resourceOptions } = options;\n\n        // Convert the resource to a Resource object\n        if (resource && !(resource instanceof Resource))\n        {\n            resource = autoDetectResource(resource, resourceOptions);\n            resource.internal = true;\n        }\n\n        /**\n         * The width of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.width = width || 0;\n\n        /**\n         * The height of the base texture set when the image has loaded\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.height = height || 0;\n\n        /**\n         * The resolution / device pixel ratio of the texture\n         *\n         * @member {number}\n         * @default PIXI.settings.RESOLUTION\n         */\n        this.resolution = resolution || settings.RESOLUTION;\n\n        /**\n         * Mipmap mode of the texture, affects downscaled images\n         *\n         * @member {PIXI.MIPMAP_MODES}\n         * @default PIXI.settings.MIPMAP_TEXTURES\n         */\n        this.mipmap = mipmap !== undefined ? mipmap : settings.MIPMAP_TEXTURES;\n\n        /**\n         * Anisotropic filtering level of texture\n         *\n         * @member {number}\n         * @default PIXI.settings.ANISOTROPIC_LEVEL\n         */\n        this.anisotropicLevel = anisotropicLevel !== undefined ? anisotropicLevel : settings.ANISOTROPIC_LEVEL;\n\n        /**\n         * How the texture wraps\n         * @member {number}\n         */\n        this.wrapMode = wrapMode || settings.WRAP_MODE;\n\n        /**\n         * The scale mode to apply when scaling this texture\n         *\n         * @member {PIXI.SCALE_MODES}\n         * @default PIXI.settings.SCALE_MODE\n         */\n        this.scaleMode = scaleMode !== undefined ? scaleMode : settings.SCALE_MODE;\n\n        /**\n         * The pixel format of the texture\n         *\n         * @member {PIXI.FORMATS}\n         * @default PIXI.FORMATS.RGBA\n         */\n        this.format = format || FORMATS.RGBA;\n\n        /**\n         * The type of resource data\n         *\n         * @member {PIXI.TYPES}\n         * @default PIXI.TYPES.UNSIGNED_BYTE\n         */\n        this.type = type || TYPES.UNSIGNED_BYTE;\n\n        /**\n         * The target type\n         *\n         * @member {PIXI.TARGETS}\n         * @default PIXI.TARGETS.TEXTURE_2D\n         */\n        this.target = target || TARGETS.TEXTURE_2D;\n\n        /**\n         * Set to true to enable pre-multiplied alpha\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.premultiplyAlpha = premultiplyAlpha !== false;\n\n        /**\n         * Global unique identifier for this BaseTexture\n         *\n         * @member {string}\n         * @protected\n         */\n        this.uid = uid();\n\n        /**\n         * Used by automatic texture Garbage Collection, stores last GC tick when it was bound\n         *\n         * @member {number}\n         * @protected\n         */\n        this.touched = 0;\n\n        /**\n         * Whether or not the texture is a power of two, try to use power of two textures as much\n         * as you can\n         *\n         * @readonly\n         * @member {boolean}\n         * @default false\n         */\n        this.isPowerOfTwo = false;\n        this._refreshPOT();\n\n        /**\n         * The map of render context textures where this is bound\n         *\n         * @member {Object}\n         * @private\n         */\n        this._glTextures = {};\n\n        /**\n         * Used by TextureSystem to only update texture to the GPU when needed.\n         * Please call `update()` to increment it.\n         *\n         * @readonly\n         * @member {number}\n         */\n        this.dirtyId = 0;\n\n        /**\n         * Used by TextureSystem to only update texture style when needed.\n         *\n         * @protected\n         * @member {number}\n         */\n        this.dirtyStyleId = 0;\n\n        /**\n         * Currently default cache ID.\n         *\n         * @member {string}\n         */\n        this.cacheId = null;\n\n        /**\n         * Generally speaking means when resource is loaded.\n         * @readonly\n         * @member {boolean}\n         */\n        this.valid = width > 0 && height > 0;\n\n        /**\n         * The collection of alternative cache ids, since some BaseTextures\n         * can have more than one ID, short name and longer full URL\n         *\n         * @member {Array<string>}\n         * @readonly\n         */\n        this.textureCacheIds = [];\n\n        /**\n         * Flag if BaseTexture has been destroyed.\n         *\n         * @member {boolean}\n         * @readonly\n         */\n        this.destroyed = false;\n\n        /**\n         * The resource used by this BaseTexture, there can only\n         * be one resource per BaseTexture, but textures can share\n         * resources.\n         *\n         * @member {PIXI.resources.Resource}\n         * @readonly\n         */\n        this.resource = null;\n\n        /**\n         * Number of the texture batch, used by multi-texture renderers\n         *\n         * @member {number}\n         */\n        this._batchEnabled = 0;\n\n        /**\n         * Fired when a not-immediately-available source finishes loading.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when a not-immediately-available source fails to load.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#error\n         * @param {PIXI.BaseTexture} baseTexture - Resource errored.\n         * @param {ErrorEvent} event - Load error event.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#loaded\n         * @param {PIXI.BaseTexture} baseTexture - Resource loaded.\n         */\n\n        /**\n         * Fired when BaseTexture is updated.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#update\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being updated.\n         */\n\n        /**\n         * Fired when BaseTexture is destroyed.\n         *\n         * @protected\n         * @event PIXI.BaseTexture#dispose\n         * @param {PIXI.BaseTexture} baseTexture - Instance of texture being destroyed.\n         */\n\n        // Set the resource\n        this.setResource(resource);\n    }\n\n    /**\n     * Pixel width of the source of this texture\n     *\n     * @readonly\n     * @member {number}\n     */\n    get realWidth()\n    {\n        return Math.ceil((this.width * this.resolution) - 1e-4);\n    }\n\n    /**\n     * Pixel height of the source of this texture\n     *\n     * @readonly\n     * @member {number}\n     */\n    get realHeight()\n    {\n        return Math.ceil((this.height * this.resolution) - 1e-4);\n    }\n\n    /**\n     * Changes style options of BaseTexture\n     *\n     * @param {PIXI.SCALE_MODES} [scaleMode] - Pixi scalemode\n     * @param {PIXI.MIPMAP_MODES} [mipmap] - enable mipmaps\n     * @returns {PIXI.BaseTexture} this\n     */\n    setStyle(scaleMode, mipmap)\n    {\n        let dirty;\n\n        if (scaleMode !== undefined && scaleMode !== this.scaleMode)\n        {\n            this.scaleMode = scaleMode;\n            dirty = true;\n        }\n\n        if (mipmap !== undefined && mipmap !== this.mipmap)\n        {\n            this.mipmap = mipmap;\n            dirty = true;\n        }\n\n        if (dirty)\n        {\n            this.dirtyStyleId++;\n        }\n\n        return this;\n    }\n\n    /**\n     * Changes w/h/resolution. Texture becomes valid if width and height are greater than zero.\n     *\n     * @param {number} width Visual width\n     * @param {number} height Visual height\n     * @param {number} [resolution] Optionally set resolution\n     * @returns {PIXI.BaseTexture} this\n     */\n    setSize(width, height, resolution)\n    {\n        this.resolution = resolution || this.resolution;\n        this.width = width;\n        this.height = height;\n        this._refreshPOT();\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Sets real size of baseTexture, preserves current resolution.\n     *\n     * @param {number} realWidth Full rendered width\n     * @param {number} realHeight Full rendered height\n     * @param {number} [resolution] Optionally set resolution\n     * @returns {PIXI.BaseTexture} this\n     */\n    setRealSize(realWidth, realHeight, resolution)\n    {\n        this.resolution = resolution || this.resolution;\n        this.width = realWidth / this.resolution;\n        this.height = realHeight / this.resolution;\n        this._refreshPOT();\n        this.update();\n\n        return this;\n    }\n\n    /**\n     * Refresh check for isPowerOfTwo texture based on size\n     *\n     * @private\n     */\n    _refreshPOT()\n    {\n        this.isPowerOfTwo = isPow2(this.realWidth) && isPow2(this.realHeight);\n    }\n\n    /**\n     * Changes resolution\n     *\n     * @param {number} [resolution] res\n     * @returns {PIXI.BaseTexture} this\n     */\n    setResolution(resolution)\n    {\n        const oldResolution = this.resolution;\n\n        if (oldResolution === resolution)\n        {\n            return this;\n        }\n\n        this.resolution = resolution;\n\n        if (this.valid)\n        {\n            this.width = this.width * oldResolution / resolution;\n            this.height = this.height * oldResolution / resolution;\n            this.emit('update', this);\n        }\n\n        this._refreshPOT();\n\n        return this;\n    }\n\n    /**\n     * Sets the resource if it wasn't set. Throws error if resource already present\n     *\n     * @param {PIXI.resources.Resource} resource - that is managing this BaseTexture\n     * @returns {PIXI.BaseTexture} this\n     */\n    setResource(resource)\n    {\n        if (this.resource === resource)\n        {\n            return this;\n        }\n\n        if (this.resource)\n        {\n            throw new Error('Resource can be set only once');\n        }\n\n        resource.bind(this);\n\n        this.resource = resource;\n\n        return this;\n    }\n\n    /**\n     * Invalidates the object. Texture becomes valid if width and height are greater than zero.\n     */\n    update()\n    {\n        if (!this.valid)\n        {\n            if (this.width > 0 && this.height > 0)\n            {\n                this.valid = true;\n                this.emit('loaded', this);\n                this.emit('update', this);\n            }\n        }\n        else\n        {\n            this.dirtyId++;\n            this.dirtyStyleId++;\n            this.emit('update', this);\n        }\n    }\n\n    /**\n     * Handle errors with resources.\n     * @private\n     * @param {ErrorEvent} event - Error event emitted.\n     */\n    onError(event)\n    {\n        this.emit('error', this, event);\n    }\n\n    /**\n     * Destroys this base texture.\n     * The method stops if resource doesn't want this texture to be destroyed.\n     * Removes texture from all caches.\n     */\n    destroy()\n    {\n        // remove and destroy the resource\n        if (this.resource)\n        {\n            this.resource.unbind(this);\n            // only destroy resourced created internally\n            if (this.resource.internal)\n            {\n                this.resource.destroy();\n            }\n            this.resource = null;\n        }\n\n        if (this.cacheId)\n        {\n            delete BaseTextureCache[this.cacheId];\n            delete TextureCache[this.cacheId];\n\n            this.cacheId = null;\n        }\n\n        // finally let the WebGL renderer know..\n        this.dispose();\n\n        BaseTexture.removeFromCache(this);\n        this.textureCacheIds = null;\n\n        this.destroyed = true;\n    }\n\n    /**\n     * Frees the texture from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose()\n    {\n        this.emit('dispose', this);\n    }\n\n    /**\n     * Helper function that creates a base texture based on the source you provide.\n     * The source can be - image url, image element, canvas element. If the\n     * source is an image url or an image element and not in the base texture\n     * cache, it will be created and loaded.\n     *\n     * @static\n     * @param {string|HTMLImageElement|HTMLCanvasElement|SVGElement|HTMLVideoElement} source - The\n     *        source to create base texture from.\n     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n     * @returns {PIXI.BaseTexture} The new base texture.\n     */\n    static from(source, options)\n    {\n        let cacheId = null;\n\n        if (typeof source === 'string')\n        {\n            cacheId = source;\n        }\n        else\n        {\n            if (!source._pixiId)\n            {\n                source._pixiId = `pixiid_${uid()}`;\n            }\n\n            cacheId = source._pixiId;\n        }\n\n        let baseTexture = BaseTextureCache[cacheId];\n\n        if (!baseTexture)\n        {\n            baseTexture = new BaseTexture(source, options);\n            baseTexture.cacheId = cacheId;\n            BaseTexture.addToCache(baseTexture, cacheId);\n        }\n\n        return baseTexture;\n    }\n\n    /**\n     * Create a new BaseTexture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @static\n     * @param {Float32Array|Uint8Array} buffer The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param {number} width - Width of the resource\n     * @param {number} height - Height of the resource\n     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return {PIXI.BaseTexture} The resulting new BaseTexture\n     */\n    static fromBuffer(buffer, width, height, options)\n    {\n        buffer = buffer || new Float32Array(width * height * 4);\n\n        const resource = new BufferResource(buffer, { width, height });\n        const type = buffer instanceof Float32Array ? TYPES.FLOAT : TYPES.UNSIGNED_BYTE;\n\n        return new BaseTexture(resource, Object.assign(defaultBufferOptions, options || { width, height, type }));\n    }\n\n    /**\n     * Adds a BaseTexture to the global BaseTextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @static\n     * @param {PIXI.BaseTexture} baseTexture - The BaseTexture to add to the cache.\n     * @param {string} id - The id that the BaseTexture will be stored against.\n     */\n    static addToCache(baseTexture, id)\n    {\n        if (id)\n        {\n            if (baseTexture.textureCacheIds.indexOf(id) === -1)\n            {\n                baseTexture.textureCacheIds.push(id);\n            }\n\n            if (BaseTextureCache[id])\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`BaseTexture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            BaseTextureCache[id] = baseTexture;\n        }\n    }\n\n    /**\n     * Remove a BaseTexture from the global BaseTextureCache.\n     *\n     * @static\n     * @param {string|PIXI.BaseTexture} baseTexture - id of a BaseTexture to be removed, or a BaseTexture instance itself.\n     * @return {PIXI.BaseTexture|null} The BaseTexture that was removed.\n     */\n    static removeFromCache(baseTexture)\n    {\n        if (typeof baseTexture === 'string')\n        {\n            const baseTextureFromCache = BaseTextureCache[baseTexture];\n\n            if (baseTextureFromCache)\n            {\n                const index = baseTextureFromCache.textureCacheIds.indexOf(baseTexture);\n\n                if (index > -1)\n                {\n                    baseTextureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete BaseTextureCache[baseTexture];\n\n                return baseTextureFromCache;\n            }\n        }\n        else if (baseTexture && baseTexture.textureCacheIds)\n        {\n            for (let i = 0; i < baseTexture.textureCacheIds.length; ++i)\n            {\n                delete BaseTextureCache[baseTexture.textureCacheIds[i]];\n            }\n\n            baseTexture.textureCacheIds.length = 0;\n\n            return baseTexture;\n        }\n\n        return null;\n    }\n}\n\n/**\n * Global number of the texture batch, used by multi-texture renderers\n *\n * @static\n * @member {number}\n */\nBaseTexture._globalBatch = 0;\n","import Resource from './Resource';\nimport BaseTexture from '../BaseTexture';\nimport { TARGETS } from '@pixi/constants';\nimport { autoDetectResource } from './autoDetectResource';\n\n/**\n * A resource that contains a number of sources.\n *\n * @class\n * @extends PIXI.resources.Resource\n * @memberof PIXI.resources\n * @param {number|Array<*>} source - Number of items in array or the collection\n *        of image URLs to use. Can also be resources, image elements, canvas, etc.\n * @param {object} [options] Options to apply to {@link PIXI.resources.autoDetectResource}\n * @param {number} [options.width] - Width of the resource\n * @param {number} [options.height] - Height of the resource\n */\nexport default class ArrayResource extends Resource\n{\n    constructor(source, options)\n    {\n        options = options || {};\n\n        let urls;\n        let length = source;\n\n        if (Array.isArray(source))\n        {\n            urls = source;\n            length = source.length;\n        }\n\n        super(options.width, options.height);\n\n        /**\n         * Collection of resources.\n         * @member {Array<PIXI.BaseTexture>}\n         * @readonly\n         */\n        this.items = [];\n\n        /**\n         * Dirty IDs for each part\n         * @member {Array<number>}\n         * @readonly\n         */\n        this.itemDirtyIds = [];\n\n        for (let i = 0; i < length; i++)\n        {\n            const partTexture = new BaseTexture();\n\n            this.items.push(partTexture);\n            this.itemDirtyIds.push(-1);\n        }\n\n        /**\n         * Number of elements in array\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.length = length;\n\n        /**\n         * Promise when loading\n         * @member {Promise}\n         * @private\n         * @default null\n         */\n        this._load = null;\n\n        if (urls)\n        {\n            for (let i = 0; i < length; i++)\n            {\n                this.addResourceAt(autoDetectResource(urls[i], options), i);\n            }\n        }\n    }\n\n    /**\n     * Destroy this BaseImageResource\n     * @override\n     */\n    dispose()\n    {\n        for (let i = 0, len = this.length; i < len; i++)\n        {\n            this.items[i].destroy();\n        }\n        this.items = null;\n        this.itemDirtyIds = null;\n        this._load = null;\n    }\n\n    /**\n     * Set a resource by ID\n     *\n     * @param {PIXI.resources.Resource} resource\n     * @param {number} index - Zero-based index of resource to set\n     * @return {PIXI.resources.ArrayResource} Instance for chaining\n     */\n    addResourceAt(resource, index)\n    {\n        const baseTexture = this.items[index];\n\n        if (!baseTexture)\n        {\n            throw new Error(`Index ${index} is out of bounds`);\n        }\n\n        // Inherit the first resource dimensions\n        if (resource.valid && !this.valid)\n        {\n            this.resize(resource.width, resource.height);\n        }\n\n        this.items[index].setResource(resource);\n\n        return this;\n    }\n\n    /**\n     * Set the parent base texture\n     * @member {PIXI.BaseTexture}\n     * @override\n     */\n    bind(baseTexture)\n    {\n        super.bind(baseTexture);\n\n        baseTexture.target = TARGETS.TEXTURE_2D_ARRAY;\n\n        for (let i = 0; i < this.length; i++)\n        {\n            this.items[i].on('update', baseTexture.update, baseTexture);\n        }\n    }\n\n    /**\n     * Unset the parent base texture\n     * @member {PIXI.BaseTexture}\n     * @override\n     */\n    unbind(baseTexture)\n    {\n        super.unbind(baseTexture);\n\n        for (let i = 0; i < this.length; i++)\n        {\n            this.items[i].off('update', baseTexture.update, baseTexture);\n        }\n    }\n\n    /**\n     * Load all the resources simultaneously\n     * @override\n     * @return {Promise<void>} When load is resolved\n     */\n    load()\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        const resources = this.items.map((item) => item.resource);\n\n        // TODO: also implement load part-by-part strategy\n        const promises = resources.map((item) => item.load());\n\n        this._load = Promise.all(promises)\n            .then(() =>\n            {\n                const { width, height } = resources[0];\n\n                this.resize(width, height);\n\n                return Promise.resolve(this);\n            }\n            );\n\n        return this._load;\n    }\n\n    /**\n     * Upload the resources to the GPU.\n     * @param {PIXI.Renderer} renderer\n     * @param {PIXI.BaseTexture} texture\n     * @param {PIXI.GLTexture} glTexture\n     * @returns {boolean} whether texture was uploaded\n     */\n    upload(renderer, texture, glTexture)\n    {\n        const { length, itemDirtyIds, items } = this;\n        const { gl } = renderer;\n\n        if (glTexture.dirtyId < 0)\n        {\n            gl.texImage3D(\n                gl.TEXTURE_2D_ARRAY,\n                0,\n                texture.format,\n                this._width,\n                this._height,\n                length,\n                0,\n                texture.format,\n                texture.type,\n                null\n            );\n        }\n\n        for (let i = 0; i < length; i++)\n        {\n            const item = items[i];\n\n            if (itemDirtyIds[i] < item.dirtyId)\n            {\n                itemDirtyIds[i] = item.dirtyId;\n                if (item.valid)\n                {\n                    gl.texSubImage3D(\n                        gl.TEXTURE_2D_ARRAY,\n                        0,\n                        0, // xoffset\n                        0, // yoffset\n                        i, // zoffset\n                        item.resource.width,\n                        item.resource.height,\n                        1,\n                        texture.format,\n                        texture.type,\n                        item.resource.source\n                    );\n                }\n            }\n        }\n\n        return true;\n    }\n}\n","import BaseImageResource from './BaseImageResource';\n\n/**\n * @interface OffscreenCanvas\n */\n\n/**\n * Resource type for HTMLCanvasElement.\n * @class\n * @extends PIXI.resources.BaseImageResource\n * @memberof PIXI.resources\n * @param {HTMLCanvasElement} source - Canvas element to use\n */\nexport default class CanvasResource extends BaseImageResource\n{\n    /**\n     * Used to auto-detect the type of resource.\n     *\n     * @static\n     * @param {HTMLCanvasElement|OffscreenCanvas} source - The source object\n     * @return {boolean} `true` if source is HTMLCanvasElement or OffscreenCanvas\n     */\n    static test(source)\n    {\n        const { OffscreenCanvas } = window;\n\n        // Check for browsers that don't yet support OffscreenCanvas\n        if (OffscreenCanvas && source instanceof OffscreenCanvas)\n        {\n            return true;\n        }\n\n        return source instanceof HTMLCanvasElement;\n    }\n}\n","import ArrayResource from './ArrayResource';\nimport { TARGETS } from '@pixi/constants';\n\n/**\n * Resource for a CubeTexture which contains six resources.\n *\n * @class\n * @extends PIXI.resources.ArrayResource\n * @memberof PIXI.resources\n * @param {Array<string|PIXI.resources.Resource>} [source] Collection of URLs or resources\n *        to use as the sides of the cube.\n * @param {object} [options] - ImageResource options\n * @param {number} [options.width] - Width of resource\n * @param {number} [options.height] - Height of resource\n */\nexport default class CubeResource extends ArrayResource\n{\n    constructor(source, options)\n    {\n        options = options || {};\n\n        super(source, options);\n\n        if (this.length !== CubeResource.SIDES)\n        {\n            throw new Error(`Invalid length. Got ${this.length}, expected 6`);\n        }\n\n        for (let i = 0; i < CubeResource.SIDES; i++)\n        {\n            this.items[i].target = TARGETS.TEXTURE_CUBE_MAP_POSITIVE_X + i;\n        }\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * Add binding\n     *\n     * @override\n     * @param {PIXI.BaseTexture} baseTexture - parent base texture\n     */\n    bind(baseTexture)\n    {\n        super.bind(baseTexture);\n\n        baseTexture.target = TARGETS.TEXTURE_CUBE_MAP;\n    }\n\n    /**\n     * Upload the resource\n     *\n     * @returns {boolean} true is success\n     */\n    upload(renderer, baseTexture, glTexture)\n    {\n        const dirty = this.itemDirtyIds;\n\n        for (let i = 0; i < CubeResource.SIDES; i++)\n        {\n            const side = this.items[i];\n\n            if (dirty[i] < side.dirtyId)\n            {\n                dirty[i] = side.dirtyId;\n                if (side.valid)\n                {\n                    side.resource.upload(renderer, side, glTexture);\n                }\n                else\n                {\n                    // TODO: upload zero buffer\n                }\n            }\n        }\n\n        return true;\n    }\n}\n\n/**\n * Number of texture sides to store for CubeResources\n *\n * @name PIXI.resources.CubeResource.SIDES\n * @static\n * @member {number}\n * @default 6\n */\nCubeResource.SIDES = 6;\n","import { uid } from '@pixi/utils';\nimport BaseImageResource from './BaseImageResource';\n\n/**\n * Resource type for SVG elements and graphics.\n * @class\n * @extends PIXI.resources.BaseImageResource\n * @memberof PIXI.resources\n * @param {string} source - Base64 encoded SVG element or URL for SVG file.\n * @param {object} [options] - Options to use\n * @param {number} [options.scale=1] Scale to apply to SVG. Overridden by...\n * @param {number} [options.width] Rasterize SVG this wide. Aspect ratio preserved if height not specified.\n * @param {number} [options.height] Rasterize SVG this high. Aspect ratio preserved if width not specified.\n * @param {boolean} [options.autoLoad=true] Start loading right away.\n */\nexport default class SVGResource extends BaseImageResource\n{\n    constructor(source, options)\n    {\n        options = options || {};\n\n        super(document.createElement('canvas'));\n        this._width = 0;\n        this._height = 0;\n\n        /**\n         * Base64 encoded SVG element or URL for SVG file\n         * @readonly\n         * @member {string}\n         */\n        this.svg = source;\n\n        /**\n         * The source scale to apply when rasterizing on load\n         * @readonly\n         * @member {number}\n         */\n        this.scale = options.scale || 1;\n\n        /**\n         * A width override for rasterization on load\n         * @readonly\n         * @member {number}\n         */\n        this._overrideWidth = options.width;\n\n        /**\n         * A height override for rasterization on load\n         * @readonly\n         * @member {number}\n         */\n        this._overrideHeight = options.height;\n\n        /**\n         * Call when completely loaded\n         * @private\n         * @member {function}\n         */\n        this._resolve = null;\n\n        /**\n         * Cross origin value to use\n         * @private\n         * @member {boolean|string}\n         */\n        this._crossorigin = options.crossorigin;\n\n        /**\n         * Promise when loading\n         * @member {Promise<void>}\n         * @private\n         * @default null\n         */\n        this._load = null;\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    load()\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        this._load = new Promise((resolve) =>\n        {\n            // Save this until after load is finished\n            this._resolve = () =>\n            {\n                this.resize(this.source.width, this.source.height);\n                resolve(this);\n            };\n\n            // Convert SVG inline string to data-uri\n            if ((/^\\<svg/).test(this.svg.trim()))\n            {\n                if (!btoa)\n                {\n                    throw new Error('Your browser doesn\\'t support base64 conversions.');\n                }\n                this.svg = `data:image/svg+xml;base64,${btoa(unescape(encodeURIComponent(this.svg)))}`;\n            }\n\n            this._loadSvg();\n        });\n\n        return this._load;\n    }\n\n    /**\n     * Loads an SVG image from `imageUrl` or `data URL`.\n     *\n     * @private\n     */\n    _loadSvg()\n    {\n        const tempImage = new Image();\n\n        BaseImageResource.crossOrigin(tempImage, this.svg, this._crossorigin);\n        tempImage.src = this.svg;\n\n        tempImage.onerror = (event) =>\n        {\n            tempImage.onerror = null;\n            this.onError.run(event);\n        };\n\n        tempImage.onload = () =>\n        {\n            const svgWidth = tempImage.width;\n            const svgHeight = tempImage.height;\n\n            if (!svgWidth || !svgHeight)\n            {\n                throw new Error('The SVG image must have width and height defined (in pixels), canvas API needs them.');\n            }\n\n            // Set render size\n            let width = svgWidth * this.scale;\n            let height = svgHeight * this.scale;\n\n            if (this._overrideWidth || this._overrideHeight)\n            {\n                width = this._overrideWidth || this._overrideHeight / svgHeight * svgWidth;\n                height = this._overrideHeight || this._overrideWidth / svgWidth * svgHeight;\n            }\n            width = Math.round(width);\n            height = Math.round(height);\n\n            // Create a canvas element\n            const canvas = this.source;\n\n            canvas.width = width;\n            canvas.height = height;\n            canvas._pixiId = `canvas_${uid()}`;\n\n            // Draw the Svg to the canvas\n            canvas\n                .getContext('2d')\n                .drawImage(tempImage, 0, 0, svgWidth, svgHeight, 0, 0, width, height);\n\n            this._resolve();\n            this._resolve = null;\n        };\n    }\n\n    /**\n     * Get size from an svg string using regexp.\n     *\n     * @method\n     * @param {string} svgString - a serialized svg element\n     * @return {PIXI.ISize} image extension\n     */\n    static getSize(svgString)\n    {\n        const sizeMatch = SVGResource.SVG_SIZE.exec(svgString);\n        const size = {};\n\n        if (sizeMatch)\n        {\n            size[sizeMatch[1]] = Math.round(parseFloat(sizeMatch[3]));\n            size[sizeMatch[5]] = Math.round(parseFloat(sizeMatch[7]));\n        }\n\n        return size;\n    }\n\n    /**\n     * Destroys this texture\n     * @override\n     */\n    dispose()\n    {\n        super.dispose();\n        this._resolve = null;\n        this._crossorigin = null;\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     *\n     * @static\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     */\n    static test(source, extension)\n    {\n        // url file extension is SVG\n        return extension === 'svg'\n            // source is SVG data-uri\n            || (typeof source === 'string' && source.indexOf('data:image/svg+xml;base64') === 0)\n            // source is SVG inline\n            || (typeof source === 'string' && source.indexOf('<svg') === 0);\n    }\n}\n\n/**\n * RegExp for SVG size.\n *\n * @static\n * @constant {RegExp|string} SVG_SIZE\n * @memberof PIXI.resources.SVGResource\n * @example &lt;svg width=\"100\" height=\"100\"&gt;&lt;/svg&gt;\n */\nSVGResource.SVG_SIZE = /<svg[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*(?:\\s(width|height)=('|\")(\\d*(?:\\.\\d+)?)(?:px)?('|\"))[^>]*>/i; // eslint-disable-line max-len\n","import BaseImageResource from './BaseImageResource';\nimport { Ticker } from '@pixi/ticker';\n\n/**\n * Resource type for HTMLVideoElement.\n * @class\n * @extends PIXI.resources.BaseImageResource\n * @memberof PIXI.resources\n * @param {HTMLVideoElement|object|string|Array<string|object>} source - Video element to use.\n * @param {object} [options] - Options to use\n * @param {boolean} [options.autoLoad=true] - Start loading the video immediately\n * @param {boolean} [options.autoPlay=true] - Start playing video immediately\n * @param {number} [options.updateFPS=0] - How many times a second to update the texture from the video.\n * Leave at 0 to update at every render.\n * @param {boolean} [options.crossorigin=true] - Load image using cross origin\n */\nexport default class VideoResource extends BaseImageResource\n{\n    constructor(source, options)\n    {\n        options = options || {};\n\n        if (!(source instanceof HTMLVideoElement))\n        {\n            const videoElement = document.createElement('video');\n\n            // workaround for https://github.com/pixijs/pixi.js/issues/5996\n            videoElement.setAttribute('preload', 'auto');\n            videoElement.setAttribute('webkit-playsinline', '');\n            videoElement.setAttribute('playsinline', '');\n\n            if (typeof source === 'string')\n            {\n                source = [source];\n            }\n\n            BaseImageResource.crossOrigin(videoElement, (source[0].src || source[0]), options.crossorigin);\n\n            // array of objects or strings\n            for (let i = 0; i < source.length; ++i)\n            {\n                const sourceElement = document.createElement('source');\n\n                let { src, mime } = source[i];\n\n                src = src || source[i];\n\n                const baseSrc = src.split('?').shift().toLowerCase();\n                const ext = baseSrc.substr(baseSrc.lastIndexOf('.') + 1);\n\n                mime = mime || `video/${ext}`;\n\n                sourceElement.src = src;\n                sourceElement.type = mime;\n\n                videoElement.appendChild(sourceElement);\n            }\n\n            // Override the source\n            source = videoElement;\n        }\n\n        super(source);\n\n        this.noSubImage = true;\n        this._autoUpdate = true;\n        this._isAutoUpdating = false;\n        this._updateFPS = options.updateFPS || 0;\n        this._msToNextUpdate = 0;\n\n        /**\n         * When set to true will automatically play videos used by this texture once\n         * they are loaded. If false, it will not modify the playing state.\n         *\n         * @member {boolean}\n         * @default true\n         */\n        this.autoPlay = options.autoPlay !== false;\n\n        /**\n         * Promise when loading\n         * @member {Promise<void>}\n         * @private\n         * @default null\n         */\n        this._load = null;\n\n        /**\n         * Callback when completed with load.\n         * @member {function}\n         * @private\n         */\n        this._resolve = null;\n\n        // Bind for listeners\n        this._onCanPlay = this._onCanPlay.bind(this);\n        this._onError = this._onError.bind(this);\n\n        if (options.autoLoad !== false)\n        {\n            this.load();\n        }\n    }\n\n    /**\n     * Trigger updating of the texture\n     *\n     * @param {number} [deltaTime=0] - time delta since last tick\n     */\n    update(deltaTime = 0)\n    {\n        if (!this.destroyed)\n        {\n            // account for if video has had its playbackRate changed\n            const elapsedMS = Ticker.shared.elapsedMS * this.source.playbackRate;\n\n            this._msToNextUpdate = Math.floor(this._msToNextUpdate - elapsedMS);\n            if (!this._updateFPS || this._msToNextUpdate <= 0)\n            {\n                super.update(deltaTime);\n                this._msToNextUpdate = this._updateFPS ? Math.floor(1000 / this._updateFPS) : 0;\n            }\n        }\n    }\n\n    /**\n     * Start preloading the video resource.\n     *\n     * @protected\n     * @return {Promise<void>} Handle the validate event\n     */\n    load()\n    {\n        if (this._load)\n        {\n            return this._load;\n        }\n\n        const source = this.source;\n\n        if ((source.readyState === source.HAVE_ENOUGH_DATA || source.readyState === source.HAVE_FUTURE_DATA)\n            && source.width && source.height)\n        {\n            source.complete = true;\n        }\n\n        source.addEventListener('play', this._onPlayStart.bind(this));\n        source.addEventListener('pause', this._onPlayStop.bind(this));\n\n        if (!this._isSourceReady())\n        {\n            source.addEventListener('canplay', this._onCanPlay);\n            source.addEventListener('canplaythrough', this._onCanPlay);\n            source.addEventListener('error', this._onError, true);\n        }\n        else\n        {\n            this._onCanPlay();\n        }\n\n        this._load = new Promise((resolve) =>\n        {\n            if (this.valid)\n            {\n                resolve(this);\n            }\n            else\n            {\n                this._resolve = resolve;\n\n                source.load();\n            }\n        });\n\n        return this._load;\n    }\n\n    /**\n     * Handle video error events.\n     *\n     * @private\n     */\n    _onError()\n    {\n        this.source.removeEventListener('error', this._onError, true);\n        this.onError.run(event);\n    }\n\n    /**\n     * Returns true if the underlying source is playing.\n     *\n     * @private\n     * @return {boolean} True if playing.\n     */\n    _isSourcePlaying()\n    {\n        const source = this.source;\n\n        return (source.currentTime > 0 && source.paused === false && source.ended === false && source.readyState > 2);\n    }\n\n    /**\n     * Returns true if the underlying source is ready for playing.\n     *\n     * @private\n     * @return {boolean} True if ready.\n     */\n    _isSourceReady()\n    {\n        return this.source.readyState === 3 || this.source.readyState === 4;\n    }\n\n    /**\n     * Runs the update loop when the video is ready to play\n     *\n     * @private\n     */\n    _onPlayStart()\n    {\n        // Just in case the video has not received its can play even yet..\n        if (!this.valid)\n        {\n            this._onCanPlay();\n        }\n\n        if (!this._isAutoUpdating && this.autoUpdate)\n        {\n            Ticker.shared.add(this.update, this);\n            this._isAutoUpdating = true;\n        }\n    }\n\n    /**\n     * Fired when a pause event is triggered, stops the update loop\n     *\n     * @private\n     */\n    _onPlayStop()\n    {\n        if (this._isAutoUpdating)\n        {\n            Ticker.shared.remove(this.update, this);\n            this._isAutoUpdating = false;\n        }\n    }\n\n    /**\n     * Fired when the video is loaded and ready to play\n     *\n     * @private\n     */\n    _onCanPlay()\n    {\n        const { source } = this;\n\n        source.removeEventListener('canplay', this._onCanPlay);\n        source.removeEventListener('canplaythrough', this._onCanPlay);\n\n        const valid = this.valid;\n\n        this.resize(source.videoWidth, source.videoHeight);\n\n        // prevent multiple loaded dispatches..\n        if (!valid && this._resolve)\n        {\n            this._resolve(this);\n            this._resolve = null;\n        }\n\n        if (this._isSourcePlaying())\n        {\n            this._onPlayStart();\n        }\n        else if (this.autoPlay)\n        {\n            source.play();\n        }\n    }\n\n    /**\n     * Destroys this texture\n     * @override\n     */\n    dispose()\n    {\n        if (this._isAutoUpdating)\n        {\n            Ticker.shared.remove(this.update, this);\n        }\n\n        if (this.source)\n        {\n            this.source.removeEventListener('error', this._onError, true);\n            this.source.pause();\n            this.source.src = '';\n            this.source.load();\n        }\n        super.dispose();\n    }\n\n    /**\n     * Should the base texture automatically update itself, set to true by default\n     *\n     * @member {boolean}\n     */\n    get autoUpdate()\n    {\n        return this._autoUpdate;\n    }\n\n    set autoUpdate(value) // eslint-disable-line require-jsdoc\n    {\n        if (value !== this._autoUpdate)\n        {\n            this._autoUpdate = value;\n\n            if (!this._autoUpdate && this._isAutoUpdating)\n            {\n                Ticker.shared.remove(this.update, this);\n                this._isAutoUpdating = false;\n            }\n            else if (this._autoUpdate && !this._isAutoUpdating)\n            {\n                Ticker.shared.add(this.update, this);\n                this._isAutoUpdating = true;\n            }\n        }\n    }\n\n    /**\n     * How many times a second to update the texture from the video. Leave at 0 to update at every render.\n     * A lower fps can help performance, as updating the texture at 60fps on a 30ps video may not be efficient.\n     *\n     * @member {number}\n     */\n    get updateFPS()\n    {\n        return this._updateFPS;\n    }\n\n    set updateFPS(value) // eslint-disable-line require-jsdoc\n    {\n        if (value !== this._updateFPS)\n        {\n            this._updateFPS = value;\n        }\n    }\n\n    /**\n     * Used to auto-detect the type of resource.\n     *\n     * @static\n     * @param {*} source - The source object\n     * @param {string} extension - The extension of source, if set\n     * @return {boolean} `true` if video source\n     */\n    static test(source, extension)\n    {\n        return (source instanceof HTMLVideoElement)\n            || VideoResource.TYPES.indexOf(extension) > -1;\n    }\n}\n\n/**\n * List of common video file extensions supported by VideoResource.\n * @constant\n * @member {Array<string>}\n * @static\n * @readonly\n */\nVideoResource.TYPES = ['mp4', 'm4v', 'webm', 'ogg', 'ogv', 'h264', 'avi', 'mov'];\n","import BaseImageResource from './BaseImageResource';\n\n/**\n * Resource type for ImageBitmap.\n * @class\n * @extends PIXI.resources.BaseImageResource\n * @memberof PIXI.resources\n * @param {ImageBitmap} source - Image element to use\n */\nexport default class ImageBitmapResource extends BaseImageResource\n{\n    /**\n     * Used to auto-detect the type of resource.\n     *\n     * @static\n     * @param {ImageBitmap} source - The source object\n     * @return {boolean} `true` if source is an ImageBitmap\n     */\n    static test(source)\n    {\n        return !!window.createImageBitmap && source instanceof ImageBitmap;\n    }\n}\n","import { INSTALLED, autoDetectResource } from './autoDetectResource';\nimport ArrayResource from './ArrayResource';\nimport BufferResource from './BufferResource';\nimport CanvasResource from './CanvasResource';\nimport CubeResource from './CubeResource';\nimport ImageResource from './ImageResource';\nimport SVGResource from './SVGResource';\nimport VideoResource from './VideoResource';\nimport ImageBitmapResource from './ImageBitmapResource';\n\n/**\n * Collection of base resource types supported by PixiJS.\n *\n * Resources are used by {@link PIXI.BaseTexture} to handle different media types\n * such as images, video, SVG graphics, etc. In most use-cases, you should not\n * instantiate the resources directly. The easy thing is to use\n * {@link PIXI.BaseTexture.from}.\n * @example\n * const baseTexture = PIXI.BaseTexture.from('path/to/image.jpg');\n * @namespace PIXI.resources\n */\nexport { default as Resource } from './Resource';\nexport { default as BaseImageResource } from './BaseImageResource';\n\nINSTALLED.push(\n    ImageResource,\n    ImageBitmapResource,\n    CanvasResource,\n    VideoResource,\n    SVGResource,\n    BufferResource,\n    CubeResource,\n    ArrayResource\n);\n\nexport {\n    INSTALLED,\n    autoDetectResource,\n    ArrayResource,\n    BufferResource,\n    CanvasResource,\n    CubeResource,\n    ImageResource,\n    ImageBitmapResource,\n    SVGResource,\n    VideoResource };\n","/**\n * System is a base class used for extending systems used by the {@link PIXI.Renderer}\n *\n * @see PIXI.Renderer#addSystem\n * @class\n * @memberof PIXI\n */\nexport default class System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        /**\n         * The renderer this manager works for.\n         *\n         * @member {PIXI.Renderer}\n         */\n        this.renderer = renderer;\n    }\n\n    /**\n     * Generic destroy methods to be overridden by the subclass\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n}\n","import BufferResource from './BufferResource';\n\n/**\n * Resource type for DepthTexture.\n * @class\n * @extends PIXI.resources.BufferResource\n * @memberof PIXI.resources\n */\nexport default class DepthResource extends BufferResource\n{\n    /**\n     * Upload the texture to the GPU.\n     * @param {PIXI.Renderer} renderer Upload to the renderer\n     * @param {PIXI.BaseTexture} baseTexture Reference to parent texture\n     * @param {PIXI.GLTexture} glTexture glTexture\n     * @returns {boolean} true is success\n     */\n    upload(renderer, baseTexture, glTexture)\n    {\n        const gl = renderer.gl;\n\n        gl.pixelStorei(gl.UNPACK_PREMULTIPLY_ALPHA_WEBGL, baseTexture.premultiplyAlpha);\n\n        if (glTexture.width === baseTexture.width && glTexture.height === baseTexture.height)\n        {\n            gl.texSubImage2D(\n                baseTexture.target,\n                0,\n                0,\n                0,\n                baseTexture.width,\n                baseTexture.height,\n                baseTexture.format,\n                baseTexture.type,\n                this.data\n            );\n        }\n        else\n        {\n            glTexture.width = baseTexture.width;\n            glTexture.height = baseTexture.height;\n\n            gl.texImage2D(\n                baseTexture.target,\n                0,\n                gl.DEPTH_COMPONENT16, // Needed for depth to render properly in webgl2.0\n                baseTexture.width,\n                baseTexture.height,\n                0,\n                baseTexture.format,\n                baseTexture.type,\n                this.data\n            );\n        }\n\n        return true;\n    }\n}\n","import { Runner } from '@pixi/runner';\nimport Texture from '../textures/BaseTexture';\nimport DepthResource from '../textures/resources/DepthResource';\nimport { FORMATS, TYPES } from '@pixi/constants';\n\n/**\n * Frame buffer used by the BaseRenderTexture\n *\n * @class\n * @memberof PIXI\n */\nexport default class Framebuffer\n{\n    /**\n     * @param {number} width - Width of the frame buffer\n     * @param {number} height - Height of the frame buffer\n     */\n    constructor(width, height)\n    {\n        this.width = Math.ceil(width || 100);\n        this.height = Math.ceil(height || 100);\n\n        this.stencil = false;\n        this.depth = false;\n\n        this.dirtyId = 0;\n        this.dirtyFormat = 0;\n        this.dirtySize = 0;\n\n        this.depthTexture = null;\n        this.colorTextures = [];\n\n        this.glFramebuffers = {};\n\n        this.disposeRunner = new Runner('disposeFramebuffer', 2);\n    }\n\n    /**\n     * Reference to the colorTexture.\n     *\n     * @member {PIXI.Texture[]}\n     * @readonly\n     */\n    get colorTexture()\n    {\n        return this.colorTextures[0];\n    }\n\n    /**\n     * Add texture to the colorTexture array\n     *\n     * @param {number} [index=0] - Index of the array to add the texture to\n     * @param {PIXI.Texture} [texture] - Texture to add to the array\n     */\n    addColorTexture(index = 0, texture)\n    {\n        // TODO add some validation to the texture - same width / height etc?\n        this.colorTextures[index] = texture || new Texture(null, { scaleMode: 0,\n            resolution: 1,\n            mipmap: false,\n            width: this.width,\n            height: this.height });// || new Texture();\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Add a depth texture to the frame buffer\n     *\n     * @param {PIXI.Texture} [texture] - Texture to add\n     */\n    addDepthTexture(texture)\n    {\n        /* eslint-disable max-len */\n        this.depthTexture = texture || new Texture(new DepthResource(null, { width: this.width, height: this.height }), { scaleMode: 0,\n            resolution: 1,\n            width: this.width,\n            height: this.height,\n            mipmap: false,\n            format: FORMATS.DEPTH_COMPONENT,\n            type: TYPES.UNSIGNED_SHORT });// UNSIGNED_SHORT;\n        /* eslint-disable max-len */\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Enable depth on the frame buffer\n     */\n    enableDepth()\n    {\n        this.depth = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Enable stencil on the frame buffer\n     */\n    enableStencil()\n    {\n        this.stencil = true;\n\n        this.dirtyId++;\n        this.dirtyFormat++;\n\n        return this;\n    }\n\n    /**\n     * Resize the frame buffer\n     *\n     * @param {number} width - Width of the frame buffer to resize to\n     * @param {number} height - Height of the frame buffer to resize to\n     */\n    resize(width, height)\n    {\n        width = Math.ceil(width);\n        height = Math.ceil(height);\n\n        if (width === this.width && height === this.height) return;\n\n        this.width = width;\n        this.height = height;\n\n        this.dirtyId++;\n        this.dirtySize++;\n\n        for (let i = 0; i < this.colorTextures.length; i++)\n        {\n            const texture = this.colorTextures[i];\n            const resolution = texture.resolution;\n\n            // take into acount the fact the texture may have a different resolution..\n            texture.setSize(width / resolution, height / resolution);\n        }\n\n        if (this.depthTexture)\n        {\n            const resolution = this.depthTexture.resolution;\n\n            this.depthTexture.setSize(width / resolution, height / resolution);\n        }\n    }\n\n    /**\n     * disposes WebGL resources that are connected to this geometry\n     */\n    dispose()\n    {\n        this.disposeRunner.run(this, false);\n    }\n}\n","import BaseTexture from '../textures/BaseTexture';\nimport Framebuffer from '../framebuffer/Framebuffer';\n\n/**\n * A BaseRenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a BaseRenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * A BaseRenderTexture takes a snapshot of any Display Object given to its render method. The position\n * and rotation of the given Display Objects is ignored. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer();\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 800, height: 600 });\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, renderTexture);\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let baseRenderTexture = new PIXI.BaseRenderTexture({ width: 100, height: 100 });\n * let renderTexture = new PIXI.RenderTexture(baseRenderTexture);\n *\n * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture\n * ```\n *\n * @class\n * @extends PIXI.BaseTexture\n * @memberof PIXI\n */\nexport default class BaseRenderTexture extends BaseTexture\n{\n    /**\n     * @param {object} [options]\n     * @param {number} [options.width=100] - The width of the base render texture.\n     * @param {number} [options.height=100] - The height of the base render texture.\n     * @param {PIXI.SCALE_MODES} [options.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the texture being generated.\n     */\n    constructor(options)\n    {\n        if (typeof options === 'number')\n        {\n            /* eslint-disable prefer-rest-params */\n            // Backward compatibility of signature\n            const width = arguments[0];\n            const height = arguments[1];\n            const scaleMode = arguments[2];\n            const resolution = arguments[3];\n\n            options = { width, height, scaleMode, resolution };\n            /* eslint-enable prefer-rest-params */\n        }\n\n        super(null, options);\n\n        const { width, height } = options || {};\n\n        // Set defaults\n        this.mipmap = false;\n        this.width = Math.ceil(width) || 100;\n        this.height = Math.ceil(height) || 100;\n        this.valid = true;\n\n        /**\n         * A reference to the canvas render target (we only need one as this can be shared across renderers)\n         *\n         * @protected\n         * @member {object}\n         */\n        this._canvasRenderTarget = null;\n\n        this.clearColor = [0, 0, 0, 0];\n\n        this.framebuffer = new Framebuffer(this.width * this.resolution, this.height * this.resolution)\n            .addColorTexture(0, this);\n\n        // TODO - could this be added the systems?\n\n        /**\n         * The data structure for the stencil masks.\n         *\n         * @member {PIXI.Graphics[]}\n         */\n        this.stencilMaskStack = [];\n\n        /**\n         * The data structure for the filters.\n         *\n         * @member {PIXI.Graphics[]}\n         */\n        this.filterStack = [{}];\n    }\n\n    /**\n     * Resizes the BaseRenderTexture.\n     *\n     * @param {number} width - The width to resize to.\n     * @param {number} height - The height to resize to.\n     */\n    resize(width, height)\n    {\n        width = Math.ceil(width);\n        height = Math.ceil(height);\n        this.framebuffer.resize(width * this.resolution, height * this.resolution);\n    }\n\n    /**\n     * Frees the texture and framebuffer from WebGL memory without destroying this texture object.\n     * This means you can still use the texture later which will upload it to GPU\n     * memory again.\n     *\n     * @fires PIXI.BaseTexture#dispose\n     */\n    dispose()\n    {\n        this.framebuffer.dispose();\n\n        super.dispose();\n    }\n\n    /**\n     * Destroys this texture.\n     *\n     */\n    destroy()\n    {\n        super.destroy(true);\n\n        this.framebuffer = null;\n    }\n}\n","import { GroupD8 } from '@pixi/math';\n\n/**\n * Stores a texture's frame in UV coordinates, in\n * which everything lies in the rectangle `[(0,0), (1,0),\n * (1,1), (0,1)]`.\n *\n * | Corner       | Coordinates |\n * |--------------|-------------|\n * | Top-Left     | `(x0,y0)`   |\n * | Top-Right    | `(x1,y1)`   |\n * | Bottom-Right | `(x2,y2)`   |\n * | Bottom-Left  | `(x3,y3)`   |\n *\n * @class\n * @protected\n * @memberof PIXI\n */\nexport default class TextureUvs\n{\n    constructor()\n    {\n        /**\n         * X-component of top-left corner `(x0,y0)`.\n         *\n         * @member {number}\n         */\n        this.x0 = 0;\n\n        /**\n         * Y-component of top-left corner `(x0,y0)`.\n         *\n         * @member {number}\n         */\n        this.y0 = 0;\n\n        /**\n         * X-component of top-right corner `(x1,y1)`.\n         *\n         * @member {number}\n         */\n        this.x1 = 1;\n\n        /**\n         * Y-component of top-right corner `(x1,y1)`.\n         *\n         * @member {number}\n         */\n        this.y1 = 0;\n\n        /**\n         * X-component of bottom-right corner `(x2,y2)`.\n         *\n         * @member {number}\n         */\n        this.x2 = 1;\n\n        /**\n         * Y-component of bottom-right corner `(x2,y2)`.\n         *\n         * @member {number}\n         */\n        this.y2 = 1;\n\n        /**\n         * X-component of bottom-left corner `(x3,y3)`.\n         *\n         * @member {number}\n         */\n        this.x3 = 0;\n\n        /**\n         * Y-component of bottom-right corner `(x3,y3)`.\n         *\n         * @member {number}\n         */\n        this.y3 = 1;\n\n        this.uvsFloat32 = new Float32Array(8);\n    }\n\n    /**\n     * Sets the texture Uvs based on the given frame information.\n     *\n     * @protected\n     * @param {PIXI.Rectangle} frame - The frame of the texture\n     * @param {PIXI.Rectangle} baseFrame - The base frame of the texture\n     * @param {number} rotate - Rotation of frame, see {@link PIXI.GroupD8}\n     */\n    set(frame, baseFrame, rotate)\n    {\n        const tw = baseFrame.width;\n        const th = baseFrame.height;\n\n        if (rotate)\n        {\n            // width and height div 2 div baseFrame size\n            const w2 = frame.width / 2 / tw;\n            const h2 = frame.height / 2 / th;\n\n            // coordinates of center\n            const cX = (frame.x / tw) + w2;\n            const cY = (frame.y / th) + h2;\n\n            rotate = GroupD8.add(rotate, GroupD8.NW); // NW is top-left corner\n            this.x0 = cX + (w2 * GroupD8.uX(rotate));\n            this.y0 = cY + (h2 * GroupD8.uY(rotate));\n\n            rotate = GroupD8.add(rotate, 2); // rotate 90 degrees clockwise\n            this.x1 = cX + (w2 * GroupD8.uX(rotate));\n            this.y1 = cY + (h2 * GroupD8.uY(rotate));\n\n            rotate = GroupD8.add(rotate, 2);\n            this.x2 = cX + (w2 * GroupD8.uX(rotate));\n            this.y2 = cY + (h2 * GroupD8.uY(rotate));\n\n            rotate = GroupD8.add(rotate, 2);\n            this.x3 = cX + (w2 * GroupD8.uX(rotate));\n            this.y3 = cY + (h2 * GroupD8.uY(rotate));\n        }\n        else\n        {\n            this.x0 = frame.x / tw;\n            this.y0 = frame.y / th;\n\n            this.x1 = (frame.x + frame.width) / tw;\n            this.y1 = frame.y / th;\n\n            this.x2 = (frame.x + frame.width) / tw;\n            this.y2 = (frame.y + frame.height) / th;\n\n            this.x3 = frame.x / tw;\n            this.y3 = (frame.y + frame.height) / th;\n        }\n\n        this.uvsFloat32[0] = this.x0;\n        this.uvsFloat32[1] = this.y0;\n        this.uvsFloat32[2] = this.x1;\n        this.uvsFloat32[3] = this.y1;\n        this.uvsFloat32[4] = this.x2;\n        this.uvsFloat32[5] = this.y2;\n        this.uvsFloat32[6] = this.x3;\n        this.uvsFloat32[7] = this.y3;\n    }\n}\n","import BaseTexture from './BaseTexture';\nimport ImageResource from './resources/ImageResource';\nimport CanvasResource from './resources/CanvasResource';\nimport TextureUvs from './TextureUvs';\nimport { settings } from '@pixi/settings';\nimport { Rectangle, Point } from '@pixi/math';\nimport { uid, TextureCache, getResolutionOfUrl, EventEmitter } from '@pixi/utils';\n\nconst DEFAULT_UVS = new TextureUvs();\n\n/**\n * A texture stores the information that represents an image or part of an image.\n *\n * It cannot be added to the display list directly; instead use it as the texture for a Sprite.\n * If no frame is provided for a texture, then the whole image is used.\n *\n * You can directly create a texture from an image and then reuse it multiple times like this :\n *\n * ```js\n * let texture = PIXI.Texture.from('assets/image.png');\n * let sprite1 = new PIXI.Sprite(texture);\n * let sprite2 = new PIXI.Sprite(texture);\n * ```\n *\n * If you didnt pass the texture frame to constructor, it enables `noFrame` mode:\n * it subscribes on baseTexture events, it automatically resizes at the same time as baseTexture.\n *\n * Textures made from SVGs, loaded or not, cannot be used before the file finishes processing.\n * You can check for this by checking the sprite's _textureID property.\n * ```js\n * var texture = PIXI.Texture.from('assets/image.svg');\n * var sprite1 = new PIXI.Sprite(texture);\n * //sprite1._textureID should not be undefined if the texture has finished processing the SVG file\n * ```\n * You can use a ticker or rAF to ensure your sprites load the finished textures after processing. See issue #3068.\n *\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nexport default class Texture extends EventEmitter\n{\n    /**\n     * @param {PIXI.BaseTexture} baseTexture - The base texture source to create the texture from\n     * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show\n     * @param {PIXI.Rectangle} [orig] - The area of original texture\n     * @param {PIXI.Rectangle} [trim] - Trimmed rectangle of original texture\n     * @param {number} [rotate] - indicates how the texture was rotated by texture packer. See {@link PIXI.GroupD8}\n     * @param {PIXI.Point} [anchor] - Default anchor point used for sprite placement / rotation\n     */\n    constructor(baseTexture, frame, orig, trim, rotate, anchor)\n    {\n        super();\n\n        /**\n         * Does this Texture have any frame data assigned to it?\n         *\n         * This mode is enabled automatically if no frame was passed inside constructor.\n         *\n         * In this mode texture is subscribed to baseTexture events, and fires `update` on any change.\n         *\n         * Beware, after loading or resize of baseTexture event can fired two times!\n         * If you want more control, subscribe on baseTexture itself.\n         *\n         * ```js\n         * texture.on('update', () => {});\n         * ```\n         *\n         * Any assignment of `frame` switches off `noFrame` mode.\n         *\n         * @member {boolean}\n         */\n        this.noFrame = false;\n\n        if (!frame)\n        {\n            this.noFrame = true;\n            frame = new Rectangle(0, 0, 1, 1);\n        }\n\n        if (baseTexture instanceof Texture)\n        {\n            baseTexture = baseTexture.baseTexture;\n        }\n\n        /**\n         * The base texture that this texture uses.\n         *\n         * @member {PIXI.BaseTexture}\n         */\n        this.baseTexture = baseTexture;\n\n        /**\n         * This is the area of the BaseTexture image to actually copy to the Canvas / WebGL when rendering,\n         * irrespective of the actual frame size or placement (which can be influenced by trimmed texture atlases)\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this._frame = frame;\n\n        /**\n         * This is the trimmed area of original texture, before it was put in atlas\n         * Please call `updateUvs()` after you change coordinates of `trim` manually.\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.trim = trim;\n\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean}\n         */\n        this.valid = false;\n\n        /**\n         * This will let a renderer know that a texture has been updated (used mainly for WebGL uv updates)\n         *\n         * @member {boolean}\n         */\n        this.requiresUpdate = false;\n\n        /**\n         * The WebGL UV data cache. Can be used as quad UV\n         *\n         * @member {PIXI.TextureUvs}\n         * @protected\n         */\n        this._uvs = DEFAULT_UVS;\n\n        /**\n         * Default TextureMatrix instance for this texture\n         * By default that object is not created because its heavy\n         *\n         * @member {PIXI.TextureMatrix}\n         */\n        this.uvMatrix = null;\n\n        /**\n         * This is the area of original texture, before it was put in atlas\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.orig = orig || frame;// new Rectangle(0, 0, 1, 1);\n\n        this._rotate = Number(rotate || 0);\n\n        if (rotate === true)\n        {\n            // this is old texturepacker legacy, some games/libraries are passing \"true\" for rotated textures\n            this._rotate = 2;\n        }\n        else if (this._rotate % 2 !== 0)\n        {\n            throw new Error('attempt to use diamond-shaped UVs. If you are sure, set rotation manually');\n        }\n\n        /**\n         * Anchor point that is used as default if sprite is created with this texture.\n         * Changing the `defaultAnchor` at a later point of time will not update Sprite's anchor point.\n         * @member {PIXI.Point}\n         * @default {0,0}\n         */\n        this.defaultAnchor = anchor ? new Point(anchor.x, anchor.y) : new Point(0, 0);\n\n        /**\n         * Update ID is observed by sprites and TextureMatrix instances.\n         * Call updateUvs() to increment it.\n         *\n         * @member {number}\n         * @protected\n         */\n\n        this._updateID = 0;\n\n        /**\n         * The ids under which this Texture has been added to the texture cache. This is\n         * automatically set as long as Texture.addToCache is used, but may not be set if a\n         * Texture is added directly to the TextureCache array.\n         *\n         * @member {string[]}\n         */\n        this.textureCacheIds = [];\n\n        if (!baseTexture.valid)\n        {\n            baseTexture.once('loaded', this.onBaseTextureUpdated, this);\n        }\n        else if (this.noFrame)\n        {\n            // if there is no frame we should monitor for any base texture changes..\n            if (baseTexture.valid)\n            {\n                this.onBaseTextureUpdated(baseTexture);\n            }\n        }\n        else\n        {\n            this.frame = frame;\n        }\n\n        if (this.noFrame)\n        {\n            baseTexture.on('update', this.onBaseTextureUpdated, this);\n        }\n    }\n\n    /**\n     * Updates this texture on the gpu.\n     *\n     * Calls the TextureResource update.\n     *\n     * If you adjusted `frame` manually, please call `updateUvs()` instead.\n     *\n     */\n    update()\n    {\n        if (this.baseTexture.resource)\n        {\n            this.baseTexture.resource.update();\n        }\n    }\n\n    /**\n     * Called when the base texture is updated\n     *\n     * @protected\n     * @param {PIXI.BaseTexture} baseTexture - The base texture.\n     */\n    onBaseTextureUpdated(baseTexture)\n    {\n        if (this.noFrame)\n        {\n            if (!this.baseTexture.valid)\n            {\n                return;\n            }\n\n            this._frame.width = baseTexture.width;\n            this._frame.height = baseTexture.height;\n            this.valid = true;\n            this.updateUvs();\n        }\n        else\n        {\n            // TODO this code looks confusing.. boo to abusing getters and setters!\n            // if user gave us frame that has bigger size than resized texture it can be a problem\n            this.frame = this._frame;\n        }\n\n        this.emit('update', this);\n    }\n\n    /**\n     * Destroys this texture\n     *\n     * @param {boolean} [destroyBase=false] Whether to destroy the base texture as well\n     */\n    destroy(destroyBase)\n    {\n        if (this.baseTexture)\n        {\n            if (destroyBase)\n            {\n                const { resource } = this.baseTexture;\n\n                // delete the texture if it exists in the texture cache..\n                // this only needs to be removed if the base texture is actually destroyed too..\n                if (resource && TextureCache[resource.url])\n                {\n                    Texture.removeFromCache(resource.url);\n                }\n\n                this.baseTexture.destroy();\n            }\n\n            this.baseTexture.off('update', this.onBaseTextureUpdated, this);\n\n            this.baseTexture = null;\n        }\n\n        this._frame = null;\n        this._uvs = null;\n        this.trim = null;\n        this.orig = null;\n\n        this.valid = false;\n\n        Texture.removeFromCache(this);\n        this.textureCacheIds = null;\n    }\n\n    /**\n     * Creates a new texture object that acts the same as this one.\n     *\n     * @return {PIXI.Texture} The new texture\n     */\n    clone()\n    {\n        return new Texture(this.baseTexture, this.frame, this.orig, this.trim, this.rotate, this.defaultAnchor);\n    }\n\n    /**\n     * Updates the internal WebGL UV cache. Use it after you change `frame` or `trim` of the texture.\n     * Call it after changing the frame\n     */\n    updateUvs()\n    {\n        if (this._uvs === DEFAULT_UVS)\n        {\n            this._uvs = new TextureUvs();\n        }\n\n        this._uvs.set(this._frame, this.baseTexture, this.rotate);\n\n        this._updateID++;\n    }\n\n    /**\n     * Helper function that creates a new Texture based on the source you provide.\n     * The source can be - frame id, image url, video url, canvas element, video element, base texture\n     *\n     * @static\n     * @param {number|string|HTMLImageElement|HTMLCanvasElement|HTMLVideoElement|PIXI.BaseTexture} source\n     *        Source to create texture from\n     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return {PIXI.Texture} The newly created texture\n     */\n    static from(source, options = {})\n    {\n        let cacheId = null;\n\n        if (typeof source === 'string')\n        {\n            cacheId = source;\n        }\n        else\n        {\n            if (!source._pixiId)\n            {\n                source._pixiId = `pixiid_${uid()}`;\n            }\n\n            cacheId = source._pixiId;\n        }\n\n        let texture = TextureCache[cacheId];\n\n        if (!texture)\n        {\n            if (!options.resolution)\n            {\n                options.resolution = getResolutionOfUrl(source);\n            }\n\n            texture = new Texture(new BaseTexture(source, options));\n            texture.baseTexture.cacheId = cacheId;\n\n            BaseTexture.addToCache(texture.baseTexture, cacheId);\n            Texture.addToCache(texture, cacheId);\n        }\n\n        // lets assume its a base texture!\n        return texture;\n    }\n\n    /**\n     * Create a new Texture with a BufferResource from a Float32Array.\n     * RGBA values are floats from 0 to 1.\n     * @static\n     * @param {Float32Array|Uint8Array} buffer The optional array to use, if no data\n     *        is provided, a new Float32Array is created.\n     * @param {number} width - Width of the resource\n     * @param {number} height - Height of the resource\n     * @param {object} [options] See {@link PIXI.BaseTexture}'s constructor for options.\n     * @return {PIXI.Texture} The resulting new BaseTexture\n     */\n    static fromBuffer(buffer, width, height, options)\n    {\n        return new Texture(BaseTexture.fromBuffer(buffer, width, height, options));\n    }\n\n    /**\n     * Create a texture from a source and add to the cache.\n     *\n     * @static\n     * @param {HTMLImageElement|HTMLCanvasElement} source - The input source.\n     * @param {String} imageUrl - File name of texture, for cache and resolving resolution.\n     * @param {String} [name] - Human readable name for the texture cache. If no name is\n     *        specified, only `imageUrl` will be used as the cache ID.\n     * @return {PIXI.Texture} Output texture\n     */\n    static fromLoader(source, imageUrl, name)\n    {\n        const resource = new ImageResource(source);\n\n        resource.url = imageUrl;\n\n        const baseTexture = new BaseTexture(resource, {\n            scaleMode: settings.SCALE_MODE,\n            resolution: getResolutionOfUrl(imageUrl),\n        });\n\n        const texture = new Texture(baseTexture);\n\n        // No name, use imageUrl instead\n        if (!name)\n        {\n            name = imageUrl;\n        }\n\n        // lets also add the frame to pixi's global cache for 'fromLoader' function\n        BaseTexture.addToCache(texture.baseTexture, name);\n        Texture.addToCache(texture, name);\n\n        // also add references by url if they are different.\n        if (name !== imageUrl)\n        {\n            BaseTexture.addToCache(texture.baseTexture, imageUrl);\n            Texture.addToCache(texture, imageUrl);\n        }\n\n        return texture;\n    }\n\n    /**\n     * Adds a Texture to the global TextureCache. This cache is shared across the whole PIXI object.\n     *\n     * @static\n     * @param {PIXI.Texture} texture - The Texture to add to the cache.\n     * @param {string} id - The id that the Texture will be stored against.\n     */\n    static addToCache(texture, id)\n    {\n        if (id)\n        {\n            if (texture.textureCacheIds.indexOf(id) === -1)\n            {\n                texture.textureCacheIds.push(id);\n            }\n\n            if (TextureCache[id])\n            {\n                // eslint-disable-next-line no-console\n                console.warn(`Texture added to the cache with an id [${id}] that already had an entry`);\n            }\n\n            TextureCache[id] = texture;\n        }\n    }\n\n    /**\n     * Remove a Texture from the global TextureCache.\n     *\n     * @static\n     * @param {string|PIXI.Texture} texture - id of a Texture to be removed, or a Texture instance itself\n     * @return {PIXI.Texture|null} The Texture that was removed\n     */\n    static removeFromCache(texture)\n    {\n        if (typeof texture === 'string')\n        {\n            const textureFromCache = TextureCache[texture];\n\n            if (textureFromCache)\n            {\n                const index = textureFromCache.textureCacheIds.indexOf(texture);\n\n                if (index > -1)\n                {\n                    textureFromCache.textureCacheIds.splice(index, 1);\n                }\n\n                delete TextureCache[texture];\n\n                return textureFromCache;\n            }\n        }\n        else if (texture && texture.textureCacheIds)\n        {\n            for (let i = 0; i < texture.textureCacheIds.length; ++i)\n            {\n                // Check that texture matches the one being passed in before deleting it from the cache.\n                if (TextureCache[texture.textureCacheIds[i]] === texture)\n                {\n                    delete TextureCache[texture.textureCacheIds[i]];\n                }\n            }\n\n            texture.textureCacheIds.length = 0;\n\n            return texture;\n        }\n\n        return null;\n    }\n\n    /**\n     * Returns resolution of baseTexture\n     *\n     * @member {number}\n     * @readonly\n     */\n    get resolution()\n    {\n        return this.baseTexture.resolution;\n    }\n\n    /**\n     * The frame specifies the region of the base texture that this texture uses.\n     * Please call `updateUvs()` after you change coordinates of `frame` manually.\n     *\n     * @member {PIXI.Rectangle}\n     */\n    get frame()\n    {\n        return this._frame;\n    }\n\n    set frame(frame) // eslint-disable-line require-jsdoc\n    {\n        this._frame = frame;\n\n        this.noFrame = false;\n\n        const { x, y, width, height } = frame;\n        const xNotFit = x + width > this.baseTexture.width;\n        const yNotFit = y + height > this.baseTexture.height;\n\n        if (xNotFit || yNotFit)\n        {\n            const relationship = xNotFit && yNotFit ? 'and' : 'or';\n            const errorX = `X: ${x} + ${width} = ${x + width} > ${this.baseTexture.width}`;\n            const errorY = `Y: ${y} + ${height} = ${y + height} > ${this.baseTexture.height}`;\n\n            throw new Error('Texture Error: frame does not fit inside the base Texture dimensions: '\n                + `${errorX} ${relationship} ${errorY}`);\n        }\n\n        this.valid = width && height && this.baseTexture.valid;\n\n        if (!this.trim && !this.rotate)\n        {\n            this.orig = frame;\n        }\n\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /**\n     * Indicates whether the texture is rotated inside the atlas\n     * set to 2 to compensate for texture packer rotation\n     * set to 6 to compensate for spine packer rotation\n     * can be used to rotate or mirror sprites\n     * See {@link PIXI.GroupD8} for explanation\n     *\n     * @member {number}\n     */\n    get rotate()\n    {\n        return this._rotate;\n    }\n\n    set rotate(rotate) // eslint-disable-line require-jsdoc\n    {\n        this._rotate = rotate;\n        if (this.valid)\n        {\n            this.updateUvs();\n        }\n    }\n\n    /**\n     * The width of the Texture in pixels.\n     *\n     * @member {number}\n     */\n    get width()\n    {\n        return this.orig.width;\n    }\n\n    /**\n     * The height of the Texture in pixels.\n     *\n     * @member {number}\n     */\n    get height()\n    {\n        return this.orig.height;\n    }\n}\n\nfunction createWhiteTexture()\n{\n    const canvas = document.createElement('canvas');\n\n    canvas.width = 16;\n    canvas.height = 16;\n\n    const context = canvas.getContext('2d');\n\n    context.fillStyle = 'white';\n    context.fillRect(0, 0, 16, 16);\n\n    return new Texture(new BaseTexture(new CanvasResource(canvas)));\n}\n\nfunction removeAllHandlers(tex)\n{\n    tex.destroy = function _emptyDestroy() { /* empty */ };\n    tex.on = function _emptyOn() { /* empty */ };\n    tex.once = function _emptyOnce() { /* empty */ };\n    tex.emit = function _emptyEmit() { /* empty */ };\n}\n\n/**\n * An empty texture, used often to not have to create multiple empty textures.\n * Can not be destroyed.\n *\n * @static\n * @constant\n * @member {PIXI.Texture}\n */\nTexture.EMPTY = new Texture(new BaseTexture());\nremoveAllHandlers(Texture.EMPTY);\nremoveAllHandlers(Texture.EMPTY.baseTexture);\n\n/**\n * A white texture of 16x16 size, used for graphics and other things\n * Can not be destroyed.\n *\n * @static\n * @constant\n * @member {PIXI.Texture}\n */\nTexture.WHITE = createWhiteTexture();\nremoveAllHandlers(Texture.WHITE);\nremoveAllHandlers(Texture.WHITE.baseTexture);\n","import BaseRenderTexture from './BaseRenderTexture';\nimport Texture from '../textures/Texture';\n\n/**\n * A RenderTexture is a special texture that allows any PixiJS display object to be rendered to it.\n *\n * __Hint__: All DisplayObjects (i.e. Sprites) that render to a RenderTexture should be preloaded\n * otherwise black rectangles will be drawn instead.\n *\n * __Hint-2__: The actual memory allocation will happen on first render.\n * You shouldn't create renderTextures each frame just to delete them after, try to reuse them.\n *\n * A RenderTexture takes a snapshot of any Display Object given to its render method. For example:\n *\n * ```js\n * let renderer = PIXI.autoDetectRenderer();\n * let renderTexture = PIXI.RenderTexture.create(800, 600);\n * let sprite = PIXI.Sprite.from(\"spinObj_01.png\");\n *\n * sprite.position.x = 800/2;\n * sprite.position.y = 600/2;\n * sprite.anchor.x = 0.5;\n * sprite.anchor.y = 0.5;\n *\n * renderer.render(sprite, renderTexture);\n * ```\n *\n * The Sprite in this case will be rendered using its local transform. To render this sprite at 0,0\n * you can clear the transform\n *\n * ```js\n *\n * sprite.setTransform()\n *\n * let renderTexture = new PIXI.RenderTexture.create(100, 100);\n *\n * renderer.render(sprite, renderTexture);  // Renders to center of RenderTexture\n * ```\n *\n * @class\n * @extends PIXI.Texture\n * @memberof PIXI\n */\nexport default class RenderTexture extends Texture\n{\n    /**\n     * @param {PIXI.BaseRenderTexture} baseRenderTexture - The base texture object that this texture uses\n     * @param {PIXI.Rectangle} [frame] - The rectangle frame of the texture to show\n     */\n    constructor(baseRenderTexture, frame)\n    {\n        // support for legacy..\n        let _legacyRenderer = null;\n\n        if (!(baseRenderTexture instanceof BaseRenderTexture))\n        {\n            /* eslint-disable prefer-rest-params, no-console */\n            const width = arguments[1];\n            const height = arguments[2];\n            const scaleMode = arguments[3];\n            const resolution = arguments[4];\n\n            // we have an old render texture..\n            console.warn(`Please use RenderTexture.create(${width}, ${height}) instead of the ctor directly.`);\n            _legacyRenderer = arguments[0];\n            /* eslint-enable prefer-rest-params, no-console */\n\n            frame = null;\n            baseRenderTexture = new BaseRenderTexture({\n                width,\n                height,\n                scaleMode,\n                resolution,\n            });\n        }\n\n        /**\n         * The base texture object that this texture uses\n         *\n         * @member {PIXI.BaseTexture}\n         */\n        super(baseRenderTexture, frame);\n\n        this.legacyRenderer = _legacyRenderer;\n\n        /**\n         * This will let the renderer know if the texture is valid. If it's not then it cannot be rendered.\n         *\n         * @member {boolean}\n         */\n        this.valid = true;\n\n        /**\n         * Stores `sourceFrame` when this texture is inside current filter stack.\n         * You can read it inside filters.\n         *\n         * @readonly\n         * @member {PIXI.Rectangle}\n         */\n        this.filterFrame = null;\n\n        /**\n         * The key for pooled texture of FilterSystem\n         * @protected\n         * @member {string}\n         */\n        this.filterPoolKey = null;\n\n        this.updateUvs();\n    }\n\n    /**\n     * Resizes the RenderTexture.\n     *\n     * @param {number} width - The width to resize to.\n     * @param {number} height - The height to resize to.\n     * @param {boolean} [resizeBaseTexture=true] - Should the baseTexture.width and height values be resized as well?\n     */\n    resize(width, height, resizeBaseTexture = true)\n    {\n        width = Math.ceil(width);\n        height = Math.ceil(height);\n\n        // TODO - could be not required..\n        this.valid = (width > 0 && height > 0);\n\n        this._frame.width = this.orig.width = width;\n        this._frame.height = this.orig.height = height;\n\n        if (resizeBaseTexture)\n        {\n            this.baseTexture.resize(width, height);\n        }\n\n        this.updateUvs();\n    }\n\n    /**\n     * Changes the resolution of baseTexture, but does not change framebuffer size.\n     *\n     * @param {number} resolution - The new resolution to apply to RenderTexture\n     */\n    setResolution(resolution)\n    {\n        const { baseTexture } = this;\n\n        if (baseTexture.resolution === resolution)\n        {\n            return;\n        }\n\n        baseTexture.setResolution(resolution);\n        this.resize(baseTexture.width, baseTexture.height, false);\n    }\n\n    /**\n     * A short hand way of creating a render texture.\n     *\n     * @param {object} [options] - Options\n     * @param {number} [options.width=100] - The width of the render texture\n     * @param {number} [options.height=100] - The height of the render texture\n     * @param {number} [options.scaleMode=PIXI.settings.SCALE_MODE] - See {@link PIXI.SCALE_MODES} for possible values\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the texture being generated\n     * @return {PIXI.RenderTexture} The new render texture\n     */\n    static create(options)\n    {\n        // fallback, old-style: create(width, height, scaleMode, resolution)\n        if (typeof options === 'number')\n        {\n            /* eslint-disable prefer-rest-params */\n            options = {\n                width: options,\n                height: arguments[1],\n                scaleMode: arguments[2],\n                resolution: arguments[3],\n            };\n            /* eslint-enable prefer-rest-params */\n        }\n\n        return new RenderTexture(new BaseRenderTexture(options));\n    }\n}\n","import RenderTexture from './RenderTexture';\nimport BaseRenderTexture from './BaseRenderTexture';\nimport { nextPow2 } from '@pixi/utils';\n\n/**\n * Experimental!\n *\n * Texture pool, used by FilterSystem and plugins\n * Stores collection of temporary pow2 or screen-sized renderTextures\n *\n * If you use custom RenderTexturePool for your filters, you can use methods\n * `getFilterTexture` and `returnFilterTexture` same as in\n *\n * @class\n * @memberof PIXI\n */\nexport default class RenderTexturePool\n{\n    /**\n     * @param {object} [textureOptions] - options that will be passed to BaseRenderTexture constructor\n     * @param {PIXI.SCALE_MODES} [textureOptions.scaleMode] - See {@link PIXI.SCALE_MODES} for possible values.\n     */\n    constructor(textureOptions)\n    {\n        this.texturePool = {};\n        this.textureOptions = textureOptions || {};\n        /**\n         * Allow renderTextures of the same size as screen, not just pow2\n         *\n         * Automatically sets to true after `setScreenSize`\n         *\n         * @member {boolean}\n         * @default false\n         */\n        this.enableFullScreen = false;\n\n        this._pixelsWidth = 0;\n        this._pixelsHeight = 0;\n    }\n\n    /**\n     * creates of texture with params that were specified in pool constructor\n     *\n     * @param {number} realWidth width of texture in pixels\n     * @param {number} realHeight height of texture in pixels\n     * @returns {RenderTexture}\n     */\n    createTexture(realWidth, realHeight)\n    {\n        const baseRenderTexture = new BaseRenderTexture(Object.assign({\n            width: realWidth,\n            height: realHeight,\n            resolution: 1,\n        }, this.textureOptions));\n\n        return new RenderTexture(baseRenderTexture);\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     *\n     * @protected\n     * @param {number} minWidth - The minimum width of the render texture in real pixels.\n     * @param {number} minHeight - The minimum height of the render texture in real pixels.\n     * @param {number} [resolution=1] - The resolution of the render texture.\n     * @return {PIXI.RenderTexture} The new render texture.\n     */\n    getOptimalTexture(minWidth, minHeight, resolution = 1)\n    {\n        let key = RenderTexturePool.SCREEN_KEY;\n\n        minWidth *= resolution;\n        minHeight *= resolution;\n\n        if (!this.enableFullScreen || minWidth !== this._pixelsWidth || minHeight !== this._pixelsHeight)\n        {\n            minWidth = nextPow2(minWidth);\n            minHeight = nextPow2(minHeight);\n            key = ((minWidth & 0xFFFF) << 16) | (minHeight & 0xFFFF);\n        }\n\n        if (!this.texturePool[key])\n        {\n            this.texturePool[key] = [];\n        }\n\n        let renderTexture = this.texturePool[key].pop();\n\n        if (!renderTexture)\n        {\n            renderTexture = this.createTexture(minWidth, minHeight);\n        }\n\n        renderTexture.filterPoolKey = key;\n        renderTexture.setResolution(resolution);\n\n        return renderTexture;\n    }\n\n    /**\n     * Gets extra texture of the same size as input renderTexture\n     *\n     * `getFilterTexture(input, 0.5)` or `getFilterTexture(0.5, input)`\n     *\n     * @param {PIXI.RenderTexture} input renderTexture from which size and resolution will be copied\n     * @param {number} [resolution] override resolution of the renderTexture\n     *  It overrides, it does not multiply\n     * @returns {PIXI.RenderTexture}\n     */\n    getFilterTexture(input, resolution)\n    {\n        const filterTexture = this.getOptimalTexture(input.width, input.height, resolution || input.resolution);\n\n        filterTexture.filterFrame = input.filterFrame;\n\n        return filterTexture;\n    }\n\n    /**\n     * Place a render texture back into the pool.\n     * @param {PIXI.RenderTexture} renderTexture - The renderTexture to free\n     */\n    returnTexture(renderTexture)\n    {\n        const key = renderTexture.filterPoolKey;\n\n        renderTexture.filterFrame = null;\n        this.texturePool[key].push(renderTexture);\n    }\n\n    /**\n     * Alias for returnTexture, to be compliant with FilterSystem interface\n     * @param {PIXI.RenderTexture} renderTexture - The renderTexture to free\n     */\n    returnFilterTexture(renderTexture)\n    {\n        this.returnTexture(renderTexture);\n    }\n\n    /**\n     * Clears the pool\n     *\n     * @param {boolean} [destroyTextures=true] destroy all stored textures\n     */\n    clear(destroyTextures)\n    {\n        destroyTextures = destroyTextures !== false;\n        if (destroyTextures)\n        {\n            for (const i in this.texturePool)\n            {\n                const textures = this.texturePool[i];\n\n                if (textures)\n                {\n                    for (let j = 0; j < textures.length; j++)\n                    {\n                        textures[j].destroy(true);\n                    }\n                }\n            }\n        }\n\n        this.texturePool = {};\n    }\n\n    /**\n     * If screen size was changed, drops all screen-sized textures,\n     * sets new screen size, sets `enableFullScreen` to true\n     *\n     * Size is measured in pixels, `renderer.view` can be passed here, not `renderer.screen`\n     *\n     * @param {PIXI.ISize} size - Initial size of screen\n     */\n    setScreenSize(size)\n    {\n        if (size.width === this._pixelsWidth\n            && size.height === this._pixelsHeight)\n        {\n            return;\n        }\n\n        const screenKey = RenderTexturePool.SCREEN_KEY;\n        const textures = this.texturePool[screenKey];\n\n        this.enableFullScreen = size.width > 0 && size.height > 0;\n\n        if (textures)\n        {\n            for (let j = 0; j < textures.length; j++)\n            {\n                textures[j].destroy(true);\n            }\n        }\n        this.texturePool[screenKey] = [];\n\n        this._pixelsWidth = size.width;\n        this._pixelsHeight = size.height;\n    }\n}\n\n/**\n * Key that is used to store fullscreen renderTextures in a pool\n *\n * @static\n * @const {string}\n */\nRenderTexturePool.SCREEN_KEY = 'screen';\n","/* eslint-disable max-len */\n\n/**\n * Holds the information for a single attribute structure required to render geometry.\n *\n * This does not contain the actual data, but instead has a buffer id that maps to a {@link PIXI.Buffer}\n * This can include anything from positions, uvs, normals, colors etc.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Attribute\n{\n    /**\n     * @param {string} buffer  the id of the buffer that this attribute will look for\n     * @param {Number} [size=0] the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2.\n     * @param {Boolean} [normalized=false] should the data be normalized.\n     * @param {Number} [type=PIXI.TYPES.FLOAT] what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n     * @param {Number} [stride=0] How far apart (in floats) the start of each value is. (used for interleaving data)\n     * @param {Number} [start=0] How far into the array to start reading values (used for interleaving data)\n     */\n    constructor(buffer, size, normalized = false, type = 5126, stride, start, instance)\n    {\n        this.buffer = buffer;\n        this.size = size;\n        this.normalized = normalized;\n        this.type = type;\n        this.stride = stride;\n        this.start = start;\n        this.instance = instance;\n    }\n\n    /**\n     * Destroys the Attribute.\n     */\n    destroy()\n    {\n        this.buffer = null;\n    }\n\n    /**\n     * Helper function that creates an Attribute based on the information provided\n     *\n     * @static\n     * @param {string} buffer  the id of the buffer that this attribute will look for\n     * @param {Number} [size=2] the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n     * @param {Number} [stride=0] How far apart (in floats) the start of each value is. (used for interleaving data)\n     * @param {Number} [start=0] How far into the array to start reading values (used for interleaving data)\n     * @param {Boolean} [normalized=false] should the data be normalized.\n     *\n     * @returns {PIXI.Attribute} A new {@link PIXI.Attribute} based on the information provided\n     */\n    static from(buffer, size, normalized, type, stride)\n    {\n        return new Attribute(buffer, size, normalized, type, stride);\n    }\n}\n","import { Runner } from '@pixi/runner';\n\nlet UID = 0;\n/* eslint-disable max-len */\n\n/**\n * A wrapper for data so that it can be used and uploaded by WebGL\n *\n * @class\n * @memberof PIXI\n */\nexport default class Buffer\n{\n    /**\n     * @param {ArrayBuffer| SharedArrayBuffer|ArrayBufferView} data the data to store in the buffer.\n     * @param {boolean} [_static=true] `true` for static buffer\n     * @param {boolean} [index=false] `true` for index buffer\n     */\n    constructor(data, _static = true, index = false)\n    {\n        /**\n         * The data in the buffer, as a typed array\n         *\n         * @member {ArrayBuffer| SharedArrayBuffer|ArrayBufferView}\n         */\n        this.data = data || new Float32Array(1);\n\n        /**\n         * A map of renderer IDs to webgl buffer\n         *\n         * @private\n         * @member {object<number, GLBuffer>}\n         */\n        this._glBuffers = {};\n\n        this._updateID = 0;\n\n        this.index = index;\n\n        this.static = _static;\n\n        this.id = UID++;\n\n        this.disposeRunner = new Runner('disposeBuffer', 2);\n    }\n\n    // TODO could explore flagging only a partial upload?\n    /**\n     * flags this buffer as requiring an upload to the GPU\n     * @param {ArrayBuffer|SharedArrayBuffer|ArrayBufferView} [data] the data to update in the buffer.\n     */\n    update(data)\n    {\n        this.data = data || this.data;\n        this._updateID++;\n    }\n\n    /**\n     * disposes WebGL resources that are connected to this geometry\n     */\n    dispose()\n    {\n        this.disposeRunner.run(this, false);\n    }\n\n    /**\n     * Destroys the buffer\n     */\n    destroy()\n    {\n        this.dispose();\n\n        this.data = null;\n    }\n\n    /**\n     * Helper function that creates a buffer based on an array or TypedArray\n     *\n     * @static\n     * @param {ArrayBufferView | number[]} data the TypedArray that the buffer will store. If this is a regular Array it will be converted to a Float32Array.\n     * @return {PIXI.Buffer} A new Buffer based on the data provided.\n     */\n    static from(data)\n    {\n        if (data instanceof Array)\n        {\n            data = new Float32Array(data);\n        }\n\n        return new Buffer(data);\n    }\n}\n","export default function getBufferType(array)\n{\n    if (array.BYTES_PER_ELEMENT === 4)\n    {\n        if (array instanceof Float32Array)\n        {\n            return 'Float32Array';\n        }\n        else if (array instanceof Uint32Array)\n        {\n            return 'Uint32Array';\n        }\n\n        return 'Int32Array';\n    }\n    else if (array.BYTES_PER_ELEMENT === 2)\n    {\n        if (array instanceof Uint16Array)\n        {\n            return 'Uint16Array';\n        }\n    }\n    else if (array.BYTES_PER_ELEMENT === 1)\n    {\n        if (array instanceof Uint8Array)\n        {\n            return 'Uint8Array';\n        }\n    }\n\n    // TODO map out the rest of the array elements!\n    return null;\n}\n","import getBufferType from './getBufferType';\n\n/* eslint-disable object-shorthand */\nconst map = {\n    Float32Array: Float32Array,\n    Uint32Array: Uint32Array,\n    Int32Array: Int32Array,\n    Uint8Array: Uint8Array,\n};\n\nexport default function interleaveTypedArrays(arrays, sizes)\n{\n    let outSize = 0;\n    let stride = 0;\n    const views = {};\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        stride += sizes[i];\n        outSize += arrays[i].length;\n    }\n\n    const buffer = new ArrayBuffer(outSize * 4);\n\n    let out = null;\n    let littleOffset = 0;\n\n    for (let i = 0; i < arrays.length; i++)\n    {\n        const size = sizes[i];\n        const array = arrays[i];\n\n        const type = getBufferType(array);\n\n        if (!views[type])\n        {\n            views[type] = new map[type](buffer);\n        }\n\n        out = views[type];\n\n        for (let j = 0; j < array.length; j++)\n        {\n            const indexStart = ((j / size | 0) * stride) + littleOffset;\n            const index = j % size;\n\n            out[indexStart + index] = array[j];\n        }\n\n        littleOffset += size;\n    }\n\n    return new Float32Array(buffer);\n}\n","import Attribute from './Attribute';\nimport Buffer from './Buffer';\nimport interleaveTypedArrays from './utils/interleaveTypedArrays';\nimport getBufferType from './utils/getBufferType';\nimport { Runner } from '@pixi/runner';\n\nconst byteSizeMap = { 5126: 4, 5123: 2, 5121: 1 };\nlet UID = 0;\n\n/* eslint-disable object-shorthand */\nconst map = {\n    Float32Array: Float32Array,\n    Uint32Array: Uint32Array,\n    Int32Array: Int32Array,\n    Uint8Array: Uint8Array,\n    Uint16Array: Uint16Array,\n};\n\n/* eslint-disable max-len */\n\n/**\n * The Geometry represents a model. It consists of two components:\n * - GeometryStyle - The structure of the model such as the attributes layout\n * - GeometryData - the data of the model - this consists of buffers.\n * This can include anything from positions, uvs, normals, colors etc.\n *\n * Geometry can be defined without passing in a style or data if required (thats how I prefer!)\n *\n * ```js\n * let geometry = new PIXI.Geometry();\n *\n * geometry.addAttribute('positions', [0, 0, 100, 0, 100, 100, 0, 100], 2);\n * geometry.addAttribute('uvs', [0,0,1,0,1,1,0,1],2)\n * geometry.addIndex([0,1,2,1,3,2])\n *\n * ```\n * @class\n * @memberof PIXI\n */\nexport default class Geometry\n{\n    /**\n     * @param {PIXI.Buffer[]} [buffers]  an array of buffers. optional.\n     * @param {object} [attributes] of the geometry, optional structure of the attributes layout\n     */\n    constructor(buffers = [], attributes = {})\n    {\n        this.buffers = buffers;\n\n        this.indexBuffer = null;\n\n        this.attributes = attributes;\n\n        /**\n         * A map of renderer IDs to webgl VAOs\n         *\n         * @protected\n         * @type {object}\n         */\n        this.glVertexArrayObjects = {};\n\n        this.id = UID++;\n\n        this.instanced = false;\n\n        /**\n         * Number of instances in this geometry, pass it to `GeometrySystem.draw()`\n         * @member {number}\n         * @default 1\n         */\n        this.instanceCount = 1;\n\n        this.disposeRunner = new Runner('disposeGeometry', 2);\n\n        /**\n         * Count of existing (not destroyed) meshes that reference this geometry\n         * @member {number}\n         */\n        this.refCount = 0;\n    }\n\n    /**\n    *\n    * Adds an attribute to the geometry\n    *\n    * @param {String} id - the name of the attribute (matching up to a shader)\n    * @param {PIXI.Buffer|number[]} [buffer] the buffer that holds the data of the attribute . You can also provide an Array and a buffer will be created from it.\n    * @param {Number} [size=0] the size of the attribute. If you have 2 floats per vertex (eg position x and y) this would be 2\n    * @param {Boolean} [normalized=false] should the data be normalized.\n    * @param {Number} [type=PIXI.TYPES.FLOAT] what type of number is the attribute. Check {PIXI.TYPES} to see the ones available\n    * @param {Number} [stride=0] How far apart (in floats) the start of each value is. (used for interleaving data)\n    * @param {Number} [start=0] How far into the array to start reading values (used for interleaving data)\n    *\n    * @return {PIXI.Geometry} returns self, useful for chaining.\n    */\n    addAttribute(id, buffer, size, normalized = false, type, stride, start, instance = false)\n    {\n        if (!buffer)\n        {\n            throw new Error('You must pass a buffer when creating an attribute');\n        }\n\n        // check if this is a buffer!\n        if (!buffer.data)\n        {\n            // its an array!\n            if (buffer instanceof Array)\n            {\n                buffer = new Float32Array(buffer);\n            }\n\n            buffer = new Buffer(buffer);\n        }\n\n        const ids = id.split('|');\n\n        if (ids.length > 1)\n        {\n            for (let i = 0; i < ids.length; i++)\n            {\n                this.addAttribute(ids[i], buffer, size, normalized, type);\n            }\n\n            return this;\n        }\n\n        let bufferIndex = this.buffers.indexOf(buffer);\n\n        if (bufferIndex === -1)\n        {\n            this.buffers.push(buffer);\n            bufferIndex = this.buffers.length - 1;\n        }\n\n        this.attributes[id] = new Attribute(bufferIndex, size, normalized, type, stride, start, instance);\n\n        // assuming that if there is instanced data then this will be drawn with instancing!\n        this.instanced = this.instanced || instance;\n\n        return this;\n    }\n\n    /**\n     * returns the requested attribute\n     *\n     * @param {String} id  the name of the attribute required\n     * @return {PIXI.Attribute} the attribute requested.\n     */\n    getAttribute(id)\n    {\n        return this.attributes[id];\n    }\n\n    /**\n     * returns the requested buffer\n     *\n     * @param {String} id  the name of the buffer required\n     * @return {PIXI.Buffer} the buffer requested.\n     */\n    getBuffer(id)\n    {\n        return this.buffers[this.getAttribute(id).buffer];\n    }\n\n    /**\n    *\n    * Adds an index buffer to the geometry\n    * The index buffer contains integers, three for each triangle in the geometry, which reference the various attribute buffers (position, colour, UV coordinates, other UV coordinates, normal, …). There is only ONE index buffer.\n    *\n    * @param {PIXI.Buffer|number[]} [buffer] the buffer that holds the data of the index buffer. You can also provide an Array and a buffer will be created from it.\n    * @return {PIXI.Geometry} returns self, useful for chaining.\n    */\n    addIndex(buffer)\n    {\n        if (!buffer.data)\n        {\n            // its an array!\n            if (buffer instanceof Array)\n            {\n                buffer = new Uint16Array(buffer);\n            }\n\n            buffer = new Buffer(buffer);\n        }\n\n        buffer.index = true;\n        this.indexBuffer = buffer;\n\n        if (this.buffers.indexOf(buffer) === -1)\n        {\n            this.buffers.push(buffer);\n        }\n\n        return this;\n    }\n\n    /**\n     * returns the index buffer\n     *\n     * @return {PIXI.Buffer} the index buffer.\n     */\n    getIndex()\n    {\n        return this.indexBuffer;\n    }\n\n    /**\n     * this function modifies the structure so that all current attributes become interleaved into a single buffer\n     * This can be useful if your model remains static as it offers a little performance boost\n     *\n     * @return {PIXI.Geometry} returns self, useful for chaining.\n     */\n    interleave()\n    {\n        // a simple check to see if buffers are already interleaved..\n        if (this.buffers.length === 1 || (this.buffers.length === 2 && this.indexBuffer)) return this;\n\n        // assume already that no buffers are interleaved\n        const arrays = [];\n        const sizes = [];\n        const interleavedBuffer = new Buffer();\n        let i;\n\n        for (i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n\n            const buffer = this.buffers[attribute.buffer];\n\n            arrays.push(buffer.data);\n\n            sizes.push((attribute.size * byteSizeMap[attribute.type]) / 4);\n\n            attribute.buffer = 0;\n        }\n\n        interleavedBuffer.data = interleaveTypedArrays(arrays, sizes);\n\n        for (i = 0; i < this.buffers.length; i++)\n        {\n            if (this.buffers[i] !== this.indexBuffer)\n            {\n                this.buffers[i].destroy();\n            }\n        }\n\n        this.buffers = [interleavedBuffer];\n\n        if (this.indexBuffer)\n        {\n            this.buffers.push(this.indexBuffer);\n        }\n\n        return this;\n    }\n\n    getSize()\n    {\n        for (const i in this.attributes)\n        {\n            const attribute = this.attributes[i];\n            const buffer = this.buffers[attribute.buffer];\n\n            return buffer.data.length / ((attribute.stride / 4) || attribute.size);\n        }\n\n        return 0;\n    }\n\n    /**\n     * disposes WebGL resources that are connected to this geometry\n     */\n    dispose()\n    {\n        this.disposeRunner.run(this, false);\n    }\n\n    /**\n     * Destroys the geometry.\n     */\n    destroy()\n    {\n        this.dispose();\n\n        this.buffers = null;\n        this.indexBuffer.destroy();\n\n        this.attributes = null;\n    }\n\n    /**\n     * returns a clone of the geometry\n     *\n     * @returns {PIXI.Geometry} a new clone of this geometry\n     */\n    clone()\n    {\n        const geometry = new Geometry();\n\n        for (let i = 0; i < this.buffers.length; i++)\n        {\n            geometry.buffers[i] = new Buffer(this.buffers[i].data.slice());\n        }\n\n        for (const i in this.attributes)\n        {\n            const attrib = this.attributes[i];\n\n            geometry.attributes[i] = new Attribute(\n                attrib.buffer,\n                attrib.size,\n                attrib.normalized,\n                attrib.type,\n                attrib.stride,\n                attrib.start,\n                attrib.instance\n            );\n        }\n\n        if (this.indexBuffer)\n        {\n            geometry.indexBuffer = geometry.buffers[this.buffers.indexOf(this.indexBuffer)];\n            geometry.indexBuffer.index = true;\n        }\n\n        return geometry;\n    }\n\n    /**\n     * merges an array of geometries into a new single one\n     * geometry attribute styles must match for this operation to work\n     *\n     * @param {PIXI.Geometry[]} geometries array of geometries to merge\n     * @returns {PIXI.Geometry} shiny new geometry!\n     */\n    static merge(geometries)\n    {\n        // todo add a geometry check!\n        // also a size check.. cant be too big!]\n\n        const geometryOut = new Geometry();\n\n        const arrays = [];\n        const sizes = [];\n        const offsets = [];\n\n        let geometry;\n\n        // pass one.. get sizes..\n        for (let i = 0; i < geometries.length; i++)\n        {\n            geometry = geometries[i];\n\n            for (let j = 0; j < geometry.buffers.length; j++)\n            {\n                sizes[j] = sizes[j] || 0;\n                sizes[j] += geometry.buffers[j].data.length;\n                offsets[j] = 0;\n            }\n        }\n\n        // build the correct size arrays..\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            // TODO types!\n            arrays[i] = new map[getBufferType(geometry.buffers[i].data)](sizes[i]);\n            geometryOut.buffers[i] = new Buffer(arrays[i]);\n        }\n\n        // pass to set data..\n        for (let i = 0; i < geometries.length; i++)\n        {\n            geometry = geometries[i];\n\n            for (let j = 0; j < geometry.buffers.length; j++)\n            {\n                arrays[j].set(geometry.buffers[j].data, offsets[j]);\n                offsets[j] += geometry.buffers[j].data.length;\n            }\n        }\n\n        geometryOut.attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            geometryOut.indexBuffer = geometryOut.buffers[geometry.buffers.indexOf(geometry.indexBuffer)];\n            geometryOut.indexBuffer.index = true;\n\n            let offset = 0;\n            let stride = 0;\n            let offset2 = 0;\n            let bufferIndexToCount = 0;\n\n            // get a buffer\n            for (let i = 0; i < geometry.buffers.length; i++)\n            {\n                if (geometry.buffers[i] !== geometry.indexBuffer)\n                {\n                    bufferIndexToCount = i;\n                    break;\n                }\n            }\n\n            // figure out the stride of one buffer..\n            for (const i in geometry.attributes)\n            {\n                const attribute = geometry.attributes[i];\n\n                if ((attribute.buffer | 0) === bufferIndexToCount)\n                {\n                    stride += ((attribute.size * byteSizeMap[attribute.type]) / 4);\n                }\n            }\n\n            // time to off set all indexes..\n            for (let i = 0; i < geometries.length; i++)\n            {\n                const indexBufferData = geometries[i].indexBuffer.data;\n\n                for (let j = 0; j < indexBufferData.length; j++)\n                {\n                    geometryOut.indexBuffer.data[j + offset2] += offset;\n                }\n\n                offset += geometry.buffers[bufferIndexToCount].data.length / (stride);\n                offset2 += indexBufferData.length;\n            }\n        }\n\n        return geometryOut;\n    }\n}\n","import Geometry from '../geometry/Geometry';\n\n/**\n * Helper class to create a quad\n *\n * @class\n * @memberof PIXI\n */\nexport default class Quad extends Geometry\n{\n    constructor()\n    {\n        super();\n\n        this.addAttribute('aVertexPosition', [\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ])\n            .addIndex([0, 1, 3, 2]);\n    }\n}\n","import Geometry from '../geometry/Geometry';\nimport Buffer from '../geometry/Buffer';\n\n/**\n * Helper class to create a quad with uvs like in v4\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.Geometry\n */\nexport default class QuadUv extends Geometry\n{\n    constructor()\n    {\n        super();\n\n        /**\n         * An array of vertices\n         *\n         * @member {Float32Array}\n         */\n        this.vertices = new Float32Array([\n            -1, -1,\n            1, -1,\n            1, 1,\n            -1, 1,\n        ]);\n\n        /**\n         * The Uvs of the quad\n         *\n         * @member {Float32Array}\n         */\n        this.uvs = new Float32Array([\n            0, 0,\n            1, 0,\n            1, 1,\n            0, 1,\n        ]);\n\n        this.vertexBuffer = new Buffer(this.vertices);\n        this.uvBuffer = new Buffer(this.uvs);\n\n        this.addAttribute('aVertexPosition', this.vertexBuffer)\n            .addAttribute('aTextureCoord', this.uvBuffer)\n            .addIndex([0, 1, 2, 0, 2, 3]);\n    }\n\n    /**\n     * Maps two Rectangle to the quad.\n     *\n     * @param {PIXI.Rectangle} targetTextureFrame - the first rectangle\n     * @param {PIXI.Rectangle} destinationFrame - the second rectangle\n     * @return {PIXI.Quad} Returns itself.\n     */\n    map(targetTextureFrame, destinationFrame)\n    {\n        let x = 0; // destinationFrame.x / targetTextureFrame.width;\n        let y = 0; // destinationFrame.y / targetTextureFrame.height;\n\n        this.uvs[0] = x;\n        this.uvs[1] = y;\n\n        this.uvs[2] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[3] = y;\n\n        this.uvs[4] = x + (destinationFrame.width / targetTextureFrame.width);\n        this.uvs[5] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        this.uvs[6] = x;\n        this.uvs[7] = y + (destinationFrame.height / targetTextureFrame.height);\n\n        x = destinationFrame.x;\n        y = destinationFrame.y;\n\n        this.vertices[0] = x;\n        this.vertices[1] = y;\n\n        this.vertices[2] = x + destinationFrame.width;\n        this.vertices[3] = y;\n\n        this.vertices[4] = x + destinationFrame.width;\n        this.vertices[5] = y + destinationFrame.height;\n\n        this.vertices[6] = x;\n        this.vertices[7] = y + destinationFrame.height;\n\n        this.invalidate();\n\n        return this;\n    }\n\n    /**\n     * legacy upload method, just marks buffers dirty\n     * @returns {PIXI.QuadUv} Returns itself.\n     */\n    invalidate()\n    {\n        this.vertexBuffer._updateID++;\n        this.uvBuffer._updateID++;\n\n        return this;\n    }\n}\n","let UID = 0;\n\n/**\n * Uniform group holds uniform map and some ID's for work\n *\n * @class\n * @memberof PIXI\n */\nclass UniformGroup\n{\n    /**\n     * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.\n     * @param {boolean} [_static] - Uniforms wont be changed after creation\n     */\n    constructor(uniforms, _static)\n    {\n        /**\n         * uniform values\n         * @member {object}\n         * @readonly\n         */\n        this.uniforms = uniforms;\n\n        /**\n         * Its a group and not a single uniforms\n         * @member {boolean}\n         * @readonly\n         * @default true\n         */\n        this.group = true;\n\n        // lets generate this when the shader ?\n        this.syncUniforms = {};\n\n        /**\n         * dirty version\n         * @protected\n         * @member {number}\n         */\n        this.dirtyId = 0;\n\n        /**\n         * unique id\n         * @protected\n         * @member {number}\n         */\n        this.id = UID++;\n\n        /**\n         * Uniforms wont be changed after creation\n         * @member {boolean}\n         */\n        this.static = !!_static;\n    }\n\n    update()\n    {\n        this.dirtyId++;\n    }\n\n    add(name, uniforms, _static)\n    {\n        this.uniforms[name] = new UniformGroup(uniforms, _static);\n    }\n\n    static from(uniforms, _static)\n    {\n        return new UniformGroup(uniforms, _static);\n    }\n}\n\nexport default UniformGroup;\n","import System from '../System';\n\nimport RenderTexturePool from '../renderTexture/RenderTexturePool';\nimport Quad from '../utils/Quad';\nimport QuadUv from '../utils/QuadUv';\nimport { Rectangle, Matrix } from '@pixi/math';\nimport UniformGroup from '../shader/UniformGroup';\nimport { DRAW_MODES } from '@pixi/constants';\n\n/**\n * System plugin to the renderer to manage filter states.\n *\n * @class\n * @private\n */\nclass FilterState\n{\n    constructor()\n    {\n        this.renderTexture = null;\n\n        /**\n         * Target of the filters\n         * We store for case when custom filter wants to know the element it was applied on\n         * @member {PIXI.DisplayObject}\n         * @private\n         */\n        this.target = null;\n\n        /**\n         * Compatibility with PixiJS v4 filters\n         * @member {boolean}\n         * @default false\n         * @private\n         */\n        this.legacy = false;\n\n        /**\n         * Resolution of filters\n         * @member {number}\n         * @default 1\n         * @private\n         */\n        this.resolution = 1;\n\n        // next three fields are created only for root\n        // re-assigned for everything else\n\n        /**\n         * Source frame\n         * @member {PIXI.Rectangle}\n         * @private\n         */\n        this.sourceFrame = new Rectangle();\n\n        /**\n         * Destination frame\n         * @member {PIXI.Rectangle}\n         * @private\n         */\n        this.destinationFrame = new Rectangle();\n\n        /**\n         * Collection of filters\n         * @member {PIXI.Filter[]}\n         * @private\n         */\n        this.filters = [];\n    }\n\n    /**\n     * clears the state\n     * @private\n     */\n    clear()\n    {\n        this.target = null;\n        this.filters = null;\n        this.renderTexture = null;\n    }\n}\n\n/**\n * System plugin to the renderer to manage the filters.\n *\n * @class\n * @memberof PIXI.systems\n * @extends PIXI.System\n */\nexport default class FilterSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * List of filters for the FilterSystem\n         * @member {Object[]}\n         * @readonly\n         */\n        this.defaultFilterStack = [{}];\n\n        /**\n         * stores a bunch of PO2 textures used for filtering\n         * @member {Object}\n         */\n        this.texturePool = new RenderTexturePool();\n\n        this.texturePool.setScreenSize(renderer.view);\n\n        /**\n         * a pool for storing filter states, save us creating new ones each tick\n         * @member {Object[]}\n         */\n        this.statePool = [];\n\n        /**\n         * A very simple geometry used when drawing a filter effect to the screen\n         * @member {PIXI.Quad}\n         */\n        this.quad = new Quad();\n\n        /**\n         * Quad UVs\n         * @member {PIXI.QuadUv}\n         */\n        this.quadUv = new QuadUv();\n\n        /**\n         * Temporary rect for maths\n         * @type {PIXI.Rectangle}\n         */\n        this.tempRect = new Rectangle();\n\n        /**\n         * Active state\n         * @member {object}\n         */\n        this.activeState = {};\n\n        /**\n         * This uniform group is attached to filter uniforms when used\n         * @member {PIXI.UniformGroup}\n         * @property {PIXI.Rectangle} outputFrame\n         * @property {Float32Array} inputSize\n         * @property {Float32Array} inputPixel\n         * @property {Float32Array} inputClamp\n         * @property {Number} resolution\n         * @property {Float32Array} filterArea\n         * @property {Fload32Array} filterClamp\n         */\n        this.globalUniforms = new UniformGroup({\n            outputFrame: this.tempRect,\n            inputSize: new Float32Array(4),\n            inputPixel: new Float32Array(4),\n            inputClamp: new Float32Array(4),\n            resolution: 1,\n\n            // legacy variables\n            filterArea: new Float32Array(4),\n            filterClamp: new Float32Array(4),\n        }, true);\n\n        this._pixelsWidth = renderer.view.width;\n        this._pixelsHeight = renderer.view.height;\n    }\n\n    /**\n     * Adds a new filter to the System.\n     *\n     * @param {PIXI.DisplayObject} target - The target of the filter to render.\n     * @param {PIXI.Filter[]} filters - The filters to apply.\n     */\n    push(target, filters)\n    {\n        const renderer = this.renderer;\n        const filterStack = this.defaultFilterStack;\n        const state = this.statePool.pop() || new FilterState();\n\n        let resolution = filters[0].resolution;\n        let padding = filters[0].padding;\n        let autoFit = filters[0].autoFit;\n        let legacy = filters[0].legacy;\n\n        for (let i = 1; i < filters.length; i++)\n        {\n            const filter =  filters[i];\n\n            // lets use the lowest resolution..\n            resolution = Math.min(resolution, filter.resolution);\n            // and the largest amount of padding!\n            padding = Math.max(padding, filter.padding);\n            // only auto fit if all filters are autofit\n            autoFit = autoFit || filter.autoFit;\n\n            legacy = legacy || filter.legacy;\n        }\n\n        if (filterStack.length === 1)\n        {\n            this.defaultFilterStack[0].renderTexture = renderer.renderTexture.current;\n        }\n\n        filterStack.push(state);\n\n        state.resolution = resolution;\n\n        state.legacy = legacy;\n\n        state.target = target;\n\n        state.sourceFrame.copyFrom(target.filterArea || target.getBounds(true));\n\n        state.sourceFrame.pad(padding);\n        if (autoFit)\n        {\n            state.sourceFrame.fit(this.renderer.renderTexture.sourceFrame);\n        }\n\n        // round to whole number based on resolution\n        state.sourceFrame.ceil(resolution);\n\n        state.renderTexture = this.getOptimalFilterTexture(state.sourceFrame.width, state.sourceFrame.height, resolution);\n        state.filters = filters;\n\n        state.destinationFrame.width = state.renderTexture.width;\n        state.destinationFrame.height = state.renderTexture.height;\n\n        state.renderTexture.filterFrame = state.sourceFrame;\n\n        renderer.renderTexture.bind(state.renderTexture, state.sourceFrame);// /, state.destinationFrame);\n        renderer.renderTexture.clear();\n    }\n\n    /**\n     * Pops off the filter and applies it.\n     *\n     */\n    pop()\n    {\n        const filterStack = this.defaultFilterStack;\n        const state = filterStack.pop();\n        const filters = state.filters;\n\n        this.activeState = state;\n\n        const globalUniforms = this.globalUniforms.uniforms;\n\n        globalUniforms.outputFrame = state.sourceFrame;\n        globalUniforms.resolution = state.resolution;\n\n        const inputSize = globalUniforms.inputSize;\n        const inputPixel = globalUniforms.inputPixel;\n        const inputClamp = globalUniforms.inputClamp;\n\n        inputSize[0] = state.destinationFrame.width;\n        inputSize[1] = state.destinationFrame.height;\n        inputSize[2] = 1.0 / inputSize[0];\n        inputSize[3] = 1.0 / inputSize[1];\n\n        inputPixel[0] = inputSize[0] * state.resolution;\n        inputPixel[1] = inputSize[1] * state.resolution;\n        inputPixel[2] = 1.0 / inputPixel[0];\n        inputPixel[3] = 1.0 / inputPixel[1];\n\n        inputClamp[0] = 0.5 * inputPixel[2];\n        inputClamp[1] = 0.5 * inputPixel[3];\n        inputClamp[2] = (state.sourceFrame.width * inputSize[2]) - (0.5 * inputPixel[2]);\n        inputClamp[3] = (state.sourceFrame.height * inputSize[3]) - (0.5 * inputPixel[3]);\n\n        // only update the rect if its legacy..\n        if (state.legacy)\n        {\n            const filterArea = globalUniforms.filterArea;\n\n            filterArea[0] = state.destinationFrame.width;\n            filterArea[1] = state.destinationFrame.height;\n            filterArea[2] = state.sourceFrame.x;\n            filterArea[3] = state.sourceFrame.y;\n\n            globalUniforms.filterClamp = globalUniforms.inputClamp;\n        }\n\n        this.globalUniforms.update();\n\n        const lastState = filterStack[filterStack.length - 1];\n\n        if (filters.length === 1)\n        {\n            filters[0].apply(this, state.renderTexture, lastState.renderTexture, false, state);\n\n            this.returnFilterTexture(state.renderTexture);\n        }\n        else\n        {\n            let flip = state.renderTexture;\n            let flop = this.getOptimalFilterTexture(\n                flip.width,\n                flip.height,\n                state.resolution\n            );\n\n            flop.filterFrame = flip.filterFrame;\n\n            let i = 0;\n\n            for (i = 0; i < filters.length - 1; ++i)\n            {\n                filters[i].apply(this, flip, flop, true, state);\n\n                const t = flip;\n\n                flip = flop;\n                flop = t;\n            }\n\n            filters[i].apply(this, flip, lastState.renderTexture, false, state);\n\n            this.returnFilterTexture(flip);\n            this.returnFilterTexture(flop);\n        }\n\n        state.clear();\n        this.statePool.push(state);\n    }\n\n    /**\n     * Draws a filter.\n     *\n     * @param {PIXI.Filter} filter - The filter to draw.\n     * @param {PIXI.RenderTexture} input - The input render target.\n     * @param {PIXI.RenderTexture} output - The target to output to.\n     * @param {boolean} clear - Should the output be cleared before rendering to it\n     */\n    applyFilter(filter, input, output, clear)\n    {\n        const renderer = this.renderer;\n\n        renderer.renderTexture.bind(output, output ? output.filterFrame : null);\n\n        if (clear)\n        {\n            // gl.disable(gl.SCISSOR_TEST);\n            renderer.renderTexture.clear();\n            // gl.enable(gl.SCISSOR_TEST);\n        }\n\n        // set the uniforms..\n        filter.uniforms.uSampler = input;\n        filter.uniforms.filterGlobals = this.globalUniforms;\n\n        // TODO make it so that the order of this does not matter..\n        // because it does at the moment cos of global uniforms.\n        // they need to get resynced\n\n        renderer.state.set(filter.state);\n        renderer.shader.bind(filter);\n\n        if (filter.legacy)\n        {\n            this.quadUv.map(input._frame, input.filterFrame);\n\n            renderer.geometry.bind(this.quadUv);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLES);\n        }\n        else\n        {\n            renderer.geometry.bind(this.quad);\n            renderer.geometry.draw(DRAW_MODES.TRIANGLE_STRIP);\n        }\n    }\n\n    /**\n     * Multiply _input normalized coordinates_ to this matrix to get _sprite texture normalized coordinates_.\n     *\n     * Use `outputMatrix * vTextureCoord` in the shader.\n     *\n     * @param {PIXI.Matrix} outputMatrix - The matrix to output to.\n     * @param {PIXI.Sprite} sprite - The sprite to map to.\n     * @return {PIXI.Matrix} The mapped matrix.\n     */\n    calculateSpriteMatrix(outputMatrix, sprite)\n    {\n        const { sourceFrame, destinationFrame } = this.activeState;\n        const { orig } = sprite._texture;\n        const mappedMatrix = outputMatrix.set(destinationFrame.width, 0, 0,\n            destinationFrame.height, sourceFrame.x, sourceFrame.y);\n        const worldTransform = sprite.worldTransform.copyTo(Matrix.TEMP_MATRIX);\n\n        worldTransform.invert();\n        mappedMatrix.prepend(worldTransform);\n        mappedMatrix.scale(1.0 / orig.width, 1.0 / orig.height);\n        mappedMatrix.translate(sprite.anchor.x, sprite.anchor.y);\n\n        return mappedMatrix;\n    }\n\n    /**\n     * Destroys this Filter System.\n     */\n    destroy()\n    {\n        // Those textures has to be destroyed by RenderTextureSystem or FramebufferSystem\n        this.texturePool.clear(false);\n    }\n\n    /**\n     * Gets a Power-of-Two render texture or fullScreen texture\n     *\n     * @protected\n     * @param {number} minWidth - The minimum width of the render texture in real pixels.\n     * @param {number} minHeight - The minimum height of the render texture in real pixels.\n     * @param {number} [resolution=1] - The resolution of the render texture.\n     * @return {PIXI.RenderTexture} The new render texture.\n     */\n    getOptimalFilterTexture(minWidth, minHeight, resolution = 1)\n    {\n        return this.texturePool.getOptimalTexture(minWidth, minHeight, resolution);\n    }\n\n    /**\n     * Gets extra render texture to use inside current filter\n     * To be compliant with older filters, you can use params in any order\n     *\n     * @param {PIXI.RenderTexture} [input] renderTexture from which size and resolution will be copied\n     * @param {number} [resolution] override resolution of the renderTexture\n     * @returns {PIXI.RenderTexture}\n     */\n    getFilterTexture(input, resolution)\n    {\n        if (typeof input === 'number')\n        {\n            const swap = input;\n\n            input = resolution;\n            resolution = swap;\n        }\n\n        input = input || this.activeState.renderTexture;\n\n        const filterTexture = this.texturePool.getOptimalTexture(input.width, input.height, resolution || input.resolution);\n\n        filterTexture.filterFrame = input.filterFrame;\n\n        return filterTexture;\n    }\n\n    /**\n     * Frees a render texture back into the pool.\n     *\n     * @param {PIXI.RenderTexture} renderTexture - The renderTarget to free\n     */\n    returnFilterTexture(renderTexture)\n    {\n        this.texturePool.returnTexture(renderTexture);\n    }\n\n    /**\n     * Empties the texture pool.\n     */\n    emptyPool()\n    {\n        this.texturePool.clear(true);\n    }\n\n    /**\n     * calls `texturePool.resize()`, affects fullScreen renderTextures\n     */\n    resize()\n    {\n        this.texturePool.setScreenSize(this.renderer.view);\n    }\n}\n","/**\n * Base for a common object renderer that can be used as a\n * system renderer plugin.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI\n */\nexport default class ObjectRenderer\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this manager works for.\n     */\n    constructor(renderer)\n    {\n        /**\n         * The renderer this manager works for.\n         *\n         * @member {PIXI.Renderer}\n         */\n        this.renderer = renderer;\n    }\n\n    /**\n     * Stub method that should be used to empty the current\n     * batch by rendering objects now.\n     */\n    flush()\n    {\n        // flush!\n    }\n\n    /**\n     * Generic destruction method that frees all resources. This\n     * should be called by subclasses.\n     */\n    destroy()\n    {\n        this.renderer = null;\n    }\n\n    /**\n     * Stub method that initializes any state required before\n     * rendering starts. It is different from the `prerender`\n     * signal, which occurs every frame, in that it is called\n     * whenever an object requests _this_ renderer specifically.\n     */\n    start()\n    {\n        // set the shader..\n    }\n\n    /**\n     * Stops the renderer. It should free up any state and\n     * become dormant.\n     */\n    stop()\n    {\n        this.flush();\n    }\n\n    /**\n     * Keeps the object to render. It doesn't have to be\n     * rendered immediately.\n     *\n     * @param {PIXI.DisplayObject} object - The object to render.\n     */\n    render(object) // eslint-disable-line no-unused-vars\n    {\n        // render the object\n    }\n}\n","import System from '../System';\nimport ObjectRenderer from './ObjectRenderer';\n\n/**\n * System plugin to the renderer to manage batching.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\nexport default class BatchSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * An empty renderer.\n         *\n         * @member {PIXI.ObjectRenderer}\n         */\n        this.emptyRenderer = new ObjectRenderer(renderer);\n\n        /**\n         * The currently active ObjectRenderer.\n         *\n         * @member {PIXI.ObjectRenderer}\n         */\n        this.currentRenderer = this.emptyRenderer;\n    }\n\n    /**\n     * Changes the current renderer to the one given in parameter\n     *\n     * @param {PIXI.ObjectRenderer} objectRenderer - The object renderer to use.\n     */\n    setObjectRenderer(objectRenderer)\n    {\n        if (this.currentRenderer === objectRenderer)\n        {\n            return;\n        }\n\n        this.currentRenderer.stop();\n        this.currentRenderer = objectRenderer;\n\n        this.currentRenderer.start();\n    }\n\n    /**\n     * This should be called if you wish to do some custom rendering\n     * It will basically render anything that may be batched up such as sprites\n     */\n    flush()\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n\n    /**\n     * Reset the system to an empty renderer\n     */\n    reset()\n    {\n        this.setObjectRenderer(this.emptyRenderer);\n    }\n}\n","import { settings } from '@pixi/settings';\nimport { ENV } from '@pixi/constants';\nimport { isMobile } from '@pixi/utils';\n\n/**\n * The maximum support for using WebGL. If a device does not\n * support WebGL version, for instance WebGL 2, it will still\n * attempt to fallback support to WebGL 1. If you want to\n * explicitly remove feature support to target a more stable\n * baseline, prefer a lower environment.\n *\n * Due to {@link https://bugs.chromium.org/p/chromium/issues/detail?id=934823|bug in chromium}\n * we disable webgl2 by default for all non-apple mobile devices.\n *\n * @static\n * @name PREFER_ENV\n * @memberof PIXI.settings\n * @type {number}\n * @default PIXI.ENV.WEBGL2\n */\nsettings.PREFER_ENV = isMobile.any ? ENV.WEBGL : ENV.WEBGL2;\n\nexport { settings };\n","import System from '../System';\nimport { settings } from '../settings';\nimport { ENV } from '@pixi/constants';\n\nlet CONTEXT_UID = 0;\n\n/**\n * System plugin to the renderer to manage the context.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\nexport default class ContextSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * Either 1 or 2 to reflect the WebGL version being used\n         * @member {number}\n         * @readonly\n         */\n        this.webGLVersion = 1;\n\n        /**\n         * Extensions being used\n         * @member {object}\n         * @readonly\n         * @property {WEBGL_draw_buffers} drawBuffers - WebGL v1 extension\n         * @property {WEBGL_depth_texture} depthTexture - WebGL v1 extension\n         * @property {OES_texture_float} floatTexture - WebGL v1 extension\n         * @property {WEBGL_lose_context} loseContext - WebGL v1 extension\n         * @property {OES_vertex_array_object} vertexArrayObject - WebGL v1 extension\n         * @property {EXT_texture_filter_anisotropic} anisotropicFiltering - WebGL v1 and v2 extension\n         */\n        this.extensions = {};\n\n        // Bind functions\n        this.handleContextLost = this.handleContextLost.bind(this);\n        this.handleContextRestored = this.handleContextRestored.bind(this);\n\n        renderer.view.addEventListener('webglcontextlost', this.handleContextLost, false);\n        renderer.view.addEventListener('webglcontextrestored', this.handleContextRestored, false);\n    }\n\n    /**\n     * `true` if the context is lost\n     * @member {boolean}\n     * @readonly\n     */\n    get isLost()\n    {\n        return (!this.gl || this.gl.isContextLost());\n    }\n\n    /**\n     * Handle the context change event\n     * @param {WebGLRenderingContext} gl new webgl context\n     */\n    contextChange(gl)\n    {\n        this.gl = gl;\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID++;\n\n        // restore a context if it was previously lost\n        if (gl.isContextLost() && gl.getExtension('WEBGL_lose_context'))\n        {\n            gl.getExtension('WEBGL_lose_context').restoreContext();\n        }\n    }\n\n    /**\n     * Initialize the context\n     *\n     * @protected\n     * @param {WebGLRenderingContext} gl - WebGL context\n     */\n    initFromContext(gl)\n    {\n        this.gl = gl;\n        this.validateContext(gl);\n        this.renderer.gl = gl;\n        this.renderer.CONTEXT_UID = CONTEXT_UID++;\n        this.renderer.runners.contextChange.run(gl);\n    }\n\n    /**\n     * Initialize from context options\n     *\n     * @protected\n     * @see https://developer.mozilla.org/en-US/docs/Web/API/HTMLCanvasElement/getContext\n     * @param {object} options - context attributes\n     */\n    initFromOptions(options)\n    {\n        const gl = this.createContext(this.renderer.view, options);\n\n        this.initFromContext(gl);\n    }\n\n    /**\n     * Helper class to create a WebGL Context\n     *\n     * @param canvas {HTMLCanvasElement} the canvas element that we will get the context from\n     * @param options {object} An options object that gets passed in to the canvas element containing the context attributes\n     * @see https://developer.mozilla.org/en/docs/Web/API/HTMLCanvasElement/getContext\n     * @return {WebGLRenderingContext} the WebGL context\n     */\n    createContext(canvas, options)\n    {\n        let gl;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', options);\n        }\n\n        if (gl)\n        {\n            this.webGLVersion = 2;\n        }\n        else\n        {\n            this.webGLVersion = 1;\n\n            gl = canvas.getContext('webgl', options)\n            || canvas.getContext('experimental-webgl', options);\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                throw new Error('This browser does not support WebGL. Try using the canvas renderer');\n            }\n        }\n\n        this.gl = gl;\n\n        this.getExtensions();\n\n        return gl;\n    }\n\n    /**\n     * Auto-populate the extensions\n     *\n     * @protected\n     */\n    getExtensions()\n    {\n        // time to set up default extensions that Pixi uses.\n        const { gl } = this;\n\n        if (this.webGLVersion === 1)\n        {\n            Object.assign(this.extensions, {\n                drawBuffers: gl.getExtension('WEBGL_draw_buffers'),\n                depthTexture: gl.getExtension('WEBKIT_WEBGL_depth_texture'),\n                loseContext: gl.getExtension('WEBGL_lose_context'),\n                vertexArrayObject: gl.getExtension('OES_vertex_array_object')\n                    || gl.getExtension('MOZ_OES_vertex_array_object')\n                    || gl.getExtension('WEBKIT_OES_vertex_array_object'),\n                anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n                uint32ElementIndex: gl.getExtension('OES_element_index_uint'),\n                // Floats and half-floats\n                floatTexture: gl.getExtension('OES_texture_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n                textureHalfFloat: gl.getExtension('OES_texture_half_float'),\n                textureHalfFloatLinear: gl.getExtension('OES_texture_half_float_linear'),\n            });\n        }\n        else if (this.webGLVersion === 2)\n        {\n            Object.assign(this.extensions, {\n                anisotropicFiltering: gl.getExtension('EXT_texture_filter_anisotropic'),\n                // Floats and half-floats\n                colorBufferFloat: gl.getExtension('EXT_color_buffer_float'),\n                floatTextureLinear: gl.getExtension('OES_texture_float_linear'),\n            });\n        }\n    }\n\n    /**\n     * Handles a lost webgl context\n     *\n     * @protected\n     * @param {WebGLContextEvent} event - The context lost event.\n     */\n    handleContextLost(event)\n    {\n        event.preventDefault();\n    }\n\n    /**\n     * Handles a restored webgl context\n     *\n     * @protected\n     */\n    handleContextRestored()\n    {\n        this.renderer.runners.contextChange.run(this.gl);\n    }\n\n    destroy()\n    {\n        const view = this.renderer.view;\n\n        // remove listeners\n        view.removeEventListener('webglcontextlost', this.handleContextLost);\n        view.removeEventListener('webglcontextrestored', this.handleContextRestored);\n\n        this.gl.useProgram(null);\n\n        if (this.extensions.loseContext)\n        {\n            this.extensions.loseContext.loseContext();\n        }\n    }\n\n    /**\n     * Handle the post-render runner event\n     *\n     * @protected\n     */\n    postrender()\n    {\n        this.gl.flush();\n    }\n\n    /**\n     * Validate context\n     *\n     * @protected\n     * @param {WebGLRenderingContext} gl - Render context\n     */\n    validateContext(gl)\n    {\n        const attributes = gl.getContextAttributes();\n\n        // this is going to be fairly simple for now.. but at least we have room to grow!\n        if (!attributes.stencil)\n        {\n            /* eslint-disable max-len */\n\n            /* eslint-disable no-console */\n            console.warn('Provided WebGL context does not have a stencil buffer, masks may not render correctly');\n            /* eslint-enable no-console */\n\n            /* eslint-enable max-len */\n        }\n    }\n}\n","import System from '../System';\nimport { Rectangle } from '@pixi/math';\nimport { ENV } from '@pixi/constants';\nimport { settings } from '../settings';\nimport Framebuffer from './Framebuffer';\n\n/**\n * System plugin to the renderer to manage framebuffers.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\nexport default class FramebufferSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * A list of managed framebuffers\n         * @member {PIXI.Framebuffer[]}\n         * @readonly\n         */\n        this.managedFramebuffers = [];\n\n        /**\n         * Framebuffer value that shows that we don't know what is bound\n         * @member {Framebuffer}\n         * @readonly\n         */\n        this.unknownFramebuffer = new Framebuffer(10, 10);\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     */\n    contextChange()\n    {\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n        this.hasMRT = true;\n        this.writeDepthTexture = true;\n\n        this.disposeAll(true);\n\n        // webgl2\n        if (this.renderer.context.webGLVersion === 1)\n        {\n            // webgl 1!\n            let nativeDrawBuffersExtension = this.renderer.context.extensions.drawBuffers;\n            let nativeDepthTextureExtension = this.renderer.context.extensions.depthTexture;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeDrawBuffersExtension = null;\n                nativeDepthTextureExtension = null;\n            }\n\n            if (nativeDrawBuffersExtension)\n            {\n                gl.drawBuffers = (activeTextures) =>\n                    nativeDrawBuffersExtension.drawBuffersWEBGL(activeTextures);\n            }\n            else\n            {\n                this.hasMRT = false;\n                gl.drawBuffers = () =>\n                {\n                    // empty\n                };\n            }\n\n            if (!nativeDepthTextureExtension)\n            {\n                this.writeDepthTexture = false;\n            }\n        }\n    }\n\n    /**\n     * Bind a framebuffer\n     *\n     * @param {PIXI.Framebuffer} framebuffer\n     * @param {PIXI.Rectangle} [frame] frame, default is framebuffer size\n     */\n    bind(framebuffer, frame)\n    {\n        const { gl } = this;\n\n        if (framebuffer)\n        {\n            // TODO caching layer!\n\n            const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID] || this.initFramebuffer(framebuffer);\n\n            if (this.current !== framebuffer)\n            {\n                this.current = framebuffer;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, fbo.framebuffer);\n            }\n            // make sure all textures are unbound..\n\n            // now check for updates...\n            if (fbo.dirtyId !== framebuffer.dirtyId)\n            {\n                fbo.dirtyId = framebuffer.dirtyId;\n\n                if (fbo.dirtyFormat !== framebuffer.dirtyFormat)\n                {\n                    fbo.dirtyFormat = framebuffer.dirtyFormat;\n                    this.updateFramebuffer(framebuffer);\n                }\n                else if (fbo.dirtySize !== framebuffer.dirtySize)\n                {\n                    fbo.dirtySize = framebuffer.dirtySize;\n                    this.resizeFramebuffer(framebuffer);\n                }\n            }\n\n            for (let i = 0; i < framebuffer.colorTextures.length; i++)\n            {\n                if (framebuffer.colorTextures[i].texturePart)\n                {\n                    this.renderer.texture.unbind(framebuffer.colorTextures[i].texture);\n                }\n                else\n                {\n                    this.renderer.texture.unbind(framebuffer.colorTextures[i]);\n                }\n            }\n\n            if (framebuffer.depthTexture)\n            {\n                this.renderer.texture.unbind(framebuffer.depthTexture);\n            }\n\n            if (frame)\n            {\n                this.setViewport(frame.x, frame.y, frame.width, frame.height);\n            }\n            else\n            {\n                this.setViewport(0, 0, framebuffer.width, framebuffer.height);\n            }\n        }\n        else\n        {\n            if (this.current)\n            {\n                this.current = null;\n                gl.bindFramebuffer(gl.FRAMEBUFFER, null);\n            }\n\n            if (frame)\n            {\n                this.setViewport(frame.x, frame.y, frame.width, frame.height);\n            }\n            else\n            {\n                this.setViewport(0, 0, this.renderer.width, this.renderer.height);\n            }\n        }\n    }\n\n    /**\n     * Set the WebGLRenderingContext's viewport.\n     *\n     * @param {Number} x - X position of viewport\n     * @param {Number} y - Y position of viewport\n     * @param {Number} width - Width of viewport\n     * @param {Number} height - Height of viewport\n     */\n    setViewport(x, y, width, height)\n    {\n        const v = this.viewport;\n\n        if (v.width !== width || v.height !== height || v.x !== x || v.y !== y)\n        {\n            v.x = x;\n            v.y = y;\n            v.width = width;\n            v.height = height;\n\n            this.gl.viewport(x, y, width, height);\n        }\n    }\n\n    /**\n     * Get the size of the current width and height. Returns object with `width` and `height` values.\n     *\n     * @member {object}\n     * @readonly\n     */\n    get size()\n    {\n        if (this.current)\n        {\n            // TODO store temp\n            return { x: 0, y: 0, width: this.current.width, height: this.current.height };\n        }\n\n        return { x: 0, y: 0, width: this.renderer.width, height: this.renderer.height };\n    }\n\n    /**\n     * Clear the color of the context\n     *\n     * @param {Number} r - Red value from 0 to 1\n     * @param {Number} g - Green value from 0 to 1\n     * @param {Number} b - Blue value from 0 to 1\n     * @param {Number} a - Alpha value from 0 to 1\n     */\n    clear(r, g, b, a)\n    {\n        const { gl } = this;\n\n        // TODO clear color can be set only one right?\n        gl.clearColor(r, g, b, a);\n        gl.clear(gl.COLOR_BUFFER_BIT | gl.DEPTH_BUFFER_BIT);\n    }\n\n    /**\n     * Initialize framebuffer\n     *\n     * @protected\n     * @param {PIXI.Framebuffer} framebuffer\n     */\n    initFramebuffer(framebuffer)\n    {\n        const { gl } = this;\n\n        // TODO - make this a class?\n        const fbo = {\n            framebuffer: gl.createFramebuffer(),\n            stencil: null,\n            dirtyId: 0,\n            dirtyFormat: 0,\n            dirtySize: 0,\n        };\n\n        framebuffer.glFramebuffers[this.CONTEXT_UID] = fbo;\n\n        this.managedFramebuffers.push(framebuffer);\n        framebuffer.disposeRunner.add(this);\n\n        return fbo;\n    }\n\n    /**\n     * Resize the framebuffer\n     *\n     * @protected\n     * @param {PIXI.Framebuffer} framebuffer\n     */\n    resizeFramebuffer(framebuffer)\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (fbo.stencil)\n        {\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n        }\n\n        const colorTextures = framebuffer.colorTextures;\n\n        for (let i = 0; i < colorTextures.length; i++)\n        {\n            this.renderer.texture.bind(colorTextures[i], 0);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            this.renderer.texture.bind(framebuffer.depthTexture, 0);\n        }\n    }\n\n    /**\n     * Update the framebuffer\n     *\n     * @protected\n     * @param {PIXI.Framebuffer} framebuffer\n     */\n    updateFramebuffer(framebuffer)\n    {\n        const { gl } = this;\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        // bind the color texture\n        const colorTextures = framebuffer.colorTextures;\n\n        let count = colorTextures.length;\n\n        if (!gl.drawBuffers)\n        {\n            count = Math.min(count, 1);\n        }\n\n        const activeTextures = [];\n\n        for (let i = 0; i < count; i++)\n        {\n            const texture = framebuffer.colorTextures[i];\n\n            if (texture.texturePart)\n            {\n                this.renderer.texture.bind(texture.texture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    gl.TEXTURE_CUBE_MAP_NEGATIVE_X + texture.side,\n                    texture.texture._glTextures[this.CONTEXT_UID].texture,\n                    0);\n            }\n            else\n            {\n                this.renderer.texture.bind(texture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.COLOR_ATTACHMENT0 + i,\n                    gl.TEXTURE_2D,\n                    texture._glTextures[this.CONTEXT_UID].texture,\n                    0);\n            }\n\n            activeTextures.push(gl.COLOR_ATTACHMENT0 + i);\n        }\n\n        if (activeTextures.length > 1)\n        {\n            gl.drawBuffers(activeTextures);\n        }\n\n        if (framebuffer.depthTexture)\n        {\n            const writeDepthTexture = this.writeDepthTexture;\n\n            if (writeDepthTexture)\n            {\n                const depthTexture = framebuffer.depthTexture;\n\n                this.renderer.texture.bind(depthTexture, 0);\n\n                gl.framebufferTexture2D(gl.FRAMEBUFFER,\n                    gl.DEPTH_ATTACHMENT,\n                    gl.TEXTURE_2D,\n                    depthTexture._glTextures[this.CONTEXT_UID].texture,\n                    0);\n            }\n        }\n\n        if (!fbo.stencil && (framebuffer.stencil || framebuffer.depth))\n        {\n            fbo.stencil = gl.createRenderbuffer();\n\n            gl.bindRenderbuffer(gl.RENDERBUFFER, fbo.stencil);\n\n            gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, framebuffer.width, framebuffer.height);\n            // TODO.. this is depth AND stencil?\n            if (!framebuffer.depthTexture)\n            { // you can't have both, so one should take priority if enabled\n                gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, fbo.stencil);\n            }\n        }\n    }\n\n    /**\n     * Disposes framebuffer\n     * @param {PIXI.Framebuffer} framebuffer framebuffer that has to be disposed of\n     * @param {boolean} [contextLost=false] If context was lost, we suppress all delete function calls\n     */\n    disposeFramebuffer(framebuffer, contextLost)\n    {\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        if (!fbo)\n        {\n            return;\n        }\n\n        delete framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        const index = this.managedFramebuffers.indexOf(framebuffer);\n\n        if (index >= 0)\n        {\n            this.managedFramebuffers.splice(index, 1);\n        }\n\n        framebuffer.disposeRunner.remove(this);\n\n        if (!contextLost)\n        {\n            gl.deleteFramebuffer(fbo.framebuffer);\n            if (fbo.stencil)\n            {\n                gl.deleteRenderbuffer(fbo.stencil);\n            }\n        }\n    }\n\n    /**\n     * Disposes all framebuffers, but not textures bound to them\n     * @param {boolean} [contextLost=false] If context was lost, we suppress all delete function calls\n     */\n    disposeAll(contextLost)\n    {\n        const list = this.managedFramebuffers;\n\n        this.managedFramebuffers = [];\n\n        for (let i = 0; i < list.length; i++)\n        {\n            this.disposeFramebuffer(list[i], contextLost);\n        }\n    }\n\n    /**\n     * Forcing creation of stencil buffer for current framebuffer, if it wasn't done before.\n     * Used by MaskSystem, when its time to use stencil mask for Graphics element.\n     *\n     * Its an alternative for public lazy `framebuffer.enableStencil`, in case we need stencil without rebind.\n     *\n     * @private\n     */\n    forceStencil()\n    {\n        const framebuffer = this.current;\n\n        if (!framebuffer)\n        {\n            return;\n        }\n\n        const fbo = framebuffer.glFramebuffers[this.CONTEXT_UID];\n\n        if (!fbo || fbo.stencil)\n        {\n            return;\n        }\n        framebuffer.enableStencil();\n\n        const w = framebuffer.width;\n        const h = framebuffer.height;\n        const gl = this.gl;\n        const stencil = gl.createRenderbuffer();\n\n        gl.bindRenderbuffer(gl.RENDERBUFFER, stencil);\n        gl.renderbufferStorage(gl.RENDERBUFFER, gl.DEPTH_STENCIL, w, h);\n\n        fbo.stencil = stencil;\n        gl.framebufferRenderbuffer(gl.FRAMEBUFFER, gl.DEPTH_STENCIL_ATTACHMENT, gl.RENDERBUFFER, stencil);\n    }\n\n    /**\n     * resets framebuffer stored state, binds screen framebuffer\n     *\n     * should be called before renderTexture reset()\n     */\n    reset()\n    {\n        this.current = this.unknownFramebuffer;\n        this.viewport = new Rectangle();\n    }\n}\n","export default class GLBuffer\n{\n    constructor(buffer)\n    {\n        this.buffer = buffer;\n        this.updateID = -1;\n        this.byteLength = -1;\n        this.refCount = 0;\n    }\n}\n","import System from '../System';\nimport GLBuffer from './GLBuffer';\nimport { ENV } from '@pixi/constants';\nimport { settings } from '../settings';\n\nconst byteSizeMap = { 5126: 4, 5123: 2, 5121: 1 };\n\n/**\n * System plugin to the renderer to manage geometry.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\nexport default class GeometrySystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        this._activeGeometry = null;\n        this._activeVao = null;\n\n        /**\n         * `true` if we has `*_vertex_array_object` extension\n         * @member {boolean}\n         * @readonly\n         */\n        this.hasVao = true;\n\n        /**\n         * `true` if has `ANGLE_instanced_arrays` extension\n         * @member {boolean}\n         * @readonly\n         */\n        this.hasInstance = true;\n\n        /**\n         * `true` if support `gl.UNSIGNED_INT` in `gl.drawElements` or `gl.drawElementsInstanced`\n         * @member {boolean}\n         * @readonly\n         */\n        this.canUseUInt32ElementIndex = false;\n\n        /**\n         * A cache of currently bound buffer,\n         * contains only two members with keys ARRAY_BUFFER and ELEMENT_ARRAY_BUFFER\n         * @member {Object.<number, PIXI.Buffer>}\n         * @readonly\n         */\n        this.boundBuffers = {};\n\n        /**\n         * Cache for all geometries by id, used in case renderer gets destroyed or for profiling\n         * @member {object}\n         * @readonly\n         */\n        this.managedGeometries = {};\n\n        /**\n         * Cache for all buffers by id, used in case renderer gets destroyed or for profiling\n         * @member {object}\n         * @readonly\n         */\n        this.managedBuffers = {};\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     */\n    contextChange()\n    {\n        this.disposeAll(true);\n\n        const gl = this.gl = this.renderer.gl;\n        const context = this.renderer.context;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n\n        // webgl2\n        if (!gl.createVertexArray)\n        {\n            // webgl 1!\n            let nativeVaoExtension = this.renderer.context.extensions.vertexArrayObject;\n\n            if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n            {\n                nativeVaoExtension = null;\n            }\n\n            if (nativeVaoExtension)\n            {\n                gl.createVertexArray = () =>\n                    nativeVaoExtension.createVertexArrayOES();\n\n                gl.bindVertexArray = (vao) =>\n                    nativeVaoExtension.bindVertexArrayOES(vao);\n\n                gl.deleteVertexArray = (vao) =>\n                    nativeVaoExtension.deleteVertexArrayOES(vao);\n            }\n            else\n            {\n                this.hasVao = false;\n                gl.createVertexArray = () =>\n                {\n                    // empty\n                };\n\n                gl.bindVertexArray = () =>\n                {\n                    // empty\n                };\n\n                gl.deleteVertexArray = () =>\n                {\n                    // empty\n                };\n            }\n        }\n\n        if (!gl.vertexAttribDivisor)\n        {\n            const instanceExt = gl.getExtension('ANGLE_instanced_arrays');\n\n            if (instanceExt)\n            {\n                gl.vertexAttribDivisor = (a, b) =>\n                    instanceExt.vertexAttribDivisorANGLE(a, b);\n\n                gl.drawElementsInstanced = (a, b, c, d, e) =>\n                    instanceExt.drawElementsInstancedANGLE(a, b, c, d, e);\n\n                gl.drawArraysInstanced = (a, b, c, d) =>\n                    instanceExt.drawArraysInstancedANGLE(a, b, c, d);\n            }\n            else\n            {\n                this.hasInstance = false;\n            }\n        }\n\n        this.canUseUInt32ElementIndex = context.webGLVersion === 2 || !!context.extensions.uint32ElementIndex;\n    }\n\n    /**\n     * Binds geometry so that is can be drawn. Creating a Vao if required\n     *\n     * @param {PIXI.Geometry} geometry instance of geometry to bind\n     * @param {PIXI.Shader} [shader] instance of shader to use vao for\n     */\n    bind(geometry, shader)\n    {\n        shader = shader || this.renderer.shader.shader;\n\n        const { gl } = this;\n\n        // not sure the best way to address this..\n        // currently different shaders require different VAOs for the same geometry\n        // Still mulling over the best way to solve this one..\n        // will likely need to modify the shader attribute locations at run time!\n        let vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n\n        if (!vaos)\n        {\n            this.managedGeometries[geometry.id] = geometry;\n            geometry.disposeRunner.add(this);\n            geometry.glVertexArrayObjects[this.CONTEXT_UID] = vaos = {};\n        }\n\n        const vao = vaos[shader.program.id] || this.initGeometryVao(geometry, shader.program);\n\n        this._activeGeometry = geometry;\n\n        if (this._activeVao !== vao)\n        {\n            this._activeVao = vao;\n\n            if (this.hasVao)\n            {\n                gl.bindVertexArray(vao);\n            }\n            else\n            {\n                this.activateVao(geometry, shader.program);\n            }\n        }\n\n        // TODO - optimise later!\n        // don't need to loop through if nothing changed!\n        // maybe look to add an 'autoupdate' to geometry?\n        this.updateBuffers();\n    }\n\n    /**\n     * Reset and unbind any active VAO and geometry\n     */\n    reset()\n    {\n        this.unbind();\n    }\n\n    /**\n     * Update buffers\n     * @protected\n     */\n    updateBuffers()\n    {\n        const geometry = this._activeGeometry;\n        const { gl } = this;\n\n        for (let i = 0; i < geometry.buffers.length; i++)\n        {\n            const buffer = geometry.buffers[i];\n\n            const glBuffer = buffer._glBuffers[this.CONTEXT_UID];\n\n            if (buffer._updateID !== glBuffer.updateID)\n            {\n                glBuffer.updateID = buffer._updateID;\n\n                // TODO can cache this on buffer! maybe added a getter / setter?\n                const type = buffer.index ? gl.ELEMENT_ARRAY_BUFFER : gl.ARRAY_BUFFER;\n\n                // TODO this could change if the VAO changes...\n                // need to come up with a better way to cache..\n                // if (this.boundBuffers[type] !== glBuffer)\n                // {\n                // this.boundBuffers[type] = glBuffer;\n                gl.bindBuffer(type, glBuffer.buffer);\n                // }\n\n                this._boundBuffer = glBuffer;\n\n                if (glBuffer.byteLength >= buffer.data.byteLength)\n                {\n                    // offset is always zero for now!\n                    gl.bufferSubData(type, 0, buffer.data);\n                }\n                else\n                {\n                    const drawType = buffer.static ? gl.STATIC_DRAW : gl.DYNAMIC_DRAW;\n\n                    glBuffer.byteLength = buffer.data.byteLength;\n                    gl.bufferData(type, buffer.data, drawType);\n                }\n            }\n        }\n    }\n\n    /**\n     * Check compability between a geometry and a program\n     * @protected\n     * @param {PIXI.Geometry} geometry - Geometry instance\n     * @param {PIXI.Program} program - Program instance\n     */\n    checkCompatibility(geometry, program)\n    {\n        // geometry must have at least all the attributes that the shader requires.\n        const geometryAttributes = geometry.attributes;\n        const shaderAttributes = program.attributeData;\n\n        for (const j in shaderAttributes)\n        {\n            if (!geometryAttributes[j])\n            {\n                throw new Error(`shader and geometry incompatible, geometry missing the \"${j}\" attribute`);\n            }\n        }\n    }\n\n    /**\n     * Takes a geometry and program and generates a unique signature for them.\n     *\n     * @param {PIXI.Geometry} geometry to get signature from\n     * @param {PIXI.Program} program to test geometry against\n     * @returns {String} Unique signature of the geometry and program\n     * @protected\n     */\n    getSignature(geometry, program)\n    {\n        const attribs = geometry.attributes;\n        const shaderAttributes = program.attributeData;\n\n        const strings = ['g', geometry.id];\n\n        for (const i in attribs)\n        {\n            if (shaderAttributes[i])\n            {\n                strings.push(i);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Creates or gets Vao with the same structure as the geometry and stores it on the geometry.\n     * If vao is created, it is bound automatically.\n     *\n     * @protected\n     * @param {PIXI.Geometry} geometry - Instance of geometry to to generate Vao for\n     * @param {PIXI.Program} program - Instance of program\n     */\n    initGeometryVao(geometry, program)\n    {\n        this.checkCompatibility(geometry, program);\n\n        const gl = this.gl;\n        const CONTEXT_UID = this.CONTEXT_UID;\n\n        const signature = this.getSignature(geometry, program);\n\n        const vaoObjectHash = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n\n        let vao = vaoObjectHash[signature];\n\n        if (vao)\n        {\n            // this will give us easy access to the vao\n            vaoObjectHash[program.id] = vao;\n\n            return vao;\n        }\n\n        const buffers = geometry.buffers;\n        const attributes = geometry.attributes;\n        const tempStride = {};\n        const tempStart = {};\n\n        for (const j in buffers)\n        {\n            tempStride[j] = 0;\n            tempStart[j] = 0;\n        }\n\n        for (const j in attributes)\n        {\n            if (!attributes[j].size && program.attributeData[j])\n            {\n                attributes[j].size = program.attributeData[j].size;\n            }\n            else if (!attributes[j].size)\n            {\n                console.warn(`PIXI Geometry attribute '${j}' size cannot be determined (likely the bound shader does not have the attribute)`);  // eslint-disable-line\n            }\n\n            tempStride[attributes[j].buffer] += attributes[j].size * byteSizeMap[attributes[j].type];\n        }\n\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const attribSize = attribute.size;\n\n            if (attribute.stride === undefined)\n            {\n                if (tempStride[attribute.buffer] === attribSize * byteSizeMap[attribute.type])\n                {\n                    attribute.stride = 0;\n                }\n                else\n                {\n                    attribute.stride = tempStride[attribute.buffer];\n                }\n            }\n\n            if (attribute.start === undefined)\n            {\n                attribute.start = tempStart[attribute.buffer];\n\n                tempStart[attribute.buffer] += attribSize * byteSizeMap[attribute.type];\n            }\n        }\n\n        vao = gl.createVertexArray();\n\n        gl.bindVertexArray(vao);\n\n        // first update - and create the buffers!\n        // only create a gl buffer if it actually gets\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buffer = buffers[i];\n\n            if (!buffer._glBuffers[CONTEXT_UID])\n            {\n                buffer._glBuffers[CONTEXT_UID] = new GLBuffer(gl.createBuffer());\n                this.managedBuffers[buffer.id] = buffer;\n                buffer.disposeRunner.add(this);\n            }\n\n            buffer._glBuffers[CONTEXT_UID].refCount++;\n        }\n\n        // TODO - maybe make this a data object?\n        // lets wait to see if we need to first!\n\n        this.activateVao(geometry, program);\n\n        this._activeVao = vao;\n\n        // add it to the cache!\n        vaoObjectHash[program.id] = vao;\n        vaoObjectHash[signature] = vao;\n\n        return vao;\n    }\n\n    /**\n     * Disposes buffer\n     * @param {PIXI.Buffer} buffer buffer with data\n     * @param {boolean} [contextLost=false] If context was lost, we suppress deleteVertexArray\n     */\n    disposeBuffer(buffer, contextLost)\n    {\n        if (!this.managedBuffers[buffer.id])\n        {\n            return;\n        }\n\n        delete this.managedBuffers[buffer.id];\n\n        const glBuffer = buffer._glBuffers[this.CONTEXT_UID];\n        const gl = this.gl;\n\n        buffer.disposeRunner.remove(this);\n\n        if (!glBuffer)\n        {\n            return;\n        }\n\n        if (!contextLost)\n        {\n            gl.deleteBuffer(glBuffer.buffer);\n        }\n\n        delete buffer._glBuffers[this.CONTEXT_UID];\n    }\n\n    /**\n     * Disposes geometry\n     * @param {PIXI.Geometry} geometry Geometry with buffers. Only VAO will be disposed\n     * @param {boolean} [contextLost=false] If context was lost, we suppress deleteVertexArray\n     */\n    disposeGeometry(geometry, contextLost)\n    {\n        if (!this.managedGeometries[geometry.id])\n        {\n            return;\n        }\n\n        delete this.managedGeometries[geometry.id];\n\n        const vaos = geometry.glVertexArrayObjects[this.CONTEXT_UID];\n        const gl = this.gl;\n        const buffers = geometry.buffers;\n\n        geometry.disposeRunner.remove(this);\n\n        if (!vaos)\n        {\n            return;\n        }\n\n        for (let i = 0; i < buffers.length; i++)\n        {\n            const buf = buffers[i]._glBuffers[this.CONTEXT_UID];\n\n            buf.refCount--;\n            if (buf.refCount === 0 && !contextLost)\n            {\n                this.disposeBuffer(buffers[i], contextLost);\n            }\n        }\n\n        if (!contextLost)\n        {\n            for (const vaoId in vaos)\n            {\n                // delete only signatures, everything else are copies\n                if (vaoId[0] === 'g')\n                {\n                    const vao = vaos[vaoId];\n\n                    if (this._activeVao === vao)\n                    {\n                        this.unbind();\n                    }\n                    gl.deleteVertexArray(vao);\n                }\n            }\n        }\n\n        delete geometry.glVertexArrayObjects[this.CONTEXT_UID];\n    }\n\n    /**\n     * dispose all WebGL resources of all managed geometries and buffers\n     * @param {boolean} [contextLost=false] If context was lost, we suppress `gl.delete` calls\n     */\n    disposeAll(contextLost)\n    {\n        let all = Object.keys(this.managedGeometries);\n\n        for (let i = 0; i < all.length; i++)\n        {\n            this.disposeGeometry(this.managedGeometries[all[i]], contextLost);\n        }\n        all = Object.keys(this.managedBuffers);\n        for (let i = 0; i < all.length; i++)\n        {\n            this.disposeBuffer(this.managedBuffers[all[i]], contextLost);\n        }\n    }\n\n    /**\n     * Activate vertex array object\n     *\n     * @protected\n     * @param {PIXI.Geometry} geometry - Geometry instance\n     * @param {PIXI.Program} program - Shader program instance\n     */\n    activateVao(geometry, program)\n    {\n        const gl = this.gl;\n        const CONTEXT_UID = this.CONTEXT_UID;\n        const buffers = geometry.buffers;\n        const attributes = geometry.attributes;\n\n        if (geometry.indexBuffer)\n        {\n            // first update the index buffer if we have one..\n            gl.bindBuffer(gl.ELEMENT_ARRAY_BUFFER, geometry.indexBuffer._glBuffers[CONTEXT_UID].buffer);\n        }\n\n        let lastBuffer = null;\n\n        // add a new one!\n        for (const j in attributes)\n        {\n            const attribute = attributes[j];\n            const buffer = buffers[attribute.buffer];\n            const glBuffer = buffer._glBuffers[CONTEXT_UID];\n\n            if (program.attributeData[j])\n            {\n                if (lastBuffer !== glBuffer)\n                {\n                    gl.bindBuffer(gl.ARRAY_BUFFER, glBuffer.buffer);\n\n                    lastBuffer = glBuffer;\n                }\n\n                const location = program.attributeData[j].location;\n\n                // TODO introduce state again\n                // we can optimise this for older devices that have no VAOs\n                gl.enableVertexAttribArray(location);\n\n                gl.vertexAttribPointer(location,\n                    attribute.size,\n                    attribute.type || gl.FLOAT,\n                    attribute.normalized,\n                    attribute.stride,\n                    attribute.start);\n\n                if (attribute.instance)\n                {\n                    // TODO calculate instance count based of this...\n                    if (this.hasInstance)\n                    {\n                        gl.vertexAttribDivisor(location, 1);\n                    }\n                    else\n                    {\n                        throw new Error('geometry error, GPU Instancing is not supported on this device');\n                    }\n                }\n            }\n        }\n    }\n\n    /**\n     * Draw the geometry\n     *\n     * @param {Number} type - the type primitive to render\n     * @param {Number} [size] - the number of elements to be rendered\n     * @param {Number} [start] - Starting index\n     * @param {Number} [instanceCount] - the number of instances of the set of elements to execute\n     */\n    draw(type, size, start, instanceCount)\n    {\n        const { gl } = this;\n        const geometry = this._activeGeometry;\n\n        // TODO.. this should not change so maybe cache the function?\n\n        if (geometry.indexBuffer)\n        {\n            const byteSize = geometry.indexBuffer.data.BYTES_PER_ELEMENT;\n            const glType = byteSize === 2 ? gl.UNSIGNED_SHORT : gl.UNSIGNED_INT;\n\n            if (byteSize === 2 || (byteSize === 4 && this.canUseUInt32ElementIndex))\n            {\n                if (geometry.instanced)\n                {\n                    /* eslint-disable max-len */\n                    gl.drawElementsInstanced(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize, instanceCount || 1);\n                    /* eslint-enable max-len */\n                }\n                else\n                {\n                    /* eslint-disable max-len */\n                    gl.drawElements(type, size || geometry.indexBuffer.data.length, glType, (start || 0) * byteSize);\n                    /* eslint-enable max-len */\n                }\n            }\n            else\n            {\n                console.warn('unsupported index buffer type: uint32');\n            }\n        }\n        else if (geometry.instanced)\n        {\n            // TODO need a better way to calculate size..\n            gl.drawArraysInstanced(type, start, size || geometry.getSize(), instanceCount || 1);\n        }\n        else\n        {\n            gl.drawArrays(type, start, size || geometry.getSize());\n        }\n\n        return this;\n    }\n\n    /**\n     * Unbind/reset everything\n     * @protected\n     */\n    unbind()\n    {\n        this.gl.bindVertexArray(null);\n        this._activeVao = null;\n        this._activeGeometry = null;\n    }\n}\n","/**\n * @method compileProgram\n * @private\n * @memberof PIXI.glCore.shader\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @param fragmentSrc {string|string[]} The fragment shader source as an array of strings.\n * @param attributeLocations {Object} An attribute location map that lets you manually set the attribute locations\n * @return {WebGLProgram} the shader program\n */\nexport default function compileProgram(gl, vertexSrc, fragmentSrc, attributeLocations)\n{\n    const glVertShader = compileShader(gl, gl.VERTEX_SHADER, vertexSrc);\n    const glFragShader = compileShader(gl, gl.FRAGMENT_SHADER, fragmentSrc);\n\n    let program = gl.createProgram();\n\n    gl.attachShader(program, glVertShader);\n    gl.attachShader(program, glFragShader);\n\n    // optionally, set the attributes manually for the program rather than letting WebGL decide..\n    if (attributeLocations)\n    {\n        for (const i in attributeLocations)\n        {\n            gl.bindAttribLocation(program, attributeLocations[i], i);\n        }\n    }\n\n    gl.linkProgram(program);\n\n    // if linking fails, then log and cleanup\n    if (!gl.getProgramParameter(program, gl.LINK_STATUS))\n    {\n        console.error('Pixi.js Error: Could not initialize shader.');\n        console.error('gl.VALIDATE_STATUS', gl.getProgramParameter(program, gl.VALIDATE_STATUS));\n        console.error('gl.getError()', gl.getError());\n\n        // if there is a program info log, log it\n        if (gl.getProgramInfoLog(program) !== '')\n        {\n            console.warn('Pixi.js Warning: gl.getProgramInfoLog()', gl.getProgramInfoLog(program));\n        }\n\n        gl.deleteProgram(program);\n        program = null;\n    }\n\n    // clean up some shaders\n    gl.deleteShader(glVertShader);\n    gl.deleteShader(glFragShader);\n\n    return program;\n}\n\n/**\n * @private\n * @param gl {WebGLRenderingContext} The current WebGL context {WebGLProgram}\n * @param type {Number} the type, can be either VERTEX_SHADER or FRAGMENT_SHADER\n * @param vertexSrc {string|string[]} The vertex shader source as an array of strings.\n * @return {WebGLShader} the shader\n */\nfunction compileShader(gl, type, src)\n{\n    const shader = gl.createShader(type);\n\n    gl.shaderSource(shader, src);\n    gl.compileShader(shader);\n\n    if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n    {\n        console.warn(src);\n        console.error(gl.getShaderInfoLog(shader));\n\n        return null;\n    }\n\n    return shader;\n}\n","/**\n * @method defaultValue\n * @memberof PIXI.glCore.shader\n * @param type {String} Type of value\n * @param size {Number}\n * @private\n */\nexport default function defaultValue(type, size)\n{\n    switch (type)\n    {\n        case 'float':\n            return 0;\n\n        case 'vec2':\n            return new Float32Array(2 * size);\n\n        case 'vec3':\n            return new Float32Array(3 * size);\n\n        case 'vec4':\n            return new Float32Array(4 * size);\n\n        case 'int':\n        case 'sampler2D':\n        case 'sampler2DArray':\n            return 0;\n\n        case 'ivec2':\n            return new Int32Array(2 * size);\n\n        case 'ivec3':\n            return new Int32Array(3 * size);\n\n        case 'ivec4':\n            return new Int32Array(4 * size);\n\n        case 'bool':\n            return false;\n\n        case 'bvec2':\n\n            return booleanArray(2 * size);\n\n        case 'bvec3':\n            return booleanArray(3 * size);\n\n        case 'bvec4':\n            return booleanArray(4 * size);\n\n        case 'mat2':\n            return new Float32Array([1, 0,\n                0, 1]);\n\n        case 'mat3':\n            return new Float32Array([1, 0, 0,\n                0, 1, 0,\n                0, 0, 1]);\n\n        case 'mat4':\n            return new Float32Array([1, 0, 0, 0,\n                0, 1, 0, 0,\n                0, 0, 1, 0,\n                0, 0, 0, 1]);\n    }\n\n    return null;\n}\n\nfunction booleanArray(size)\n{\n    const array = new Array(size);\n\n    for (let i = 0; i < array.length; i++)\n    {\n        array[i] = false;\n    }\n\n    return array;\n}\n","import { settings } from '../../settings';\nimport { ENV } from '@pixi/constants';\n\nconst unknownContext = {};\nlet context = unknownContext;\n\n/**\n * returns a little WebGL context to use for program inspection.\n *\n * @static\n * @private\n * @returns {webGL-context} a gl context to test with\n */\nexport default function getTestContext()\n{\n    if (context === unknownContext || context.isContextLost())\n    {\n        const canvas = document.createElement('canvas');\n\n        let gl;\n\n        if (settings.PREFER_ENV >= ENV.WEBGL2)\n        {\n            gl = canvas.getContext('webgl2', {});\n        }\n\n        if (!gl)\n        {\n            gl = canvas.getContext('webgl', {})\n            || canvas.getContext('experimental-webgl', {});\n\n            if (!gl)\n            {\n                // fail, not able to get a context\n                gl = null;\n            }\n            else\n            {\n                // for shader testing..\n                gl.getExtension('WEBGL_draw_buffers');\n            }\n        }\n\n        context = gl;\n    }\n\n    return context;\n}\n","import getTestContext from './getTestContext';\nimport { PRECISION } from '@pixi/constants';\n\nlet maxFragmentPrecision;\n\nexport default function getMaxFragmentPrecision()\n{\n    if (!maxFragmentPrecision)\n    {\n        maxFragmentPrecision = PRECISION.MEDIUM;\n        const gl = getTestContext();\n\n        if (gl)\n        {\n            if (gl.getShaderPrecisionFormat)\n            {\n                const shaderFragment = gl.getShaderPrecisionFormat(gl.FRAGMENT_SHADER, gl.HIGH_FLOAT);\n\n                maxFragmentPrecision = shaderFragment.precision ? PRECISION.HIGH : PRECISION.MEDIUM;\n            }\n        }\n    }\n\n    return maxFragmentPrecision;\n}\n","import { PRECISION } from '@pixi/constants';\n\n/**\n * Sets the float precision on the shader, ensuring the device supports the request precision.\n * If the precision is already present, it just ensures that the device is able to handle it.\n *\n * @private\n * @param {string} src - The shader source\n * @param {string} requestedPrecision - The request float precision of the shader. Options are 'lowp', 'mediump' or 'highp'.\n * @param {string} maxSupportedPrecision - The maximum precision the shader supports.\n *\n * @return {string} modified shader source\n */\nexport default function setPrecision(src, requestedPrecision, maxSupportedPrecision)\n{\n    if (src.substring(0, 9) !== 'precision')\n    {\n        // no precision supplied, so PixiJS will add the requested level.\n        let precision = requestedPrecision;\n\n        // If highp is requested but not supported, downgrade precision to a level all devices support.\n        if (requestedPrecision === PRECISION.HIGH && maxSupportedPrecision !== PRECISION.HIGH)\n        {\n            precision = PRECISION.MEDIUM;\n        }\n\n        return `precision ${precision} float;\\n${src}`;\n    }\n    else if (maxSupportedPrecision !== PRECISION.HIGH && src.substring(0, 15) === 'precision highp')\n    {\n        // precision was supplied, but at a level this device does not support, so downgrading to mediump.\n        return src.replace('precision highp', 'precision mediump');\n    }\n\n    return src;\n}\n","const GLSL_TO_SIZE = {\n    float:    1,\n    vec2:     2,\n    vec3:     3,\n    vec4:     4,\n\n    int:      1,\n    ivec2:    2,\n    ivec3:    3,\n    ivec4:    4,\n\n    bool:     1,\n    bvec2:    2,\n    bvec3:    3,\n    bvec4:    4,\n\n    mat2:     4,\n    mat3:     9,\n    mat4:     16,\n\n    sampler2D:  1,\n};\n\n/**\n * @private\n * @method mapSize\n * @memberof PIXI.glCore.shader\n * @param type {String}\n * @return {Number}\n */\nexport default function mapSize(type)\n{\n    return GLSL_TO_SIZE[type];\n}\n","let GL_TABLE = null;\n\nconst GL_TO_GLSL_TYPES = {\n    FLOAT:       'float',\n    FLOAT_VEC2:  'vec2',\n    FLOAT_VEC3:  'vec3',\n    FLOAT_VEC4:  'vec4',\n\n    INT:         'int',\n    INT_VEC2:    'ivec2',\n    INT_VEC3:    'ivec3',\n    INT_VEC4:    'ivec4',\n\n    BOOL:        'bool',\n    BOOL_VEC2:   'bvec2',\n    BOOL_VEC3:   'bvec3',\n    BOOL_VEC4:   'bvec4',\n\n    FLOAT_MAT2:  'mat2',\n    FLOAT_MAT3:  'mat3',\n    FLOAT_MAT4:  'mat4',\n\n    SAMPLER_2D:  'sampler2D',\n    SAMPLER_CUBE:  'samplerCube',\n    SAMPLER_2D_ARRAY:  'sampler2DArray',\n};\n\nexport default function mapType(gl, type)\n{\n    if (!GL_TABLE)\n    {\n        const typeNames = Object.keys(GL_TO_GLSL_TYPES);\n\n        GL_TABLE = {};\n\n        for (let i = 0; i < typeNames.length; ++i)\n        {\n            const tn = typeNames[i];\n\n            GL_TABLE[gl[tn]] = GL_TO_GLSL_TYPES[tn];\n        }\n    }\n\n    return GL_TABLE[type];\n}\n","// cv = CachedValue\n// v = value\n// ud = uniformData\n// uv = uniformValue\n// l = location\nconst GLSL_TO_SINGLE_SETTERS_CACHED = {\n\n    float: `\n    if(cv !== v)\n    {\n        cv.v = v;\n        gl.uniform1f(location, v)\n    }`,\n\n    vec2: `\n    if(cv[0] !== v[0] || cv[1] !== v[1])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        gl.uniform2f(location, v[0], v[1])\n    }`,\n\n    vec3: `\n    if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2])\n    {\n        cv[0] = v[0];\n        cv[1] = v[1];\n        cv[2] = v[2];\n\n        gl.uniform3f(location, v[0], v[1], v[2])\n    }`,\n\n    vec4:     'gl.uniform4f(location, v[0], v[1], v[2], v[3])',\n\n    int:      'gl.uniform1i(location, v)',\n    ivec2:    'gl.uniform2i(location, v[0], v[1])',\n    ivec3:    'gl.uniform3i(location, v[0], v[1], v[2])',\n    ivec4:    'gl.uniform4i(location, v[0], v[1], v[2], v[3])',\n\n    bool:     'gl.uniform1i(location, v)',\n    bvec2:    'gl.uniform2i(location, v[0], v[1])',\n    bvec3:    'gl.uniform3i(location, v[0], v[1], v[2])',\n    bvec4:    'gl.uniform4i(location, v[0], v[1], v[2], v[3])',\n\n    mat2:     'gl.uniformMatrix2fv(location, false, v)',\n    mat3:     'gl.uniformMatrix3fv(location, false, v)',\n    mat4:     'gl.uniformMatrix4fv(location, false, v)',\n\n    sampler2D:      'gl.uniform1i(location, v)',\n    samplerCube:    'gl.uniform1i(location, v)',\n    sampler2DArray: 'gl.uniform1i(location, v)',\n};\n\nconst GLSL_TO_ARRAY_SETTERS = {\n\n    float:    `gl.uniform1fv(location, v)`,\n\n    vec2:     `gl.uniform2fv(location, v)`,\n    vec3:     `gl.uniform3fv(location, v)`,\n    vec4:     'gl.uniform4fv(location, v)',\n\n    mat4:     'gl.uniformMatrix4fv(location, false, v)',\n    mat3:     'gl.uniformMatrix3fv(location, false, v)',\n    mat2:     'gl.uniformMatrix2fv(location, false, v)',\n\n    int:      'gl.uniform1iv(location, v)',\n    ivec2:    'gl.uniform2iv(location, v)',\n    ivec3:    'gl.uniform3iv(location, v)',\n    ivec4:    'gl.uniform4iv(location, v)',\n\n    bool:     'gl.uniform1iv(location, v)',\n    bvec2:    'gl.uniform2iv(location, v)',\n    bvec3:    'gl.uniform3iv(location, v)',\n    bvec4:    'gl.uniform4iv(location, v)',\n\n    sampler2D:      'gl.uniform1iv(location, v)',\n    samplerCube:    'gl.uniform1iv(location, v)',\n    sampler2DArray: 'gl.uniform1iv(location, v)',\n};\n\nexport default function generateUniformsSync(group, uniformData)\n{\n    let textureCount = 0;\n    let func = `var v = null;\n    var cv = null\n    var gl = renderer.gl`;\n\n    for (const i in group.uniforms)\n    {\n        const data = uniformData[i];\n\n        if (!data)\n        {\n            if (group.uniforms[i].group)\n            {\n                func += `\n                    renderer.shader.syncUniformGroup(uv.${i});\n                `;\n            }\n\n            continue;\n        }\n\n        // TODO && uniformData[i].value !== 0 <-- do we still need this?\n        if (data.type === 'float' && data.size === 1)\n        {\n            func += `\n            if(uv.${i} !== ud.${i}.value)\n            {\n                ud.${i}.value = uv.${i}\n                gl.uniform1f(ud.${i}.location, uv.${i})\n            }\\n`;\n        }\n        /* eslint-disable max-len */\n        else if ((data.type === 'sampler2D' || data.type === 'samplerCube' || data.type === 'sampler2DArray') && data.size === 1 && !data.isArray)\n        /* eslint-disable max-len */\n        {\n            func += `\n            renderer.texture.bind(uv.${i}, ${textureCount});\n\n            if(ud.${i}.value !== ${textureCount})\n            {\n                ud.${i}.value = ${textureCount};\n                gl.uniform1i(ud.${i}.location, ${textureCount});\\n; // eslint-disable-line max-len\n            }\\n`;\n\n            textureCount++;\n        }\n        else if (data.type === 'mat3' && data.size === 1)\n        {\n            if (group.uniforms[i].a !== undefined)\n            {\n                // TODO and some smart caching dirty ids here!\n                func += `\n                gl.uniformMatrix3fv(ud.${i}.location, false, uv.${i}.toArray(true));\n                \\n`;\n            }\n            else\n            {\n                func += `\n                gl.uniformMatrix3fv(ud.${i}.location, false, uv.${i});\n                \\n`;\n            }\n        }\n        else if (data.type === 'vec2' && data.size === 1)\n        {\n            // TODO - do we need both here?\n            // maybe we can get away with only using points?\n            if (group.uniforms[i].x !== undefined)\n            {\n                func += `\n                cv = ud.${i}.value;\n                v = uv.${i};\n\n                if(cv[0] !== v.x || cv[1] !== v.y)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    gl.uniform2f(ud.${i}.location, v.x, v.y);\n                }\\n`;\n            }\n            else\n            {\n                func += `\n                cv = ud.${i}.value;\n                v = uv.${i};\n\n                if(cv[0] !== v[0] || cv[1] !== v[1])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    gl.uniform2f(ud.${i}.location, v[0], v[1]);\n                }\n                \\n`;\n            }\n        }\n        else if (data.type === 'vec4' && data.size === 1)\n        {\n            // TODO - do we need both here?\n            // maybe we can get away with only using points?\n            if (group.uniforms[i].width !== undefined)\n            {\n                func += `\n                cv = ud.${i}.value;\n                v = uv.${i};\n\n                if(cv[0] !== v.x || cv[1] !== v.y || cv[2] !== v.width || cv[3] !== v.height)\n                {\n                    cv[0] = v.x;\n                    cv[1] = v.y;\n                    cv[2] = v.width;\n                    cv[3] = v.height;\n                    gl.uniform4f(ud.${i}.location, v.x, v.y, v.width, v.height)\n                }\\n`;\n            }\n            else\n            {\n                func += `\n                cv = ud.${i}.value;\n                v = uv.${i};\n\n                if(cv[0] !== v[0] || cv[1] !== v[1] || cv[2] !== v[2] || cv[3] !== v[3])\n                {\n                    cv[0] = v[0];\n                    cv[1] = v[1];\n                    cv[2] = v[2];\n                    cv[3] = v[3];\n\n                    gl.uniform4f(ud.${i}.location, v[0], v[1], v[2], v[3])\n                }\n                \\n`;\n            }\n        }\n        else\n        {\n            const templateType = (data.size === 1) ? GLSL_TO_SINGLE_SETTERS_CACHED : GLSL_TO_ARRAY_SETTERS;\n\n            const template =  templateType[data.type].replace('location', `ud.${i}.location`);\n\n            func += `\n            cv = ud.${i}.value;\n            v = uv.${i};\n            ${template};\\n`;\n        }\n    }\n\n    return new Function('ud', 'uv', 'renderer', func); // eslint-disable-line no-new-func\n}\n","const fragTemplate = [\n    'precision mediump float;',\n    'void main(void){',\n    'float test = 0.1;',\n    '%forloop%',\n    'gl_FragColor = vec4(0.0);',\n    '}',\n].join('\\n');\n\nexport default function checkMaxIfStatementsInShader(maxIfs, gl)\n{\n    if (maxIfs === 0)\n    {\n        throw new Error('Invalid value of `0` passed to `checkMaxIfStatementsInShader`');\n    }\n\n    const shader = gl.createShader(gl.FRAGMENT_SHADER);\n\n    while (true) // eslint-disable-line no-constant-condition\n    {\n        const fragmentSrc = fragTemplate.replace(/%forloop%/gi, generateIfTestSrc(maxIfs));\n\n        gl.shaderSource(shader, fragmentSrc);\n        gl.compileShader(shader);\n\n        if (!gl.getShaderParameter(shader, gl.COMPILE_STATUS))\n        {\n            maxIfs = (maxIfs / 2) | 0;\n        }\n        else\n        {\n            // valid!\n            break;\n        }\n    }\n\n    return maxIfs;\n}\n\nfunction generateIfTestSrc(maxIfs)\n{\n    let src = '';\n\n    for (let i = 0; i < maxIfs; ++i)\n    {\n        if (i > 0)\n        {\n            src += '\\nelse ';\n        }\n\n        if (i < maxIfs - 1)\n        {\n            src += `if(test == ${i}.0){}`;\n        }\n    }\n\n    return src;\n}\n","// Cache the result to prevent running this over and over\nlet unsafeEval;\n\n/**\n * Not all platforms allow to generate function code (e.g., `new Function`).\n * this provides the platform-level detection.\n *\n * @private\n * @returns {boolean}\n */\nexport default function unsafeEvalSupported()\n{\n    if (typeof unsafeEval === 'boolean')\n    {\n        return unsafeEval;\n    }\n\n    try\n    {\n        /* eslint-disable no-new-func */\n        const func = new Function('param1', 'param2', 'param3', 'return param1[param2] === param3;');\n        /* eslint-enable no-new-func */\n\n        unsafeEval = func({ a: 'b' }, 'a', 'b') === true;\n    }\n    catch (e)\n    {\n        unsafeEval = false;\n    }\n\n    return unsafeEval;\n}\n","// import * as from '../systems/shader/shader';\nimport { setPrecision,\n    defaultValue,\n    compileProgram,\n    mapSize,\n    mapType,\n    getTestContext,\n    getMaxFragmentPrecision } from './utils';\nimport { ProgramCache } from '@pixi/utils';\nimport defaultFragment from './defaultProgram.frag';\nimport defaultVertex from './defaultProgram.vert';\nimport { settings } from '@pixi/settings';\nimport { PRECISION } from '@pixi/constants';\n\nlet UID = 0;\n\nconst nameCache = {};\n\n/**\n * Helper class to create a shader program.\n *\n * @class\n * @memberof PIXI\n */\nexport default class Program\n{\n    /**\n     * @param {string} [vertexSrc] - The source of the vertex shader.\n     * @param {string} [fragmentSrc] - The source of the fragment shader.\n     * @param {string} [name] - Name for shader\n     */\n    constructor(vertexSrc, fragmentSrc, name = 'pixi-shader')\n    {\n        this.id = UID++;\n\n        /**\n         * The vertex shader.\n         *\n         * @member {string}\n         */\n        this.vertexSrc = vertexSrc || Program.defaultVertexSrc;\n\n        /**\n         * The fragment shader.\n         *\n         * @member {string}\n         */\n        this.fragmentSrc = fragmentSrc || Program.defaultFragmentSrc;\n\n        this.vertexSrc = this.vertexSrc.trim();\n        this.fragmentSrc = this.fragmentSrc.trim();\n\n        if (this.vertexSrc.substring(0, 8) !== '#version')\n        {\n            name = name.replace(/\\s+/g, '-');\n\n            if (nameCache[name])\n            {\n                nameCache[name]++;\n                name += `-${nameCache[name]}`;\n            }\n            else\n            {\n                nameCache[name] = 1;\n            }\n\n            this.vertexSrc = `#define SHADER_NAME ${name}\\n${this.vertexSrc}`;\n            this.fragmentSrc = `#define SHADER_NAME ${name}\\n${this.fragmentSrc}`;\n\n            this.vertexSrc = setPrecision(this.vertexSrc, settings.PRECISION_VERTEX, PRECISION.HIGH);\n            this.fragmentSrc = setPrecision(this.fragmentSrc, settings.PRECISION_FRAGMENT, getMaxFragmentPrecision());\n        }\n\n        // currently this does not extract structs only default types\n        this.extractData(this.vertexSrc, this.fragmentSrc);\n\n        // this is where we store shader references..\n        this.glPrograms = {};\n\n        this.syncUniforms = null;\n    }\n\n    /**\n     * Extracts the data for a buy creating a small test program\n     * or reading the src directly.\n     * @protected\n     *\n     * @param {string} [vertexSrc] - The source of the vertex shader.\n     * @param {string} [fragmentSrc] - The source of the fragment shader.\n     */\n    extractData(vertexSrc, fragmentSrc)\n    {\n        const gl = getTestContext();\n\n        if (gl)\n        {\n            const program = compileProgram(gl, vertexSrc, fragmentSrc);\n\n            this.attributeData = this.getAttributeData(program, gl);\n            this.uniformData = this.getUniformData(program, gl);\n\n            gl.deleteProgram(program);\n        }\n        else\n        {\n            this.uniformData = {};\n            this.attributeData = {};\n        }\n    }\n\n    /**\n     * returns the attribute data from the program\n     * @private\n     *\n     * @param {WebGLProgram} [program] - the WebGL program\n     * @param {WebGLRenderingContext} [gl] - the WebGL context\n     *\n     * @returns {object} the attribute data for this program\n     */\n    getAttributeData(program, gl)\n    {\n        const attributes = {};\n        const attributesArray = [];\n\n        const totalAttributes = gl.getProgramParameter(program, gl.ACTIVE_ATTRIBUTES);\n\n        for (let i = 0; i < totalAttributes; i++)\n        {\n            const attribData = gl.getActiveAttrib(program, i);\n            const type = mapType(gl, attribData.type);\n\n            /*eslint-disable */\n            const data = {\n                type: type,\n                name: attribData.name,\n                size: mapSize(type),\n                location: 0,\n            };\n            /* eslint-enable */\n\n            attributes[attribData.name] = data;\n            attributesArray.push(data);\n        }\n\n        attributesArray.sort((a, b) => (a.name > b.name) ? 1 : -1); // eslint-disable-line no-confusing-arrow\n\n        for (let i = 0; i < attributesArray.length; i++)\n        {\n            attributesArray[i].location = i;\n        }\n\n        return attributes;\n    }\n\n    /**\n     * returns the uniform data from the program\n     * @private\n     *\n     * @param {webGL-program} [program] - the webgl program\n     * @param {context} [gl] - the WebGL context\n     *\n     * @returns {object} the uniform data for this program\n     */\n    getUniformData(program, gl)\n    {\n        const uniforms = {};\n\n        const totalUniforms = gl.getProgramParameter(program, gl.ACTIVE_UNIFORMS);\n\n        // TODO expose this as a prop?\n        // const maskRegex = new RegExp('^(projectionMatrix|uSampler|translationMatrix)$');\n        // const maskRegex = new RegExp('^(projectionMatrix|uSampler|translationMatrix)$');\n\n        for (let i = 0; i < totalUniforms; i++)\n        {\n            const uniformData = gl.getActiveUniform(program, i);\n            const name = uniformData.name.replace(/\\[.*?\\]/, '');\n\n            const isArray = uniformData.name.match(/\\[.*?\\]/, '');\n            const type = mapType(gl, uniformData.type);\n\n            /*eslint-disable */\n            uniforms[name] = {\n                type: type,\n                size: uniformData.size,\n                isArray:isArray,\n                value: defaultValue(type, uniformData.size),\n            };\n            /* eslint-enable */\n        }\n\n        return uniforms;\n    }\n\n    /**\n     * The default vertex shader source\n     *\n     * @static\n     * @constant\n     * @member {string}\n     */\n    static get defaultVertexSrc()\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source\n     *\n     * @static\n     * @constant\n     * @member {string}\n     */\n    static get defaultFragmentSrc()\n    {\n        return defaultFragment;\n    }\n\n    /**\n     * A short hand function to create a program based of a vertex and fragment shader\n     * this method will also check to see if there is a cached program.\n     *\n     * @param {string} [vertexSrc] - The source of the vertex shader.\n     * @param {string} [fragmentSrc] - The source of the fragment shader.\n     * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.\n     *\n     * @returns {PIXI.Program} an shiny new Pixi shader!\n     */\n    static from(vertexSrc, fragmentSrc, name)\n    {\n        const key = vertexSrc + fragmentSrc;\n\n        let program = ProgramCache[key];\n\n        if (!program)\n        {\n            ProgramCache[key] = program = new Program(vertexSrc, fragmentSrc, name);\n        }\n\n        return program;\n    }\n}\n","import Program from './Program';\nimport UniformGroup from './UniformGroup';\n\n/**\n * A helper class for shaders\n *\n * @class\n * @memberof PIXI\n */\nclass Shader\n{\n    /**\n     * @param {PIXI.Program} [program] - The program the shader will use.\n     * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(program, uniforms)\n    {\n        /**\n         * Program that the shader uses\n         *\n         * @member {PIXI.Program}\n         */\n        this.program = program;\n\n        // lets see whats been passed in\n        // uniforms should be converted to a uniform group\n        if (uniforms)\n        {\n            if (uniforms instanceof UniformGroup)\n            {\n                this.uniformGroup = uniforms;\n            }\n            else\n            {\n                this.uniformGroup = new UniformGroup(uniforms);\n            }\n        }\n        else\n        {\n            this.uniformGroup = new UniformGroup({});\n        }\n\n        // time to build some getters and setters!\n        // I guess down the line this could sort of generate an instruction list rather than use dirty ids?\n        // does the trick for now though!\n        for (const i in program.uniformData)\n        {\n            if (this.uniformGroup.uniforms[i] instanceof Array)\n            {\n                this.uniformGroup.uniforms[i] = new Float32Array(this.uniformGroup.uniforms[i]);\n            }\n        }\n    }\n\n    // TODO move to shader system..\n    checkUniformExists(name, group)\n    {\n        if (group.uniforms[name])\n        {\n            return true;\n        }\n\n        for (const i in group.uniforms)\n        {\n            const uniform = group.uniforms[i];\n\n            if (uniform.group)\n            {\n                if (this.checkUniformExists(name, uniform))\n                {\n                    return true;\n                }\n            }\n        }\n\n        return false;\n    }\n\n    destroy()\n    {\n        // usage count on programs?\n        // remove if not used!\n        this.uniformGroup = null;\n    }\n\n    /**\n     * Shader uniform values, shortcut for `uniformGroup.uniforms`\n     * @readonly\n     * @member {object}\n     */\n    get uniforms()\n    {\n        return this.uniformGroup.uniforms;\n    }\n\n    /**\n     * A short hand function to create a shader based of a vertex and fragment shader\n     *\n     * @param {string} [vertexSrc] - The source of the vertex shader.\n     * @param {string} [fragmentSrc] - The source of the fragment shader.\n     * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.\n     *\n     * @returns {PIXI.Shader} an shiny new Pixi shader!\n     */\n    static from(vertexSrc, fragmentSrc, uniforms)\n    {\n        const program = Program.from(vertexSrc, fragmentSrc);\n\n        return new Shader(program, uniforms);\n    }\n}\n\nexport default Shader;\n","import { BLEND_MODES } from '@pixi/constants';\n\n/* eslint-disable max-len */\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\n\n/**\n * This is a WebGL state, and is is passed The WebGL StateManager.\n *\n * Each mesh rendered may require WebGL to be in a different state.\n * For example you may want different blend mode or to enable polygon offsets\n *\n * @class\n * @memberof PIXI\n */\nexport default class State\n{\n    constructor()\n    {\n        this.data = 0;\n\n        this.blendMode = BLEND_MODES.NORMAL;\n        this.polygonOffset = 0;\n\n        this.blend = true;\n        //  this.depthTest = true;\n    }\n\n    /**\n     * Activates blending of the computed fragment color values\n     *\n     * @member {boolean}\n     */\n    get blend()\n    {\n        return !!(this.data & (1 << BLEND));\n    }\n\n    set blend(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << BLEND)) !== value)\n        {\n            this.data ^= (1 << BLEND);\n        }\n    }\n\n    /**\n     * Activates adding an offset to depth values of polygon's fragments\n     *\n     * @member {boolean}\n     * @default false\n     */\n    get offsets()\n    {\n        return !!(this.data & (1 << OFFSET));\n    }\n\n    set offsets(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << OFFSET)) !== value)\n        {\n            this.data ^= (1 << OFFSET);\n        }\n    }\n\n    /**\n     * Activates culling of polygons.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    get culling()\n    {\n        return !!(this.data & (1 << CULLING));\n    }\n\n    set culling(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << CULLING)) !== value)\n        {\n            this.data ^= (1 << CULLING);\n        }\n    }\n\n    /**\n     * Activates depth comparisons and updates to the depth buffer.\n     *\n     * @member {boolean}\n     * @default false\n     */\n    get depthTest()\n    {\n        return !!(this.data & (1 << DEPTH_TEST));\n    }\n\n    set depthTest(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << DEPTH_TEST)) !== value)\n        {\n            this.data ^= (1 << DEPTH_TEST);\n        }\n    }\n\n    /**\n     * Specifies whether or not front or back-facing polygons can be culled.\n     * @member {boolean}\n     * @default false\n     */\n    get clockwiseFrontFace()\n    {\n        return !!(this.data & (1 << WINDING));\n    }\n\n    set clockwiseFrontFace(value) // eslint-disable-line require-jsdoc\n    {\n        if (!!(this.data & (1 << WINDING)) !== value)\n        {\n            this.data ^= (1 << WINDING);\n        }\n    }\n\n    /**\n     * The blend mode to be applied when this state is set. Apply a value of `PIXI.BLEND_MODES.NORMAL` to reset the blend mode.\n     * Setting this mode to anything other than NO_BLEND will automatically switch blending on.\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     * @see PIXI.BLEND_MODES\n     */\n    get blendMode()\n    {\n        return this._blendMode;\n    }\n\n    set blendMode(value) // eslint-disable-line require-jsdoc\n    {\n        this.blend = (value !== BLEND_MODES.NONE);\n        this._blendMode = value;\n    }\n\n    /**\n     * The polygon offset. Setting this property to anything other than 0 will automatically enable polygon offset fill.\n     *\n     * @member {number}\n     * @default 0\n     */\n    get polygonOffset()\n    {\n        return this._polygonOffset;\n    }\n\n    set polygonOffset(value) // eslint-disable-line require-jsdoc\n    {\n        this.offsets = !!value;\n        this._polygonOffset = value;\n    }\n\n    static for2d()\n    {\n        const state = new State();\n\n        state.depthTest = false;\n        state.blend = true;\n\n        return state;\n    }\n}\n\n","import Shader from '../shader/Shader';\nimport Program from '../shader/Program';\nimport State from '../state/State';\nimport { settings } from '@pixi/settings';\nimport defaultVertex from './defaultFilter.vert';\nimport defaultFragment from './defaultFilter.frag';\n\n/**\n * Filter is a special type of WebGL shader that is applied to the screen.\n *\n * {@link http://pixijs.io/examples/#/filters/blur-filter.js Example} of the\n * {@link PIXI.filters.BlurFilter BlurFilter}.\n *\n * ### Usage\n * Filters can be applied to any DisplayObject or Container.\n * PixiJS' `FilterSystem` renders the container into temporary Framebuffer,\n * then filter renders it to the screen.\n * Multiple filters can be added to the `filters` array property and stacked on each other.\n *\n * ```\n * const filter = new PIXI.Filter(myShaderVert, myShaderFrag, { myUniform: 0.5 });\n * const container = new PIXI.Container();\n * container.filters = [filter];\n * ```\n *\n * ### Previous Version Differences\n *\n * In PixiJS **v3**, a filter was always applied to _whole screen_.\n *\n * In PixiJS **v4**, a filter can be applied _only part of the screen_.\n * Developers had to create a set of uniforms to deal with coordinates.\n *\n * In PixiJS **v5** combines _both approaches_.\n * Developers can use normal coordinates of v3 and then allow filter to use partial Framebuffers,\n * bringing those extra uniforms into account.\n *\n * Also be aware that we have changed default vertex shader, please consult\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n *\n * ### Built-in Uniforms\n *\n * PixiJS viewport uses screen (CSS) coordinates, `(0, 0, renderer.screen.width, renderer.screen.height)`,\n * and `projectionMatrix` uniform maps it to the gl viewport.\n *\n * **uSampler**\n *\n * The most important uniform is the input texture that container was rendered into.\n * _Important note: as with all Framebuffers in PixiJS, both input and output are\n * premultiplied by alpha._\n *\n * By default, input normalized coordinates are passed to fragment shader with `vTextureCoord`.\n * Use it to sample the input.\n *\n * ```\n * const fragment = `\n * varying vec2 vTextureCoord;\n * uniform sampler2D uSampler;\n * void main(void)\n * {\n *    gl_FragColor = texture2D(uSampler, vTextureCoord);\n * }\n * `;\n *\n * const myFilter = new PIXI.Filter(null, fragment);\n * ```\n *\n * This filter is just one uniform less than {@link PIXI.filters.AlphaFilter AlphaFilter}.\n *\n * **outputFrame**\n *\n * The `outputFrame` holds the rectangle where filter is applied in screen (CSS) coordinates.\n * It's the same as `renderer.screen` for a fullscreen filter.\n * Only a part of  `outputFrame.zw` size of temporary Framebuffer is used,\n * `(0, 0, outputFrame.width, outputFrame.height)`,\n *\n * Filters uses this quad to normalized (0-1) space, its passed into `aVertexPosition` attribute.\n * To calculate vertex position in screen space using normalized (0-1) space:\n *\n * ```\n * vec4 filterVertexPosition( void )\n * {\n *     vec2 position = aVertexPosition * max(outputFrame.zw, vec2(0.)) + outputFrame.xy;\n *     return vec4((projectionMatrix * vec3(position, 1.0)).xy, 0.0, 1.0);\n * }\n * ```\n *\n * **inputSize**\n *\n * Temporary framebuffer is different, it can be either the size of screen, either power-of-two.\n * The `inputSize.xy` are size of temporary framebuffer that holds input.\n * The `inputSize.zw` is inverted, it's a shortcut to evade division inside the shader.\n *\n * Set `inputSize.xy = outputFrame.zw` for a fullscreen filter.\n *\n * To calculate input normalized coordinate, you have to map it to filter normalized space.\n * Multiply by `outputFrame.zw` to get input coordinate.\n * Divide by `inputSize.xy` to get input normalized coordinate.\n *\n * ```\n * vec2 filterTextureCoord( void )\n * {\n *     return aVertexPosition * (outputFrame.zw * inputSize.zw); // same as /inputSize.xy\n * }\n * ```\n * **resolution**\n *\n * The `resolution` is the ratio of screen (CSS) pixels to real pixels.\n *\n * **inputPixel**\n *\n * `inputPixel.xy` is the size of framebuffer in real pixels, same as `inputSize.xy * resolution`\n * `inputPixel.zw` is inverted `inputPixel.xy`.\n *\n * It's handy for filters that use neighbour pixels, like {@link PIXI.filters.FXAAFilter FXAAFilter}.\n *\n * **inputClamp**\n *\n * If you try to get info from outside of used part of Framebuffer - you'll get undefined behaviour.\n * For displacements, coordinates has to be clamped.\n *\n * The `inputClamp.xy` is left-top pixel center, you may ignore it, because we use left-top part of Framebuffer\n * `inputClamp.zw` is bottom-right pixel center.\n *\n * ```\n * vec4 color = texture2D(uSampler, clamp(modifigedTextureCoord, inputClamp.xy, inputClamp.zw))\n * ```\n * OR\n * ```\n * vec4 color = texture2D(uSampler, min(modifigedTextureCoord, inputClamp.zw))\n * ```\n *\n * ### Additional Information\n *\n * Complete documentation on Filter usage is located in the\n * {@link https://github.com/pixijs/pixi.js/wiki/v5-Creating-filters Wiki}.\n *\n * Since PixiJS only had a handful of built-in filters, additional filters can be downloaded\n * {@link https://github.com/pixijs/pixi-filters here} from the PixiJS Filters repository.\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.Shader\n */\nexport default class Filter extends Shader\n{\n    /**\n     * @param {string} [vertexSrc] - The source of the vertex shader.\n     * @param {string} [fragmentSrc] - The source of the fragment shader.\n     * @param {object} [uniforms] - Custom uniforms to use to augment the built-in ones.\n     */\n    constructor(vertexSrc, fragmentSrc, uniforms)\n    {\n        const program = Program.from(vertexSrc || Filter.defaultVertexSrc,\n            fragmentSrc || Filter.defaultFragmentSrc);\n\n        super(program, uniforms);\n\n        /**\n         * The padding of the filter. Some filters require extra space to breath such as a blur.\n         * Increasing this will add extra width and height to the bounds of the object that the\n         * filter is applied to.\n         *\n         * @member {number}\n         */\n        this.padding = 0;\n\n        /**\n         * The resolution of the filter. Setting this to be lower will lower the quality but\n         * increase the performance of the filter.\n         *\n         * @member {number}\n         */\n        this.resolution = settings.FILTER_RESOLUTION;\n\n        /**\n         * If enabled is true the filter is applied, if false it will not.\n         *\n         * @member {boolean}\n         */\n        this.enabled = true;\n\n        /**\n         * If enabled, PixiJS will fit the filter area into boundaries for better performance.\n         * Switch it off if it does not work for specific shader.\n         *\n         * @member {boolean}\n         */\n        this.autoFit = true;\n\n        /**\n         * Legacy filters use position and uvs from attributes\n         * @member {boolean}\n         * @readonly\n         */\n        this.legacy = !!this.program.attributeData.aTextureCoord;\n\n        /**\n         * The WebGL state the filter requires to render\n         * @member {PIXI.State}\n         */\n        this.state = new State();\n    }\n\n    /**\n     * Applies the filter\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from\n     * @param {PIXI.RenderTexture} input - The input render target.\n     * @param {PIXI.RenderTexture} output - The target to output to.\n     * @param {boolean} clear - Should the output be cleared before rendering to it\n     * @param {object} [currentState] - It's current state of filter.\n     *        There are some useful properties in the currentState :\n     *        target, filters, sourceFrame, destinationFrame, renderTarget, resolution\n     */\n    apply(filterManager, input, output, clear, currentState)\n    {\n        // do as you please!\n\n        filterManager.applyFilter(this, input, output, clear, currentState);\n\n        // or just do a regular render..\n    }\n\n    /**\n     * Sets the blendmode of the filter\n     *\n     * @member {number}\n     * @default PIXI.BLEND_MODES.NORMAL\n     */\n    get blendMode()\n    {\n        return this.state.blendMode;\n    }\n\n    set blendMode(value) // eslint-disable-line require-jsdoc\n    {\n        this.state.blendMode = value;\n    }\n\n    /**\n     * The default vertex shader source\n     *\n     * @static\n     * @type {string}\n     * @constant\n     */\n    static get defaultVertexSrc()\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source\n     *\n     * @static\n     * @type {string}\n     * @constant\n     */\n    static get defaultFragmentSrc()\n    {\n        return defaultFragment;\n    }\n}\n\n/**\n * Used for caching shader IDs\n *\n * @static\n * @type {object}\n * @protected\n */\nFilter.SOURCE_KEY_MAP = {};\n\n","import { Matrix } from '@pixi/math';\n\nconst tempMat = new Matrix();\n\n/**\n * Class controls uv mapping from Texture normal space to BaseTexture normal space.\n *\n * Takes `trim` and `rotate` into account. May contain clamp settings for Meshes and TilingSprite.\n *\n * Can be used in Texture `uvMatrix` field, or separately, you can use different clamp settings on the same texture.\n * If you want to add support for texture region of certain feature or filter, that's what you're looking for.\n *\n * Takes track of Texture changes through `_lastTextureID` private field.\n * Use `update()` method call to track it from outside.\n *\n * @see PIXI.Texture\n * @see PIXI.Mesh\n * @see PIXI.TilingSprite\n * @class\n * @memberof PIXI\n */\nexport default class TextureMatrix\n{\n    /**\n     *\n     * @param {PIXI.Texture} texture observed texture\n     * @param {number} [clampMargin] Changes frame clamping, 0.5 by default. Use -0.5 for extra border.\n     * @constructor\n     */\n    constructor(texture, clampMargin)\n    {\n        this._texture = texture;\n\n        /**\n         * Matrix operation that converts texture region coords to texture coords\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        this.mapCoord = new Matrix();\n\n        /**\n         * Clamp region for normalized coords, left-top pixel center in xy , bottom-right in zw.\n         * Calculated based on clampOffset.\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.uClampFrame = new Float32Array(4);\n\n        /**\n         * Normalized clamp offset.\n         * Calculated based on clampOffset.\n         * @member {Float32Array}\n         * @readonly\n         */\n        this.uClampOffset = new Float32Array(2);\n\n        /**\n         * Tracks Texture frame changes\n         * @member {number}\n         * @protected\n         */\n        this._updateID = -1;\n\n        /**\n         * Changes frame clamping\n         * Works with TilingSprite and Mesh\n         * Change to 1.5 if you texture has repeated right and bottom lines, that leads to smoother borders\n         *\n         * @default 0\n         * @member {number}\n         */\n        this.clampOffset = 0;\n\n        /**\n         * Changes frame clamping\n         * Works with TilingSprite and Mesh\n         * Change to -0.5 to add a pixel to the edge, recommended for transparent trimmed textures in atlas\n         *\n         * @default 0.5\n         * @member {number}\n         */\n        this.clampMargin = (typeof clampMargin === 'undefined') ? 0.5 : clampMargin;\n\n        /**\n         * If texture size is the same as baseTexture\n         * @member {boolean}\n         * @default false\n         * @readonly\n         */\n        this.isSimple = false;\n    }\n\n    /**\n     * texture property\n     * @member {PIXI.Texture}\n     */\n    get texture()\n    {\n        return this._texture;\n    }\n\n    set texture(value) // eslint-disable-line require-jsdoc\n    {\n        this._texture = value;\n        this._updateID = -1;\n    }\n\n    /**\n     * Multiplies uvs array to transform\n     * @param {Float32Array} uvs mesh uvs\n     * @param {Float32Array} [out=uvs] output\n     * @returns {Float32Array} output\n     */\n    multiplyUvs(uvs, out)\n    {\n        if (out === undefined)\n        {\n            out = uvs;\n        }\n\n        const mat = this.mapCoord;\n\n        for (let i = 0; i < uvs.length; i += 2)\n        {\n            const x = uvs[i];\n            const y = uvs[i + 1];\n\n            out[i] = (x * mat.a) + (y * mat.c) + mat.tx;\n            out[i + 1] = (x * mat.b) + (y * mat.d) + mat.ty;\n        }\n\n        return out;\n    }\n\n    /**\n     * updates matrices if texture was changed\n     * @param {boolean} [forceUpdate=false] if true, matrices will be updated any case\n     * @returns {boolean} whether or not it was updated\n     */\n    update(forceUpdate)\n    {\n        const tex = this._texture;\n\n        if (!tex || !tex.valid)\n        {\n            return false;\n        }\n\n        if (!forceUpdate\n            && this._updateID === tex._updateID)\n        {\n            return false;\n        }\n\n        this._updateID = tex._updateID;\n\n        const uvs = tex._uvs;\n\n        this.mapCoord.set(uvs.x1 - uvs.x0, uvs.y1 - uvs.y0, uvs.x3 - uvs.x0, uvs.y3 - uvs.y0, uvs.x0, uvs.y0);\n\n        const orig = tex.orig;\n        const trim = tex.trim;\n\n        if (trim)\n        {\n            tempMat.set(orig.width / trim.width, 0, 0, orig.height / trim.height,\n                -trim.x / trim.width, -trim.y / trim.height);\n            this.mapCoord.append(tempMat);\n        }\n\n        const texBase = tex.baseTexture;\n        const frame = this.uClampFrame;\n        const margin = this.clampMargin / texBase.resolution;\n        const offset = this.clampOffset;\n\n        frame[0] = (tex._frame.x + margin + offset) / texBase.width;\n        frame[1] = (tex._frame.y + margin + offset) / texBase.height;\n        frame[2] = (tex._frame.x + tex._frame.width - margin + offset) / texBase.width;\n        frame[3] = (tex._frame.y + tex._frame.height - margin + offset) / texBase.height;\n        this.uClampOffset[0] = offset / texBase.realWidth;\n        this.uClampOffset[1] = offset / texBase.realHeight;\n\n        this.isSimple = tex._frame.width === texBase.width\n            && tex._frame.height === texBase.height\n            && tex.rotate === 0;\n\n        return true;\n    }\n}\n","import Filter from '../Filter';\nimport { Matrix } from '@pixi/math';\nimport vertex from './spriteMaskFilter.vert';\nimport fragment from './spriteMaskFilter.frag';\nimport { default as TextureMatrix } from '../../textures/TextureMatrix';\n\n/**\n * This handles a Sprite acting as a mask, as opposed to a Graphic.\n *\n * WebGL only.\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI\n */\nexport default class SpriteMaskFilter extends Filter\n{\n    /**\n     * @param {PIXI.Sprite} sprite - the target sprite\n     */\n    constructor(sprite)\n    {\n        const maskMatrix = new Matrix();\n\n        super(vertex, fragment);\n\n        sprite.renderable = false;\n\n        /**\n         * Sprite mask\n         * @member {PIXI.Sprite}\n         */\n        this.maskSprite = sprite;\n\n        /**\n         * Mask matrix\n         * @member {PIXI.Matrix}\n         */\n        this.maskMatrix = maskMatrix;\n    }\n\n    /**\n     * Applies the filter\n     *\n     * @param {PIXI.systems.FilterSystem} filterManager - The renderer to retrieve the filter from\n     * @param {PIXI.RenderTexture} input - The input render target.\n     * @param {PIXI.RenderTexture} output - The target to output to.\n     * @param {boolean} clear - Should the output be cleared before rendering to it.\n     */\n    apply(filterManager, input, output, clear)\n    {\n        const maskSprite = this.maskSprite;\n        const tex = this.maskSprite.texture;\n\n        if (!tex.valid)\n        {\n            return;\n        }\n        if (!tex.transform)\n        {\n            // margin = 0.0, let it bleed a bit, shader code becomes easier\n            // assuming that atlas textures were made with 1-pixel padding\n            tex.transform = new TextureMatrix(tex, 0.0);\n        }\n        tex.transform.update();\n\n        this.uniforms.npmAlpha = tex.baseTexture.premultiplyAlpha ? 0.0 : 1.0;\n        this.uniforms.mask = tex;\n        // get _normalized sprite texture coords_ and convert them to _normalized atlas texture coords_ with `prepend`\n        this.uniforms.otherMatrix = filterManager.calculateSpriteMatrix(this.maskMatrix, maskSprite)\n            .prepend(tex.transform.mapCoord);\n        this.uniforms.alpha = maskSprite.worldAlpha;\n        this.uniforms.maskClamp = tex.transform.uClampFrame;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n}\n","import System from '../System';\nimport SpriteMaskFilter from '../filters/spriteMask/SpriteMaskFilter';\n\n/**\n * System plugin to the renderer to manage masks.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\nexport default class MaskSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        // TODO - we don't need both!\n        /**\n         * `true` if current pushed masked is scissor\n         * @member {boolean}\n         * @readonly\n         */\n        this.scissor = false;\n\n        /**\n         * Mask data\n         * @member {PIXI.Graphics}\n         * @readonly\n         */\n        this.scissorData = null;\n\n        /**\n         * Target to mask\n         * @member {PIXI.DisplayObject}\n         * @readonly\n         */\n        this.scissorRenderTarget = null;\n\n        /**\n         * Enable scissor\n         * @member {boolean}\n         * @readonly\n         */\n        this.enableScissor = false;\n\n        /**\n         * Pool of used sprite mask filters\n         * @member {PIXI.SpriteMaskFilter[]}\n         * @readonly\n         */\n        this.alphaMaskPool = [];\n\n        /**\n         * Current index of alpha mask pool\n         * @member {number}\n         * @default 0\n         * @readonly\n         */\n        this.alphaMaskIndex = 0;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    push(target, maskData)\n    {\n        // TODO the root check means scissor rect will not\n        // be used on render textures more info here:\n        // https://github.com/pixijs/pixi.js/pull/3545\n\n        if (maskData.isSprite)\n        {\n            this.pushSpriteMask(target, maskData);\n        }\n        else if (this.enableScissor\n            && !this.scissor\n            && this.renderer._activeRenderTarget.root\n            && !this.renderer.stencil.stencilMaskStack.length\n            && maskData.isFastRect())\n        {\n            const matrix = maskData.worldTransform;\n\n            let rot = Math.atan2(matrix.b, matrix.a);\n\n            // use the nearest degree!\n            rot = Math.round(rot * (180 / Math.PI));\n\n            if (rot % 90)\n            {\n                this.pushStencilMask(maskData);\n            }\n            else\n            {\n                this.pushScissorMask(target, maskData);\n            }\n        }\n        else\n        {\n            this.pushStencilMask(maskData);\n        }\n    }\n\n    /**\n     * Removes the last mask from the mask stack and doesn't return it.\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to pop the mask from\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    pop(target, maskData)\n    {\n        if (maskData.isSprite)\n        {\n            this.popSpriteMask(target, maskData);\n        }\n        else if (this.enableScissor && !this.renderer.stencil.stencilMaskStack.length)\n        {\n            this.popScissorMask(target, maskData);\n        }\n        else\n        {\n            this.popStencilMask(target, maskData);\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.RenderTexture} target - Display Object to push the sprite mask to\n     * @param {PIXI.Sprite} maskData - Sprite to be used as the mask\n     */\n    pushSpriteMask(target, maskData)\n    {\n        let alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex];\n\n        if (!alphaMaskFilter)\n        {\n            alphaMaskFilter = this.alphaMaskPool[this.alphaMaskIndex] = [new SpriteMaskFilter(maskData)];\n        }\n\n        alphaMaskFilter[0].resolution = this.renderer.resolution;\n        alphaMaskFilter[0].maskSprite = maskData;\n\n        const stashFilterArea = target.filterArea;\n\n        target.filterArea = maskData.getBounds(true);\n        this.renderer.filter.push(target, alphaMaskFilter);\n        target.filterArea = stashFilterArea;\n\n        this.alphaMaskIndex++;\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     */\n    popSpriteMask()\n    {\n        this.renderer.filter.pop();\n        this.alphaMaskIndex--;\n    }\n\n    /**\n     * Applies the Mask and adds it to the current filter stack.\n     *\n     * @param {PIXI.Sprite|PIXI.Graphics} maskData - The masking data.\n     */\n    pushStencilMask(maskData)\n    {\n        this.renderer.batch.flush();\n        this.renderer.stencil.pushStencil(maskData);\n    }\n\n    /**\n     * Removes the last filter from the filter stack and doesn't return it.\n     *\n     */\n    popStencilMask()\n    {\n        // this.renderer.currentRenderer.stop();\n        this.renderer.stencil.popStencil();\n    }\n\n    /**\n     *\n     * @param {PIXI.DisplayObject} target - Display Object to push the mask to\n     * @param {PIXI.Graphics} maskData - The masking data.\n     */\n    pushScissorMask(target, maskData)\n    {\n        maskData.renderable = true;\n\n        const renderTarget = this.renderer._activeRenderTarget;\n\n        const bounds = maskData.getBounds();\n\n        bounds.fit(renderTarget.size);\n        maskData.renderable = false;\n\n        this.renderer.gl.enable(this.renderer.gl.SCISSOR_TEST);\n\n        const resolution = this.renderer.resolution;\n\n        this.renderer.gl.scissor(\n            bounds.x * resolution,\n            (renderTarget.root ? renderTarget.size.height - bounds.y - bounds.height : bounds.y) * resolution,\n            bounds.width * resolution,\n            bounds.height * resolution\n        );\n\n        this.scissorRenderTarget = renderTarget;\n        this.scissorData = maskData;\n        this.scissor = true;\n    }\n\n    /**\n     * Pop scissor mask\n     *\n     */\n    popScissorMask()\n    {\n        this.scissorRenderTarget = null;\n        this.scissorData = null;\n        this.scissor = false;\n\n        // must be scissor!\n        const { gl } = this.renderer;\n\n        gl.disable(gl.SCISSOR_TEST);\n    }\n}\n","import System from '../System';\n\n/**\n * System plugin to the renderer to manage stencils (used for masks).\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\nexport default class StencilSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * The mask stack\n         * @member {PIXI.Graphics[]}\n         */\n        this.stencilMaskStack = [];\n    }\n\n    /**\n     * Changes the mask stack that is used by this System.\n     *\n     * @param {PIXI.Graphics[]} stencilMaskStack - The mask stack\n     */\n    setMaskStack(stencilMaskStack)\n    {\n        const gl = this.renderer.gl;\n        const curStackLen = this.stencilMaskStack.length;\n\n        this.stencilMaskStack = stencilMaskStack;\n        if (stencilMaskStack.length !== curStackLen)\n        {\n            if (stencilMaskStack.length === 0)\n            {\n                gl.disable(gl.STENCIL_TEST);\n            }\n            else\n            {\n                gl.enable(gl.STENCIL_TEST);\n                this._useCurrent();\n            }\n        }\n    }\n\n    /**\n     * Applies the Mask and adds it to the current stencil stack. @alvin\n     *\n     * @param {PIXI.Graphics} graphics - The mask\n     */\n    pushStencil(graphics)\n    {\n        const gl = this.renderer.gl;\n        const prevMaskCount = this.stencilMaskStack.length;\n\n        if (prevMaskCount === 0)\n        {\n            // force use stencil texture in current framebuffer\n            this.renderer.framebuffer.forceStencil();\n            gl.enable(gl.STENCIL_TEST);\n        }\n\n        this.stencilMaskStack.push(graphics);\n\n        // Increment the reference stencil value where the new mask overlaps with the old ones.\n        gl.colorMask(false, false, false, false);\n        gl.stencilFunc(gl.EQUAL, prevMaskCount, this._getBitwiseMask());\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.INCR);\n\n        graphics.renderable = true;\n        graphics.render(this.renderer);\n        this.renderer.batch.flush();\n        graphics.renderable = false;\n\n        this._useCurrent();\n    }\n\n    /**\n     * Removes the last mask from the stencil stack. @alvin\n     */\n    popStencil()\n    {\n        const gl = this.renderer.gl;\n        const graphics = this.stencilMaskStack.pop();\n\n        if (this.stencilMaskStack.length === 0)\n        {\n            // the stack is empty!\n            gl.disable(gl.STENCIL_TEST);\n            gl.clear(gl.STENCIL_BUFFER_BIT);\n            gl.clearStencil(0);\n        }\n        else\n        {\n            // Decrement the reference stencil value where the popped mask overlaps with the other ones\n            gl.colorMask(false, false, false, false);\n            gl.stencilOp(gl.KEEP, gl.KEEP, gl.DECR);\n\n            graphics.renderable = true;\n            graphics.render(this.renderer);\n            this.renderer.batch.flush();\n            graphics.renderable = false;\n\n            this._useCurrent();\n        }\n    }\n\n    /**\n     * Setup renderer to use the current stencil data.\n     * @private\n     */\n    _useCurrent()\n    {\n        const gl = this.renderer.gl;\n\n        gl.colorMask(true, true, true, true);\n        gl.stencilFunc(gl.EQUAL, this.stencilMaskStack.length, this._getBitwiseMask());\n        gl.stencilOp(gl.KEEP, gl.KEEP, gl.KEEP);\n    }\n\n    /**\n     * Fill 1s equal to the number of acitve stencil masks.\n     * @private\n     * @return {number} The bitwise mask.\n     */\n    _getBitwiseMask()\n    {\n        return (1 << this.stencilMaskStack.length) - 1;\n    }\n\n    /**\n     * Destroys the mask stack.\n     *\n     */\n    destroy()\n    {\n        super.destroy(this);\n\n        this.stencilMaskStack = null;\n    }\n}\n","import System from '../System';\nimport { Matrix } from '@pixi/math';\n\n/**\n * System plugin to the renderer to manage the projection matrix.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\n\nexport default class ProjectionSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * Destination frame\n         * @member {PIXI.Rectangle}\n         * @readonly\n         */\n        this.destinationFrame = null;\n\n        /**\n         * Source frame\n         * @member {PIXI.Rectangle}\n         * @readonly\n         */\n        this.sourceFrame = null;\n\n        /**\n         * Default destination frame\n         * @member {PIXI.Rectangle}\n         * @readonly\n         */\n        this.defaultFrame = null;\n\n        /**\n         * Project matrix\n         * @member {PIXI.Matrix}\n         * @readonly\n         */\n        this.projectionMatrix = new Matrix();\n\n        /**\n         * A transform that will be appended to the projection matrix\n         * if null, nothing will be applied\n         * @member {PIXI.Matrix}\n         */\n        this.transform = null;\n    }\n\n    /**\n     * Updates the projection matrix based on a projection frame (which is a rectangle)\n     *\n     * @param {PIXI.Rectangle} destinationFrame - The destination frame.\n     * @param {PIXI.Rectangle} sourceFrame - The source frame.\n     * @param {Number} resolution - Resolution\n     * @param {boolean} root - If is root\n     */\n    update(destinationFrame, sourceFrame, resolution, root)\n    {\n        this.destinationFrame = destinationFrame || this.destinationFrame || this.defaultFrame;\n        this.sourceFrame = sourceFrame || this.sourceFrame || destinationFrame;\n\n        this.calculateProjection(this.destinationFrame, this.sourceFrame, resolution, root);\n\n        if (this.transform)\n        {\n            this.projectionMatrix.append(this.transform);\n        }\n\n        const renderer =  this.renderer;\n\n        renderer.globalUniforms.uniforms.projectionMatrix = this.projectionMatrix;\n        renderer.globalUniforms.update();\n\n        // this will work for now\n        // but would be sweet to stick and even on the global uniforms..\n        if (renderer.shader.shader)\n        {\n            renderer.shader.syncUniformGroup(renderer.shader.shader.uniforms.globals);\n        }\n    }\n\n    /**\n     * Updates the projection matrix based on a projection frame (which is a rectangle)\n     *\n     * @param {PIXI.Rectangle} destinationFrame - The destination frame.\n     * @param {PIXI.Rectangle} sourceFrame - The source frame.\n     * @param {Number} resolution - Resolution\n     * @param {boolean} root - If is root\n     */\n    calculateProjection(destinationFrame, sourceFrame, resolution, root)\n    {\n        const pm = this.projectionMatrix;\n\n        // I don't think we will need this line..\n        // pm.identity();\n\n        if (!root)\n        {\n            pm.a = (1 / destinationFrame.width * 2) * resolution;\n            pm.d = (1 / destinationFrame.height * 2) * resolution;\n\n            pm.tx = -1 - (sourceFrame.x * pm.a);\n            pm.ty = -1 - (sourceFrame.y * pm.d);\n        }\n        else\n        {\n            pm.a = (1 / destinationFrame.width * 2) * resolution;\n            pm.d = (-1 / destinationFrame.height * 2) * resolution;\n\n            pm.tx = -1 - (sourceFrame.x * pm.a);\n            pm.ty = 1 - (sourceFrame.y * pm.d);\n        }\n    }\n\n    /**\n     * Sets the transform of the active render target to the given matrix\n     *\n     * @param {PIXI.Matrix} matrix - The transformation matrix\n     */\n    setTransform()// matrix)\n    {\n        // this._activeRenderTarget.transform = matrix;\n    }\n}\n","import System from '../System';\nimport { Rectangle } from '@pixi/math';\n\nconst tempRect = new Rectangle();\n\n/**\n * System plugin to the renderer to manage render textures.\n *\n * Should be added after FramebufferSystem\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\n\nexport default class RenderTextureSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * The clear background color as rgba\n         * @member {number[]}\n         */\n        this.clearColor = renderer._backgroundColorRgba;\n\n        // TODO move this property somewhere else!\n        /**\n         * List of masks for the StencilSystem\n         * @member {PIXI.Graphics[]}\n         * @readonly\n         */\n        this.defaultMaskStack = [];\n\n        // empty render texture?\n        /**\n         * Render texture\n         * @member {PIXI.RenderTexture}\n         * @readonly\n         */\n        this.current = null;\n\n        /**\n         * Source frame\n         * @member {PIXI.Rectangle}\n         * @readonly\n         */\n        this.sourceFrame = new Rectangle();\n\n        /**\n         * Destination frame\n         * @member {PIXI.Rectangle}\n         * @readonly\n         */\n        this.destinationFrame = new Rectangle();\n    }\n\n    /**\n     * Bind the current render texture\n     * @param {PIXI.RenderTexture} [renderTexture] - RenderTexture to bind, by default its `null`, the screen\n     * @param {PIXI.Rectangle} [sourceFrame] - part of screen that is mapped to the renderTexture\n     * @param {PIXI.Rectangle} [destinationFrame] - part of renderTexture, by default it has the same size as sourceFrame\n     */\n    bind(renderTexture = null, sourceFrame, destinationFrame)\n    {\n        this.current = renderTexture;\n\n        const renderer = this.renderer;\n\n        let resolution;\n\n        if (renderTexture)\n        {\n            const baseTexture = renderTexture.baseTexture;\n\n            resolution = baseTexture.resolution;\n\n            if (!destinationFrame)\n            {\n                tempRect.width = baseTexture.realWidth;\n                tempRect.height = baseTexture.realHeight;\n\n                destinationFrame = tempRect;\n            }\n\n            if (!sourceFrame)\n            {\n                sourceFrame = destinationFrame;\n            }\n\n            this.renderer.framebuffer.bind(baseTexture.framebuffer, destinationFrame);\n\n            this.renderer.projection.update(destinationFrame, sourceFrame, resolution, false);\n            this.renderer.stencil.setMaskStack(baseTexture.stencilMaskStack);\n        }\n        else\n        {\n            resolution = this.renderer.resolution;\n\n            // TODO these validation checks happen deeper down..\n            // thing they can be avoided..\n            if (!destinationFrame)\n            {\n                tempRect.width = renderer.width;\n                tempRect.height = renderer.height;\n\n                destinationFrame = tempRect;\n            }\n\n            if (!sourceFrame)\n            {\n                sourceFrame = destinationFrame;\n            }\n\n            renderer.framebuffer.bind(null, destinationFrame);\n\n            // TODO store this..\n            this.renderer.projection.update(destinationFrame, sourceFrame, resolution, true);\n            this.renderer.stencil.setMaskStack(this.defaultMaskStack);\n        }\n\n        this.sourceFrame.copyFrom(sourceFrame);\n\n        this.destinationFrame.x = destinationFrame.x / resolution;\n        this.destinationFrame.y = destinationFrame.y / resolution;\n\n        this.destinationFrame.width = destinationFrame.width / resolution;\n        this.destinationFrame.height = destinationFrame.height / resolution;\n\n        if (sourceFrame === destinationFrame)\n        {\n            this.sourceFrame.copyFrom(this.destinationFrame);\n        }\n    }\n\n    /**\n     * Erases the render texture and fills the drawing area with a colour\n     *\n     * @param {number[]} [clearColor] - The color as rgba, default to use the renderer backgroundColor\n     * @return {PIXI.Renderer} Returns itself.\n     */\n    clear(clearColor)\n    {\n        if (this.current)\n        {\n            clearColor = clearColor || this.current.baseTexture.clearColor;\n        }\n        else\n        {\n            clearColor = clearColor || this.clearColor;\n        }\n\n        this.renderer.framebuffer.clear(clearColor[0], clearColor[1], clearColor[2], clearColor[3]);\n    }\n\n    resize()// screenWidth, screenHeight)\n    {\n        // resize the root only!\n        this.bind(null);\n    }\n\n    /**\n     * Resets renderTexture state\n     */\n    reset()\n    {\n        this.bind(null);\n    }\n}\n","/**\n * Helper class to create a WebGL Program\n *\n * @class\n * @memberof PIXI\n */\nexport default class GLProgram\n{\n    /**\n     * Makes a new Pixi program\n     *\n     * @param program {WebGLProgram} webgl program\n     * @param uniformData {Object} uniforms\n     */\n    constructor(program, uniformData)\n    {\n        /**\n         * The shader program\n         *\n         * @member {WebGLProgram}\n         */\n        this.program = program;\n\n        /**\n         * holds the uniform data which contains uniform locations\n         * and current uniform values used for caching and preventing unneeded GPU commands\n         * @member {Object}\n         */\n        this.uniformData = uniformData;\n\n        /**\n         * uniformGroups holds the various upload functions for the shader. Each uniform group\n         * and program have a unique upload function generated.\n         * @member {Object}\n         */\n        this.uniformGroups = {};\n    }\n\n    /**\n     * Destroys this program\n     */\n    destroy()\n    {\n        this.uniformData = null;\n        this.uniformGroups = null;\n        this.program = null;\n    }\n}\n","import System from '../System';\nimport GLProgram from './GLProgram';\nimport { generateUniformsSync,\n    unsafeEvalSupported,\n    defaultValue,\n    compileProgram } from './utils';\n\nlet UID = 0;\n\n/**\n * System plugin to the renderer to manage shaders.\n *\n * @class\n * @memberof PIXI.systems\n * @extends PIXI.System\n */\nexport default class ShaderSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        // Validation check that this environment support `new Function`\n        this.systemCheck();\n\n        /**\n         * The current WebGL rendering context\n         *\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = null;\n\n        this.shader = null;\n        this.program = null;\n\n        /**\n         * Cache to holds the generated functions. Stored against UniformObjects unique signature\n         * @type {Object}\n         * @private\n         */\n        this.cache = {};\n\n        this.id = UID++;\n    }\n\n    /**\n     * Overrideable function by `@pixi/unsafe-eval` to silence\n     * throwing an error if platform doesn't support unsafe-evals.\n     *\n     * @private\n     */\n    systemCheck()\n    {\n        if (!unsafeEvalSupported())\n        {\n            throw new Error('Current environment does not allow unsafe-eval, '\n                + 'please use @pixi/unsafe-eval module to enable support.');\n        }\n    }\n\n    contextChange(gl)\n    {\n        this.gl = gl;\n        this.reset();\n    }\n\n    /**\n     * Changes the current shader to the one given in parameter\n     *\n     * @param {PIXI.Shader} shader - the new shader\n     * @param {boolean} dontSync - false if the shader should automatically sync its uniforms.\n     * @returns {PIXI.GLProgram} the glProgram that belongs to the shader.\n     */\n    bind(shader, dontSync)\n    {\n        shader.uniforms.globals = this.renderer.globalUniforms;\n\n        const program = shader.program;\n        const glProgram = program.glPrograms[this.renderer.CONTEXT_UID] || this.generateShader(shader);\n\n        this.shader = shader;\n\n        // TODO - some current Pixi plugins bypass this.. so it not safe to use yet..\n        if (this.program !== program)\n        {\n            this.program = program;\n            this.gl.useProgram(glProgram.program);\n        }\n\n        if (!dontSync)\n        {\n            this.syncUniformGroup(shader.uniformGroup);\n        }\n\n        return glProgram;\n    }\n\n    /**\n     * Uploads the uniforms values to the currently bound shader.\n     *\n     * @param {object} uniforms - the uniforms values that be applied to the current shader\n     */\n    setUniforms(uniforms)\n    {\n        const shader = this.shader.program;\n        const glProgram = shader.glPrograms[this.renderer.CONTEXT_UID];\n\n        shader.syncUniforms(glProgram.uniformData, uniforms, this.renderer);\n    }\n\n    syncUniformGroup(group)\n    {\n        const glProgram = this.getglProgram();\n\n        if (!group.static || group.dirtyId !== glProgram.uniformGroups[group.id])\n        {\n            glProgram.uniformGroups[group.id] = group.dirtyId;\n\n            this.syncUniforms(group, glProgram);\n        }\n    }\n\n    /**\n     * Overrideable by the @pixi/unsafe-eval package to use static\n     * syncUnforms instead.\n     *\n     * @private\n     */\n    syncUniforms(group, glProgram)\n    {\n        const syncFunc = group.syncUniforms[this.shader.program.id] || this.createSyncGroups(group);\n\n        syncFunc(glProgram.uniformData, group.uniforms, this.renderer);\n    }\n\n    createSyncGroups(group)\n    {\n        const id = this.getSignature(group, this.shader.program.uniformData);\n\n        if (!this.cache[id])\n        {\n            this.cache[id] = generateUniformsSync(group, this.shader.program.uniformData);\n        }\n\n        group.syncUniforms[this.shader.program.id] = this.cache[id];\n\n        return group.syncUniforms[this.shader.program.id];\n    }\n\n    /**\n     * Takes a uniform group and data and generates a unique signature for them.\n     *\n     * @param {PIXI.UniformGroup} group the uniform group to get signature of\n     * @param {Object} uniformData uniform information generated by the shader\n     * @returns {String} Unique signature of the uniform group\n     * @private\n     */\n    getSignature(group, uniformData)\n    {\n        const uniforms = group.uniforms;\n\n        const strings = [];\n\n        for (const i in uniforms)\n        {\n            strings.push(i);\n\n            if (uniformData[i])\n            {\n                strings.push(uniformData[i].type);\n            }\n        }\n\n        return strings.join('-');\n    }\n\n    /**\n     * Returns the underlying GLShade rof the currently bound shader.\n     * This can be handy for when you to have a little more control over the setting of your uniforms.\n     *\n     * @return {PIXI.GLProgram} the glProgram for the currently bound Shader for this context\n     */\n    getglProgram()\n    {\n        if (this.shader)\n        {\n            return this.shader.program.glPrograms[this.renderer.CONTEXT_UID];\n        }\n\n        return null;\n    }\n\n    /**\n     * Generates a glProgram version of the Shader provided.\n     *\n     * @private\n     * @param {PIXI.Shader} shader the shader that the glProgram will be based on.\n     * @return {PIXI.GLProgram} A shiny new glProgram!\n     */\n    generateShader(shader)\n    {\n        const gl = this.gl;\n\n        const program = shader.program;\n\n        const attribMap = {};\n\n        for (const i in program.attributeData)\n        {\n            attribMap[i] = program.attributeData[i].location;\n        }\n\n        const shaderProgram = compileProgram(gl, program.vertexSrc, program.fragmentSrc, attribMap);\n        const uniformData = {};\n\n        for (const i in program.uniformData)\n        {\n            const data = program.uniformData[i];\n\n            uniformData[i] = {\n                location: gl.getUniformLocation(shaderProgram, i),\n                value: defaultValue(data.type, data.size),\n            };\n        }\n\n        const glProgram = new GLProgram(shaderProgram, uniformData);\n\n        program.glPrograms[this.renderer.CONTEXT_UID] = glProgram;\n\n        return glProgram;\n    }\n\n    /**\n     * Resets ShaderSystem state, does not affect WebGL state\n     */\n    reset()\n    {\n        this.program = null;\n        this.shader = null;\n    }\n\n    /**\n     * Destroys this System and removes all its textures\n     */\n    destroy()\n    {\n        // TODO implement destroy method for ShaderSystem\n        this.destroyed = true;\n    }\n}\n","import mapWebGLBlendModesToPixi from './utils/mapWebGLBlendModesToPixi';\nimport System from '../System';\nimport State from './State';\nimport { BLEND_MODES } from '@pixi/constants';\n\nconst BLEND = 0;\nconst OFFSET = 1;\nconst CULLING = 2;\nconst DEPTH_TEST = 3;\nconst WINDING = 4;\n\n/**\n * System plugin to the renderer to manage WebGL state machines.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\nexport default class StateSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * GL context\n         * @member {WebGLRenderingContext}\n         * @readonly\n         */\n        this.gl = null;\n\n        /**\n         * State ID\n         * @member {number}\n         * @readonly\n         */\n        this.stateId = 0;\n\n        /**\n         * Polygon offset\n         * @member {number}\n         * @readonly\n         */\n        this.polygonOffset = 0;\n\n        /**\n         * Blend mode\n         * @member {number}\n         * @default PIXI.BLEND_MODES.NONE\n         * @readonly\n         */\n        this.blendMode = BLEND_MODES.NONE;\n\n        /**\n         * Whether current blend equation is different\n         * @member {boolean}\n         * @protected\n         */\n        this._blendEq = false;\n\n        /**\n         * Collection of calls\n         * @member {function[]}\n         * @readonly\n         */\n        this.map = [];\n\n        // map functions for when we set state..\n        this.map[BLEND] = this.setBlend;\n        this.map[OFFSET] = this.setOffset;\n        this.map[CULLING] = this.setCullFace;\n        this.map[DEPTH_TEST] = this.setDepthTest;\n        this.map[WINDING] = this.setFrontFace;\n\n        /**\n         * Collection of check calls\n         * @member {function[]}\n         * @readonly\n         */\n        this.checks = [];\n\n        /**\n         * Default WebGL State\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.defaultState = new State();\n        this.defaultState.blend = true;\n        this.defaultState.depth = true;\n    }\n\n    contextChange(gl)\n    {\n        this.gl = gl;\n\n        this.blendModes = mapWebGLBlendModesToPixi(gl);\n\n        this.set(this.defaultState);\n\n        this.reset();\n    }\n\n    /**\n     * Sets the current state\n     *\n     * @param {*} state - The state to set.\n     */\n    set(state)\n    {\n        state = state || this.defaultState;\n\n        // TODO maybe to an object check? ( this.state === state )?\n        if (this.stateId !== state.data)\n        {\n            let diff = this.stateId ^ state.data;\n            let i = 0;\n\n            // order from least to most common\n            while (diff)\n            {\n                if (diff & 1)\n                {\n                    // state change!\n                    this.map[i].call(this, !!(state.data & (1 << i)));\n                }\n\n                diff = diff >> 1;\n                i++;\n            }\n\n            this.stateId = state.data;\n        }\n\n        // based on the above settings we check for specific modes..\n        // for example if blend is active we check and set the blend modes\n        // or of polygon offset is active we check the poly depth.\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n    }\n\n    /**\n     * Sets the state, when previous state is unknown\n     *\n     * @param {*} state - The state to set\n     */\n    forceState(state)\n    {\n        state = state || this.defaultState;\n        for (let i = 0; i < this.map.length; i++)\n        {\n            this.map[i].call(this, !!(state.data & (1 << i)));\n        }\n        for (let i = 0; i < this.checks.length; i++)\n        {\n            this.checks[i](this, state);\n        }\n\n        this.stateId = state.data;\n    }\n\n    /**\n     * Enables or disabled blending.\n     *\n     * @param {boolean} value - Turn on or off webgl blending.\n     */\n    setBlend(value)\n    {\n        this.updateCheck(StateSystem.checkBlendMode, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.BLEND);\n    }\n\n    /**\n     * Enables or disable polygon offset fill\n     *\n     * @param {boolean} value - Turn on or off webgl polygon offset testing.\n     */\n    setOffset(value)\n    {\n        this.updateCheck(StateSystem.checkPolygonOffset, value);\n\n        this.gl[value ? 'enable' : 'disable'](this.gl.POLYGON_OFFSET_FILL);\n    }\n\n    /**\n     * Sets whether to enable or disable depth test.\n     *\n     * @param {boolean} value - Turn on or off webgl depth testing.\n     */\n    setDepthTest(value)\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.DEPTH_TEST);\n    }\n\n    /**\n     * Sets whether to enable or disable cull face.\n     *\n     * @param {boolean} value - Turn on or off webgl cull face.\n     */\n    setCullFace(value)\n    {\n        this.gl[value ? 'enable' : 'disable'](this.gl.CULL_FACE);\n    }\n\n    /**\n     * Sets the gl front face.\n     *\n     * @param {boolean} value - true is clockwise and false is counter-clockwise\n     */\n    setFrontFace(value)\n    {\n        this.gl.frontFace(this.gl[value ? 'CW' : 'CCW']);\n    }\n\n    /**\n     * Sets the blend mode.\n     *\n     * @param {number} value - The blend mode to set to.\n     */\n    setBlendMode(value)\n    {\n        if (value === this.blendMode)\n        {\n            return;\n        }\n\n        this.blendMode = value;\n\n        const mode = this.blendModes[value];\n        const gl = this.gl;\n\n        if (mode.length === 2)\n        {\n            gl.blendFunc(mode[0], mode[1]);\n        }\n        else\n        {\n            gl.blendFuncSeparate(mode[0], mode[1], mode[2], mode[3]);\n        }\n        if (mode.length === 6)\n        {\n            this._blendEq = true;\n            gl.blendEquationSeparate(mode[4], mode[5]);\n        }\n        else if (this._blendEq)\n        {\n            this._blendEq = false;\n            gl.blendEquationSeparate(gl.FUNC_ADD, gl.FUNC_ADD);\n        }\n    }\n\n    /**\n     * Sets the polygon offset.\n     *\n     * @param {number} value - the polygon offset\n     * @param {number} scale - the polygon offset scale\n     */\n    setPolygonOffset(value, scale)\n    {\n        this.gl.polygonOffset(value, scale);\n    }\n\n    // used\n    /**\n     * Resets all the logic and disables the vaos\n     */\n    reset()\n    {\n        this.gl.pixelStorei(this.gl.UNPACK_FLIP_Y_WEBGL, false);\n\n        this.forceState(0);\n\n        this._blendEq = true;\n        this.blendMode = -1;\n        this.setBlendMode(0);\n    }\n\n    /**\n     * checks to see which updates should be checked based on which settings have been activated.\n     * For example, if blend is enabled then we should check the blend modes each time the state is changed\n     * or if polygon fill is activated then we need to check if the polygon offset changes.\n     * The idea is that we only check what we have too.\n     *\n     * @param {Function} func  the checking function to add or remove\n     * @param {boolean} value  should the check function be added or removed.\n     */\n    updateCheck(func, value)\n    {\n        const index = this.checks.indexOf(func);\n\n        if (value && index === -1)\n        {\n            this.checks.push(func);\n        }\n        else if (!value && index !== -1)\n        {\n            this.checks.splice(index, 1);\n        }\n    }\n\n    /**\n     * A private little wrapper function that we call to check the blend mode.\n     *\n     * @static\n     * @private\n     * @param {PIXI.StateSystem} System  the System to perform the state check on\n     * @param {PIXI.State} state  the state that the blendMode will pulled from\n     */\n    static checkBlendMode(system, state)\n    {\n        system.setBlendMode(state.blendMode);\n    }\n\n    /**\n     * A private little wrapper function that we call to check the polygon offset.\n     *\n     * @static\n     * @private\n     * @param {PIXI.StateSystem} System  the System to perform the state check on\n     * @param {PIXI.State} state  the state that the blendMode will pulled from\n     */\n    static checkPolygonOffset(system, state)\n    {\n        system.setPolygonOffset(state.polygonOffset, 0);\n    }\n}\n","import { BLEND_MODES } from '@pixi/constants';\n\n/**\n * Maps gl blend combinations to WebGL.\n *\n * @memberof PIXI\n * @function mapWebGLBlendModesToPixi\n * @private\n * @param {WebGLRenderingContext} gl - The rendering context.\n * @param {number[][]} [array=[]] - The array to output into.\n * @return {number[][]} Mapped modes.\n */\nexport default function mapWebGLBlendModesToPixi(gl, array = [])\n{\n    // TODO - premultiply alpha would be different.\n    // add a boolean for that!\n    array[BLEND_MODES.NORMAL] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.ADD] = [gl.ONE, gl.ONE];\n    array[BLEND_MODES.MULTIPLY] = [gl.DST_COLOR, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SCREEN] = [gl.ONE, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.OVERLAY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DARKEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.LIGHTEN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR_DODGE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR_BURN] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.HARD_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SOFT_LIGHT] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DIFFERENCE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.EXCLUSION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.HUE] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.SATURATION] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.COLOR] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.LUMINOSITY] = [gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.NONE] = [0, 0];\n\n    // not-premultiplied blend modes\n    array[BLEND_MODES.NORMAL_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_ALPHA, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.ADD_NPM] = [gl.SRC_ALPHA, gl.ONE, gl.ONE, gl.ONE];\n    array[BLEND_MODES.SCREEN_NPM] = [gl.SRC_ALPHA, gl.ONE_MINUS_SRC_COLOR, gl.ONE, gl.ONE_MINUS_SRC_ALPHA];\n\n    // composite operations\n    array[BLEND_MODES.SRC_IN] = [gl.DST_ALPHA, gl.ZERO];\n    array[BLEND_MODES.SRC_OUT] = [gl.ONE_MINUS_DST_ALPHA, gl.ZERO];\n    array[BLEND_MODES.SRC_ATOP] = [gl.DST_ALPHA, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DST_OVER] = [gl.ONE_MINUS_DST_ALPHA, gl.ONE];\n    array[BLEND_MODES.DST_IN] = [gl.ZERO, gl.SRC_ALPHA];\n    array[BLEND_MODES.DST_OUT] = [gl.ZERO, gl.ONE_MINUS_SRC_ALPHA];\n    array[BLEND_MODES.DST_ATOP] = [gl.ONE_MINUS_DST_ALPHA, gl.SRC_ALPHA];\n\n    // SUBTRACT from flash\n    array[BLEND_MODES.SUBTRACT] = [gl.ONE, gl.ONE, gl.ONE, gl.ONE, gl.FUNC_REVERSE_SUBTRACT, gl.FUNC_ADD];\n\n    return array;\n}\n","import System from '../System';\nimport { GC_MODES } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\n\n/**\n * System plugin to the renderer to manage texture garbage collection on the GPU,\n * ensuring that it does not get clogged up with textures that are no longer being used.\n *\n * @class\n * @memberof PIXI.systems\n * @extends PIXI.System\n */\nexport default class TextureGCSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * Count\n         * @member {number}\n         * @readonly\n         */\n        this.count = 0;\n\n        /**\n         * Check count\n         * @member {number}\n         * @readonly\n         */\n        this.checkCount = 0;\n\n        /**\n         * Maximum idle time, in seconds\n         * @member {number}\n         * @see PIXI.settings.GC_MAX_IDLE\n         */\n        this.maxIdle = settings.GC_MAX_IDLE;\n\n        /**\n         * Maximum number of item to check\n         * @member {number}\n         * @see PIXI.settings.GC_MAX_CHECK_COUNT\n         */\n        this.checkCountMax = settings.GC_MAX_CHECK_COUNT;\n\n        /**\n         * Current garabage collection mode\n         * @member {PIXI.GC_MODES}\n         * @see PIXI.settings.GC_MODE\n         */\n        this.mode = settings.GC_MODE;\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    postrender()\n    {\n        this.count++;\n\n        if (this.mode === GC_MODES.MANUAL)\n        {\n            return;\n        }\n\n        this.checkCount++;\n\n        if (this.checkCount > this.checkCountMax)\n        {\n            this.checkCount = 0;\n\n            this.run();\n        }\n    }\n\n    /**\n     * Checks to see when the last time a texture was used\n     * if the texture has not been used for a specified amount of time it will be removed from the GPU\n     */\n    run()\n    {\n        const tm = this.renderer.texture;\n        const managedTextures =  tm.managedTextures;\n        let wasRemoved = false;\n\n        for (let i = 0; i < managedTextures.length; i++)\n        {\n            const texture = managedTextures[i];\n\n            // only supports non generated textures at the moment!\n            if (!texture.framebuffer && this.count - texture.touched > this.maxIdle)\n            {\n                tm.destroyTexture(texture, true);\n                managedTextures[i] = null;\n                wasRemoved = true;\n            }\n        }\n\n        if (wasRemoved)\n        {\n            let j = 0;\n\n            for (let i = 0; i < managedTextures.length; i++)\n            {\n                if (managedTextures[i] !== null)\n                {\n                    managedTextures[j++] = managedTextures[i];\n                }\n            }\n\n            managedTextures.length = j;\n        }\n    }\n\n    /**\n     * Removes all the textures within the specified displayObject and its children from the GPU\n     *\n     * @param {PIXI.DisplayObject} displayObject - the displayObject to remove the textures from.\n     */\n    unload(displayObject)\n    {\n        const tm = this.renderer.textureSystem;\n\n        // only destroy non generated textures\n        if (displayObject._texture && displayObject._texture._glRenderTargets)\n        {\n            tm.destroyTexture(displayObject._texture);\n        }\n\n        for (let i = displayObject.children.length - 1; i >= 0; i--)\n        {\n            this.unload(displayObject.children[i]);\n        }\n    }\n}\n","/**\n * Internal texture for WebGL context\n * @class\n * @memberof PIXI\n */\nexport default class GLTexture\n{\n    constructor(texture)\n    {\n        /**\n         * The WebGL texture\n         * @member {WebGLTexture}\n         */\n        this.texture = texture;\n\n        /**\n         * Width of texture that was used in texImage2D\n         * @member {number}\n         */\n        this.width = -1;\n\n        /**\n         * Height of texture that was used in texImage2D\n         * @member {number}\n         */\n        this.height = -1;\n\n        /**\n         * Texture contents dirty flag\n         * @member {number}\n         */\n        this.dirtyId = -1;\n\n        /**\n         * Texture style dirty flag\n         * @member {number}\n         */\n        this.dirtyStyleId = -1;\n\n        /**\n         * Whether mip levels has to be generated\n         * @member {boolean}\n         */\n        this.mipmap = false;\n\n        /**\n         * WrapMode copied from baseTexture\n         * @member {number}\n         */\n        this.wrapMode = 33071;\n\n        /**\n         * Type copied from baseTexture\n         * @member {number}\n         */\n        this.type = 6408;\n\n        /**\n         * Type copied from baseTexture\n         * @member {number}\n         */\n        this.internalFormat = 5121;\n    }\n}\n","import System from '../System';\nimport BaseTexture from './BaseTexture';\nimport GLTexture from './GLTexture';\nimport { removeItems } from '@pixi/utils';\nimport { MIPMAP_MODES, WRAP_MODES, SCALE_MODES, TYPES } from '@pixi/constants';\n\n/**\n * System plugin to the renderer to manage textures.\n *\n * @class\n * @extends PIXI.System\n * @memberof PIXI.systems\n */\nexport default class TextureSystem extends System\n{\n    /**\n     * @param {PIXI.Renderer} renderer - The renderer this System works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        // TODO set to max textures...\n        /**\n         * Bound textures\n         * @member {PIXI.BaseTexture[]}\n         * @readonly\n         */\n        this.boundTextures = [];\n        /**\n         * Current location\n         * @member {number}\n         * @readonly\n         */\n        this.currentLocation = -1;\n\n        /**\n         * List of managed textures\n         * @member {PIXI.BaseTexture[]}\n         * @readonly\n         */\n        this.managedTextures = [];\n\n        /**\n         * Did someone temper with textures state? We'll overwrite them when we need to unbind something.\n         * @member {boolean}\n         * @private\n         */\n        this._unknownBoundTextures = false;\n\n        /**\n         * BaseTexture value that shows that we don't know what is bound\n         * @member {PIXI.BaseTexture}\n         * @readonly\n         */\n        this.unknownTexture = new BaseTexture();\n    }\n\n    /**\n     * Sets up the renderer context and necessary buffers.\n     */\n    contextChange()\n    {\n        const gl = this.gl = this.renderer.gl;\n\n        this.CONTEXT_UID = this.renderer.CONTEXT_UID;\n\n        this.webGLVersion = this.renderer.context.webGLVersion;\n\n        const maxTextures = gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS);\n\n        this.boundTextures.length = maxTextures;\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            this.boundTextures[i] = null;\n        }\n\n        // TODO move this.. to a nice make empty textures class..\n        this.emptyTextures = {};\n\n        const emptyTexture2D = new GLTexture(gl.createTexture());\n\n        gl.bindTexture(gl.TEXTURE_2D, emptyTexture2D.texture);\n        gl.texImage2D(gl.TEXTURE_2D, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, new Uint8Array(4));\n\n        this.emptyTextures[gl.TEXTURE_2D] = emptyTexture2D;\n        this.emptyTextures[gl.TEXTURE_CUBE_MAP] = new GLTexture(gl.createTexture());\n\n        gl.bindTexture(gl.TEXTURE_CUBE_MAP, this.emptyTextures[gl.TEXTURE_CUBE_MAP].texture);\n\n        for (let i = 0; i < 6; i++)\n        {\n            gl.texImage2D(gl.TEXTURE_CUBE_MAP_POSITIVE_X + i, 0, gl.RGBA, 1, 1, 0, gl.RGBA, gl.UNSIGNED_BYTE, null);\n        }\n\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MAG_FILTER, gl.LINEAR);\n        gl.texParameteri(gl.TEXTURE_CUBE_MAP, gl.TEXTURE_MIN_FILTER, gl.LINEAR);\n\n        for (let i = 0; i < this.boundTextures.length; i++)\n        {\n            this.bind(null, i);\n        }\n    }\n\n    /**\n     * Bind a texture to a specific location\n     *\n     * If you want to unbind something, please use `unbind(texture)` instead of `bind(null, textureLocation)`\n     *\n     * @param {PIXI.Texture|PIXI.BaseTexture} texture - Texture to bind\n     * @param {number} [location=0] - Location to bind at\n     */\n    bind(texture, location = 0)\n    {\n        const { gl } = this;\n\n        if (texture)\n        {\n            texture = texture.baseTexture || texture;\n\n            if (texture.valid)\n            {\n                texture.touched = this.renderer.textureGC.count;\n\n                const glTexture = texture._glTextures[this.CONTEXT_UID] || this.initTexture(texture);\n\n                if (this.currentLocation !== location)\n                {\n                    this.currentLocation = location;\n                    gl.activeTexture(gl.TEXTURE0 + location);\n                }\n\n                if (this.boundTextures[location] !== texture)\n                {\n                    gl.bindTexture(texture.target, glTexture.texture);\n                }\n\n                if (glTexture.dirtyId !== texture.dirtyId)\n                {\n                    this.updateTexture(texture);\n                }\n\n                this.boundTextures[location] = texture;\n            }\n        }\n        else\n        {\n            if (this.currentLocation !== location)\n            {\n                this.currentLocation = location;\n                gl.activeTexture(gl.TEXTURE0 + location);\n            }\n\n            gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[gl.TEXTURE_2D].texture);\n            this.boundTextures[location] = null;\n        }\n    }\n\n    /**\n     * Resets texture location and bound textures\n     *\n     * Actual `bind(null, i)` calls will be performed at next `unbind()` call\n     */\n    reset()\n    {\n        this._unknownBoundTextures = true;\n        this.currentLocation = -1;\n\n        for (let i = 0; i < this.boundTextures.length; i++)\n        {\n            this.boundTextures[i] = this.unknownTexture;\n        }\n    }\n\n    /**\n     * Unbind a texture\n     * @param {PIXI.Texture|PIXI.BaseTexture} texture - Texture to bind\n     */\n    unbind(texture)\n    {\n        const { gl, boundTextures } = this;\n\n        if (this._unknownBoundTextures)\n        {\n            this._unknownBoundTextures = false;\n            // someone changed webGL state,\n            // we have to be sure that our texture does not appear in multi-texture renderer samplers\n            for (let i = 0; i < boundTextures.length; i++)\n            {\n                if (boundTextures[i] === this.unknownTexture)\n                {\n                    this.bind(null, i);\n                }\n            }\n        }\n\n        for (let i = 0; i < boundTextures.length; i++)\n        {\n            if (boundTextures[i] === texture)\n            {\n                if (this.currentLocation !== i)\n                {\n                    gl.activeTexture(gl.TEXTURE0 + i);\n                    this.currentLocation = i;\n                }\n\n                gl.bindTexture(gl.TEXTURE_2D, this.emptyTextures[texture.target].texture);\n                boundTextures[i] = null;\n            }\n        }\n    }\n\n    /**\n     * Initialize a texture\n     *\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to initialize\n     */\n    initTexture(texture)\n    {\n        const glTexture = new GLTexture(this.gl.createTexture());\n\n        // guarantee an update..\n        glTexture.dirtyId = -1;\n\n        texture._glTextures[this.CONTEXT_UID] = glTexture;\n\n        this.managedTextures.push(texture);\n        texture.on('dispose', this.destroyTexture, this);\n\n        return glTexture;\n    }\n\n    initTextureType(texture, glTexture)\n    {\n        glTexture.internalFormat = texture.format;\n        glTexture.type = texture.type;\n        if (this.webGLVersion !== 2)\n        {\n            return;\n        }\n        const gl = this.renderer.gl;\n\n        if (texture.type === gl.FLOAT\n            && texture.format === gl.RGBA)\n        {\n            glTexture.internalFormat = gl.RGBA32F;\n        }\n        // that's WebGL1 HALF_FLOAT_OES\n        // we have to convert it to WebGL HALF_FLOAT\n        if (texture.type === TYPES.HALF_FLOAT)\n        {\n            glTexture.type = gl.HALF_FLOAT;\n        }\n        if (glTexture.type === gl.HALF_FLOAT\n            && texture.format === gl.RGBA)\n        {\n            glTexture.internalFormat = gl.RGBA16F;\n        }\n    }\n\n    /**\n     * Update a texture\n     *\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to initialize\n     */\n    updateTexture(texture)\n    {\n        const glTexture = texture._glTextures[this.CONTEXT_UID];\n\n        if (!glTexture)\n        {\n            return;\n        }\n\n        const renderer = this.renderer;\n\n        this.initTextureType(texture, glTexture);\n\n        if (texture.resource && texture.resource.upload(renderer, texture, glTexture))\n        {\n            // texture is uploaded, dont do anything!\n        }\n        else\n        {\n            // default, renderTexture-like logic\n            const width = texture.realWidth;\n            const height = texture.realHeight;\n            const gl = renderer.gl;\n\n            if (glTexture.width !== width\n                || glTexture.height !== height\n                || glTexture.dirtyId < 0)\n            {\n                glTexture.width = width;\n                glTexture.height = height;\n\n                gl.texImage2D(texture.target, 0,\n                    glTexture.internalFormat,\n                    width,\n                    height,\n                    0,\n                    texture.format,\n                    glTexture.type,\n                    null);\n            }\n        }\n\n        // lets only update what changes..\n        if (texture.dirtyStyleId !== glTexture.dirtyStyleId)\n        {\n            this.updateTextureStyle(texture);\n        }\n        glTexture.dirtyId = texture.dirtyId;\n    }\n\n    /**\n     * Deletes the texture from WebGL\n     *\n     * @private\n     * @param {PIXI.BaseTexture|PIXI.Texture} texture - the texture to destroy\n     * @param {boolean} [skipRemove=false] - Whether to skip removing the texture from the TextureManager.\n     */\n    destroyTexture(texture, skipRemove)\n    {\n        const { gl } = this;\n\n        texture = texture.baseTexture || texture;\n\n        if (texture._glTextures[this.CONTEXT_UID])\n        {\n            this.unbind(texture);\n\n            gl.deleteTexture(texture._glTextures[this.CONTEXT_UID].texture);\n            texture.off('dispose', this.destroyTexture, this);\n\n            delete texture._glTextures[this.CONTEXT_UID];\n\n            if (!skipRemove)\n            {\n                const i = this.managedTextures.indexOf(texture);\n\n                if (i !== -1)\n                {\n                    removeItems(this.managedTextures, i, 1);\n                }\n            }\n        }\n    }\n\n    /**\n     * Update texture style such as mipmap flag\n     *\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to update\n     */\n    updateTextureStyle(texture)\n    {\n        const glTexture = texture._glTextures[this.CONTEXT_UID];\n\n        if (!glTexture)\n        {\n            return;\n        }\n\n        if ((texture.mipmap === MIPMAP_MODES.POW2 || this.webGLVersion !== 2) && !texture.isPowerOfTwo)\n        {\n            glTexture.mipmap = 0;\n            glTexture.wrapMode = WRAP_MODES.CLAMP;\n        }\n        else\n        {\n            glTexture.mipmap = texture.mipmap >= 1;\n            glTexture.wrapMode = texture.wrapMode;\n        }\n\n        if (texture.resource && texture.resource.style(this.renderer, texture, glTexture))\n        {\n            // style is set, dont do anything!\n        }\n        else\n        {\n            this.setStyle(texture, glTexture);\n        }\n\n        glTexture.dirtyStyleId = texture.dirtyStyleId;\n    }\n\n    /**\n     * Set style for texture\n     *\n     * @private\n     * @param {PIXI.BaseTexture} texture - Texture to update\n     * @param {PIXI.GLTexture} glTexture\n     */\n    setStyle(texture, glTexture)\n    {\n        const gl = this.gl;\n\n        if (glTexture.mipmap)\n        {\n            gl.generateMipmap(texture.target);\n        }\n\n        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_S, glTexture.wrapMode);\n        gl.texParameteri(texture.target, gl.TEXTURE_WRAP_T, glTexture.wrapMode);\n\n        if (glTexture.mipmap)\n        {\n            /* eslint-disable max-len */\n            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode ? gl.LINEAR_MIPMAP_LINEAR : gl.NEAREST_MIPMAP_NEAREST);\n            /* eslint-disable max-len */\n\n            const anisotropicExt = this.renderer.context.extensions.anisotropicFiltering;\n\n            if (anisotropicExt && texture.anisotropicLevel > 0 && texture.scaleMode === SCALE_MODES.LINEAR)\n            {\n                const level = Math.min(texture.anisotropicLevel, gl.getParameter(anisotropicExt.MAX_TEXTURE_MAX_ANISOTROPY_EXT));\n\n                gl.texParameterf(texture.target, anisotropicExt.TEXTURE_MAX_ANISOTROPY_EXT, level);\n            }\n        }\n        else\n        {\n            gl.texParameteri(texture.target, gl.TEXTURE_MIN_FILTER, texture.scaleMode ? gl.LINEAR : gl.NEAREST);\n        }\n\n        gl.texParameteri(texture.target, gl.TEXTURE_MAG_FILTER, texture.scaleMode ? gl.LINEAR : gl.NEAREST);\n    }\n}\n","import { hex2string, hex2rgb, deprecation, EventEmitter } from '@pixi/utils';\nimport { Matrix, Rectangle } from '@pixi/math';\nimport { RENDERER_TYPE } from '@pixi/constants';\nimport { settings } from '@pixi/settings';\nimport { Container } from '@pixi/display';\nimport RenderTexture from './renderTexture/RenderTexture';\n\nconst tempMatrix = new Matrix();\n\n/**\n * The AbstractRenderer is the base for a PixiJS Renderer. It is extended by the {@link PIXI.CanvasRenderer}\n * and {@link PIXI.Renderer} which can be used for rendering a PixiJS scene.\n *\n * @abstract\n * @class\n * @extends PIXI.utils.EventEmitter\n * @memberof PIXI\n */\nexport default class AbstractRenderer extends EventEmitter\n{\n    /**\n     * @param {string} system - The name of the system this renderer is for.\n     * @param {object} [options] - The optional renderer parameters.\n     * @param {number} [options.width=800] - The width of the screen.\n     * @param {number} [options.height=600] - The height of the screen.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.transparent=false] - If the render view is transparent.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer. The\n     *  resolution of the renderer retina would be 2.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the WebGL context.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n     *      not before the new render pass.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     */\n    constructor(system, options)\n    {\n        super();\n\n        // Add the default render options\n        options = Object.assign({}, settings.RENDER_OPTIONS, options);\n\n        // Deprecation notice for renderer roundPixels option\n        if (options.roundPixels)\n        {\n            settings.ROUND_PIXELS = options.roundPixels;\n            deprecation('5.0.0', 'Renderer roundPixels option is deprecated, please use PIXI.settings.ROUND_PIXELS', 2);\n        }\n\n        /**\n         * The supplied constructor options.\n         *\n         * @member {Object}\n         * @readOnly\n         */\n        this.options = options;\n\n        /**\n         * The type of the renderer.\n         *\n         * @member {number}\n         * @default PIXI.RENDERER_TYPE.UNKNOWN\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = RENDERER_TYPE.UNKNOWN;\n\n        /**\n         * Measurements of the screen. (0, 0, screenWidth, screenHeight).\n         *\n         * Its safe to use as filterArea or hitArea for the whole stage.\n         *\n         * @member {PIXI.Rectangle}\n         */\n        this.screen = new Rectangle(0, 0, options.width, options.height);\n\n        /**\n         * The canvas element that everything is drawn to.\n         *\n         * @member {HTMLCanvasElement}\n         */\n        this.view = options.view || document.createElement('canvas');\n\n        /**\n         * The resolution / device pixel ratio of the renderer.\n         *\n         * @member {number}\n         * @default 1\n         */\n        this.resolution = options.resolution || settings.RESOLUTION;\n\n        /**\n         * Whether the render view is transparent.\n         *\n         * @member {boolean}\n         */\n        this.transparent = options.transparent;\n\n        /**\n         * Whether CSS dimensions of canvas view should be resized to screen dimensions automatically.\n         *\n         * @member {boolean}\n         */\n        this.autoDensity = options.autoDensity || options.autoResize || false;\n        // autoResize is deprecated, provides fallback support\n\n        /**\n         * The value of the preserveDrawingBuffer flag affects whether or not the contents of\n         * the stencil buffer is retained after rendering.\n         *\n         * @member {boolean}\n         */\n        this.preserveDrawingBuffer = options.preserveDrawingBuffer;\n\n        /**\n         * This sets if the CanvasRenderer will clear the canvas or not before the new render pass.\n         * If the scene is NOT transparent PixiJS will use a canvas sized fillRect operation every\n         * frame to set the canvas background color. If the scene is transparent PixiJS will use clearRect\n         * to clear the canvas every frame. Disable this by setting this to false. For example, if\n         * your game has a canvas filling background image you often don't need this set.\n         *\n         * @member {boolean}\n         * @default\n         */\n        this.clearBeforeRender = options.clearBeforeRender;\n\n        /**\n         * The background color as a number.\n         *\n         * @member {number}\n         * @protected\n         */\n        this._backgroundColor = 0x000000;\n\n        /**\n         * The background color as an [R, G, B] array.\n         *\n         * @member {number[]}\n         * @protected\n         */\n        this._backgroundColorRgba = [0, 0, 0, 0];\n\n        /**\n         * The background color as a string.\n         *\n         * @member {string}\n         * @protected\n         */\n        this._backgroundColorString = '#000000';\n\n        this.backgroundColor = options.backgroundColor || this._backgroundColor; // run bg color setter\n\n        /**\n         * This temporary display object used as the parent of the currently being rendered item.\n         *\n         * @member {PIXI.DisplayObject}\n         * @protected\n         */\n        this._tempDisplayObjectParent = new Container();\n\n        /**\n         * The last root object that the renderer tried to render.\n         *\n         * @member {PIXI.DisplayObject}\n         * @protected\n         */\n        this._lastObjectRendered = this._tempDisplayObjectParent;\n\n        /**\n         * Collection of plugins.\n         * @readonly\n         * @member {object}\n         */\n        this.plugins = {};\n    }\n\n    /**\n     * Initialize the plugins.\n     *\n     * @protected\n     * @param {object} staticMap - The dictionary of statically saved plugins.\n     */\n    initPlugins(staticMap)\n    {\n        for (const o in staticMap)\n        {\n            this.plugins[o] = new (staticMap[o])(this);\n        }\n    }\n\n    /**\n     * Same as view.width, actual number of pixels in the canvas by horizontal.\n     *\n     * @member {number}\n     * @readonly\n     * @default 800\n     */\n    get width()\n    {\n        return this.view.width;\n    }\n\n    /**\n     * Same as view.height, actual number of pixels in the canvas by vertical.\n     *\n     * @member {number}\n     * @readonly\n     * @default 600\n     */\n    get height()\n    {\n        return this.view.height;\n    }\n\n    /**\n     * Resizes the screen and canvas to the specified width and height.\n     * Canvas dimensions are multiplied by resolution.\n     *\n     * @param {number} screenWidth - The new width of the screen.\n     * @param {number} screenHeight - The new height of the screen.\n     */\n    resize(screenWidth, screenHeight)\n    {\n        this.screen.width = screenWidth;\n        this.screen.height = screenHeight;\n\n        this.view.width = screenWidth * this.resolution;\n        this.view.height = screenHeight * this.resolution;\n\n        if (this.autoDensity)\n        {\n            this.view.style.width = `${screenWidth}px`;\n            this.view.style.height = `${screenHeight}px`;\n        }\n    }\n\n    /**\n     * Useful function that returns a texture of the display object that can then be used to create sprites\n     * This can be quite useful if your displayObject is complicated and needs to be reused multiple times.\n     *\n     * @param {PIXI.DisplayObject} displayObject - The displayObject the object will be generated from.\n     * @param {number} scaleMode - Should be one of the scaleMode consts.\n     * @param {number} resolution - The resolution / device pixel ratio of the texture being generated.\n     * @param {PIXI.Rectangle} [region] - The region of the displayObject, that shall be rendered,\n     *        if no region is specified, defaults to the local bounds of the displayObject.\n     * @return {PIXI.RenderTexture} A texture of the graphics object.\n     */\n    generateTexture(displayObject, scaleMode, resolution, region)\n    {\n        region = region || displayObject.getLocalBounds();\n\n        // minimum texture size is 1x1, 0x0 will throw an error\n        if (region.width === 0) region.width = 1;\n        if (region.height === 0) region.height = 1;\n\n        const renderTexture = RenderTexture.create(region.width | 0, region.height | 0, scaleMode, resolution);\n\n        tempMatrix.tx = -region.x;\n        tempMatrix.ty = -region.y;\n\n        this.render(displayObject, renderTexture, false, tempMatrix, !!displayObject.parent);\n\n        return renderTexture;\n    }\n\n    /**\n     * Removes everything from the renderer and optionally removes the Canvas DOM element.\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     */\n    destroy(removeView)\n    {\n        for (const o in this.plugins)\n        {\n            this.plugins[o].destroy();\n            this.plugins[o] = null;\n        }\n\n        if (removeView && this.view.parentNode)\n        {\n            this.view.parentNode.removeChild(this.view);\n        }\n\n        this.plugins = null;\n\n        this.type = RENDERER_TYPE.UNKNOWN;\n\n        this.view = null;\n\n        this.screen = null;\n\n        this.resolution = 0;\n\n        this.transparent = false;\n\n        this.autoDensity = false;\n\n        this.blendModes = null;\n\n        this.options = null;\n\n        this.preserveDrawingBuffer = false;\n        this.clearBeforeRender = false;\n\n        this._backgroundColor = 0;\n        this._backgroundColorRgba = null;\n        this._backgroundColorString = null;\n\n        this._tempDisplayObjectParent = null;\n        this._lastObjectRendered = null;\n    }\n\n    /**\n     * The background color to fill if not transparent\n     *\n     * @member {number}\n     */\n    get backgroundColor()\n    {\n        return this._backgroundColor;\n    }\n\n    set backgroundColor(value) // eslint-disable-line require-jsdoc\n    {\n        this._backgroundColor = value;\n        this._backgroundColorString = hex2string(value);\n        hex2rgb(value, this._backgroundColorRgba);\n    }\n}\n","import AbstractRenderer from './AbstractRenderer';\nimport { sayHello, isWebGLSupported } from '@pixi/utils';\nimport MaskSystem from './mask/MaskSystem';\nimport StencilSystem from './mask/StencilSystem';\nimport FilterSystem from './filters/FilterSystem';\nimport FramebufferSystem from './framebuffer/FramebufferSystem';\nimport RenderTextureSystem from './renderTexture/RenderTextureSystem';\nimport TextureSystem from './textures/TextureSystem';\nimport ProjectionSystem from './projection/ProjectionSystem';\nimport StateSystem from './state/StateSystem';\nimport GeometrySystem from './geometry/GeometrySystem';\nimport ShaderSystem from './shader/ShaderSystem';\nimport ContextSystem from './context/ContextSystem';\nimport BatchSystem from './batch/BatchSystem';\nimport TextureGCSystem from './textures/TextureGCSystem';\nimport { RENDERER_TYPE } from '@pixi/constants';\nimport UniformGroup from './shader/UniformGroup';\nimport { Matrix } from '@pixi/math';\nimport { Runner } from '@pixi/runner';\n\n/**\n * The Renderer draws the scene and all its content onto a WebGL enabled canvas.\n *\n * This renderer should be used for browsers that support WebGL.\n *\n * This renderer works by automatically managing WebGLBatchesm, so no need for Sprite Batches or Sprite Clouds.\n * Don't forget to add the view to your DOM or you will not see anything!\n *\n * @class\n * @memberof PIXI\n * @extends PIXI.AbstractRenderer\n */\nexport default class Renderer extends AbstractRenderer\n{\n    /**\n     * Create renderer if WebGL is available. Overrideable\n     * by the **@pixi/canvas-renderer** package to allow fallback.\n     * throws error if WebGL is not available.\n     * @static\n     * @private\n     */\n    static create(options)\n    {\n        if (isWebGLSupported())\n        {\n            return new Renderer(options);\n        }\n\n        throw new Error('WebGL unsupported in this browser, use \"pixi.js-legacy\" for fallback canvas2d support.');\n    }\n\n    /**\n     * @param {object} [options] - The optional renderer parameters.\n     * @param {number} [options.width=800] - The width of the screen.\n     * @param {number} [options.height=600] - The height of the screen.\n     * @param {HTMLCanvasElement} [options.view] - The canvas to use as a view, optional.\n     * @param {boolean} [options.transparent=false] - If the render view is transparent.\n     * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n     *   resolutions other than 1.\n     * @param {boolean} [options.antialias=false] - Sets antialias. If not available natively then FXAA\n     *  antialiasing is used.\n     * @param {boolean} [options.forceFXAA=false] - Forces FXAA antialiasing to be used over native.\n     *  FXAA is faster, but may not always look as great.\n     * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer.\n     *  The resolution of the renderer retina would be 2.\n     * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear\n     *  the canvas or not before the new render pass. If you wish to set this to false, you *must* set\n     *  preserveDrawingBuffer to `true`.\n     * @param {boolean} [options.preserveDrawingBuffer=false] - Enables drawing buffer preservation,\n     *  enable this if you need to call toDataUrl on the WebGL context.\n     * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n     *  (shown if not transparent).\n     * @param {string} [options.powerPreference] - Parameter passed to WebGL context, set to \"high-performance\"\n     *  for devices with dual graphics card.\n     * @param {object} [options.context] If WebGL context already exists, all parameters must be taken from it.\n     */\n    constructor(options = {})\n    {\n        super('WebGL', options);\n\n        // the options will have been modified here in the super constructor with pixi's default settings..\n        options = this.options;\n\n        /**\n         * The type of this renderer as a standardized const\n         *\n         * @member {number}\n         * @see PIXI.RENDERER_TYPE\n         */\n        this.type = RENDERER_TYPE.WEBGL;\n\n        /**\n         * WebGL context, set by the contextSystem (this.context)\n         *\n         * @readonly\n         * @member {WebGLRenderingContext}\n         */\n        this.gl = null;\n\n        this.CONTEXT_UID = 0;\n\n        // TODO legacy!\n\n        /**\n         * Internal signal instances of **runner**, these\n         * are assigned to each system created.\n         * @see PIXI.Runner\n         * @name PIXI.Renderer#runners\n         * @private\n         * @type {object}\n         * @readonly\n         * @property {PIXI.Runner} destroy - Destroy runner\n         * @property {PIXI.Runner} contextChange - Context change runner\n         * @property {PIXI.Runner} reset - Reset runner\n         * @property {PIXI.Runner} update - Update runner\n         * @property {PIXI.Runner} postrender - Post-render runner\n         * @property {PIXI.Runner} prerender - Pre-render runner\n         * @property {PIXI.Runner} resize - Resize runner\n         */\n        this.runners = {\n            destroy: new Runner('destroy'),\n            contextChange: new Runner('contextChange', 1),\n            reset: new Runner('reset'),\n            update: new Runner('update'),\n            postrender: new Runner('postrender'),\n            prerender: new Runner('prerender'),\n            resize: new Runner('resize', 2),\n        };\n\n        /**\n         * Global uniforms\n         * @member {PIXI.UniformGroup}\n         */\n        this.globalUniforms = new UniformGroup({\n            projectionMatrix: new Matrix(),\n        }, true);\n\n        /**\n         * Mask system instance\n         * @member {PIXI.systems.MaskSystem} mask\n         * @memberof PIXI.Renderer#\n         * @readonly\n         */\n        this.addSystem(MaskSystem, 'mask')\n            /**\n             * Context system instance\n             * @member {PIXI.systems.ContextSystem} context\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(ContextSystem, 'context')\n            /**\n             * State system instance\n             * @member {PIXI.systems.StateSystem} state\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(StateSystem, 'state')\n            /**\n             * Shader system instance\n             * @member {PIXI.systems.ShaderSystem} shader\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(ShaderSystem, 'shader')\n            /**\n             * Texture system instance\n             * @member {PIXI.systems.TextureSystem} texture\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(TextureSystem, 'texture')\n            /**\n             * Geometry system instance\n             * @member {PIXI.systems.GeometrySystem} geometry\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(GeometrySystem, 'geometry')\n            /**\n             * Framebuffer system instance\n             * @member {PIXI.systems.FramebufferSystem} framebuffer\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(FramebufferSystem, 'framebuffer')\n            /**\n             * Stencil system instance\n             * @member {PIXI.systems.StencilSystem} stencil\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(StencilSystem, 'stencil')\n            /**\n             * Projection system instance\n             * @member {PIXI.systems.ProjectionSystem} projection\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(ProjectionSystem, 'projection')\n            /**\n             * Texture garbage collector system instance\n             * @member {PIXI.systems.TextureGCSystem} textureGC\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(TextureGCSystem, 'textureGC')\n            /**\n             * Filter system instance\n             * @member {PIXI.systems.FilterSystem} filter\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(FilterSystem, 'filter')\n            /**\n             * RenderTexture system instance\n             * @member {PIXI.systems.RenderTextureSystem} renderTexture\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(RenderTextureSystem, 'renderTexture')\n\n            /**\n             * Batch system instance\n             * @member {PIXI.systems.BatchSystem} batch\n             * @memberof PIXI.Renderer#\n             * @readonly\n             */\n            .addSystem(BatchSystem, 'batch');\n\n        this.initPlugins(Renderer.__plugins);\n\n        /**\n         * The options passed in to create a new WebGL context.\n         */\n        if (options.context)\n        {\n            this.context.initFromContext(options.context);\n        }\n        else\n        {\n            this.context.initFromOptions({\n                alpha: this.transparent,\n                antialias: options.antialias,\n                premultipliedAlpha: this.transparent && this.transparent !== 'notMultiplied',\n                stencil: true,\n                preserveDrawingBuffer: options.preserveDrawingBuffer,\n                powerPreference: this.options.powerPreference,\n            });\n        }\n\n        /**\n         * Flag if we are rendering to the screen vs renderTexture\n         * @member {boolean}\n         * @readonly\n         * @default true\n         */\n        this.renderingToScreen = true;\n\n        sayHello(this.context.webGLVersion === 2 ? 'WebGL 2' : 'WebGL 1');\n\n        this.resize(this.options.width, this.options.height);\n    }\n\n    /**\n     * Add a new system to the renderer.\n     * @param {Function} ClassRef - Class reference\n     * @param {string} [name] - Property name for system, if not specified\n     *        will use a static `name` property on the class itself. This\n     *        name will be assigned as s property on the Renderer so make\n     *        sure it doesn't collide with properties on Renderer.\n     * @return {PIXI.Renderer} Return instance of renderer\n     */\n    addSystem(ClassRef, name)\n    {\n        if (!name)\n        {\n            name = ClassRef.name;\n        }\n\n        const system = new ClassRef(this);\n\n        if (this[name])\n        {\n            throw new Error(`Whoops! The name \"${name}\" is already in use`);\n        }\n\n        this[name] = system;\n\n        for (const i in this.runners)\n        {\n            this.runners[i].add(system);\n        }\n\n        /**\n         * Fired after rendering finishes.\n         *\n         * @event PIXI.Renderer#postrender\n         */\n\n        /**\n         * Fired before rendering starts.\n         *\n         * @event PIXI.Renderer#prerender\n         */\n\n        /**\n         * Fired when the WebGL context is set.\n         *\n         * @event PIXI.Renderer#context\n         * @param {WebGLRenderingContext} gl - WebGL context.\n         */\n\n        return this;\n    }\n\n    /**\n     * Renders the object to its WebGL view\n     *\n     * @param {PIXI.DisplayObject} displayObject - The object to be rendered.\n     * @param {PIXI.RenderTexture} [renderTexture] - The render texture to render to.\n     * @param {boolean} [clear=true] - Should the canvas be cleared before the new render.\n     * @param {PIXI.Matrix} [transform] - A transform to apply to the render texture before rendering.\n     * @param {boolean} [skipUpdateTransform=false] - Should we skip the update transform pass?\n     */\n    render(displayObject, renderTexture, clear, transform, skipUpdateTransform)\n    {\n        // can be handy to know!\n        this.renderingToScreen = !renderTexture;\n\n        this.runners.prerender.run();\n        this.emit('prerender');\n\n        // apply a transform at a GPU level\n        this.projection.transform = transform;\n\n        // no point rendering if our context has been blown up!\n        if (this.context.isLost)\n        {\n            return;\n        }\n\n        if (!renderTexture)\n        {\n            this._lastObjectRendered = displayObject;\n        }\n\n        if (!skipUpdateTransform)\n        {\n            // update the scene graph\n            const cacheParent = displayObject.parent;\n\n            displayObject.parent = this._tempDisplayObjectParent;\n            displayObject.updateTransform();\n            displayObject.parent = cacheParent;\n            // displayObject.hitArea = //TODO add a temp hit area\n        }\n\n        this.renderTexture.bind(renderTexture);\n        this.batch.currentRenderer.start();\n\n        if (clear !== undefined ? clear : this.clearBeforeRender)\n        {\n            this.renderTexture.clear();\n        }\n\n        displayObject.render(this);\n\n        // apply transform..\n        this.batch.currentRenderer.flush();\n\n        if (renderTexture)\n        {\n            renderTexture.baseTexture.update();\n        }\n\n        this.runners.postrender.run();\n\n        // reset transform after render\n        this.projection.transform = null;\n\n        this.emit('postrender');\n    }\n\n    /**\n     * Resizes the WebGL view to the specified width and height.\n     *\n     * @param {number} screenWidth - The new width of the screen.\n     * @param {number} screenHeight - The new height of the screen.\n     */\n    resize(screenWidth, screenHeight)\n    {\n        super.resize(screenWidth, screenHeight);\n\n        this.runners.resize.run(screenWidth, screenHeight);\n    }\n\n    /**\n     * Resets the WebGL state so you can render things however you fancy!\n     *\n     * @return {PIXI.Renderer} Returns itself.\n     */\n    reset()\n    {\n        this.runners.reset.run();\n\n        return this;\n    }\n\n    /**\n     * Clear the frame buffer\n     */\n    clear()\n    {\n        this.framebuffer.bind();\n        this.framebuffer.clear();\n    }\n\n    /**\n     * Removes everything from the renderer (event listeners, spritebatch, etc...)\n     *\n     * @param {boolean} [removeView=false] - Removes the Canvas element from the DOM.\n     *  See: https://github.com/pixijs/pixi.js/issues/2233\n     */\n    destroy(removeView)\n    {\n        this.runners.destroy.run();\n\n        for (const r in this.runners)\n        {\n            this.runners[r].destroy();\n        }\n\n        // call base destroy\n        super.destroy(removeView);\n\n        // TODO nullify all the managers..\n        this.gl = null;\n    }\n\n    /**\n     * Collection of installed plugins. These are included by default in PIXI, but can be excluded\n     * by creating a custom build. Consult the README for more information about creating custom\n     * builds and excluding plugins.\n     * @name PIXI.Renderer#plugins\n     * @type {object}\n     * @readonly\n     * @property {PIXI.accessibility.AccessibilityManager} accessibility Support tabbing interactive elements.\n     * @property {PIXI.extract.Extract} extract Extract image data from renderer.\n     * @property {PIXI.interaction.InteractionManager} interaction Handles mouse, touch and pointer events.\n     * @property {PIXI.prepare.Prepare} prepare Pre-render display objects.\n     */\n\n    /**\n     * Adds a plugin to the renderer.\n     *\n     * @method\n     * @param {string} pluginName - The name of the plugin.\n     * @param {Function} ctor - The constructor function or class for the plugin.\n     */\n    static registerPlugin(pluginName, ctor)\n    {\n        Renderer.__plugins = Renderer.__plugins || {};\n        Renderer.__plugins[pluginName] = ctor;\n    }\n}\n","import BaseTexture from './BaseTexture';\nimport CubeResource from './resources/CubeResource';\n\n/**\n * A Texture that depends on six other resources.\n *\n * @class\n * @extends PIXI.BaseTexture\n * @memberof PIXI\n */\nexport default class CubeTexture extends BaseTexture\n{\n    /**\n     * Generate a new CubeTexture.\n     * @static\n     * @param {string[]|PIXI.resources.Resource[]} resources - Collection of 6 URLs or resources\n     * @param {object} [options] - Optional options passed to the resources being loaded.\n     *        See {@PIXI.resources.autoDetectResource autoDetectResource} for more info\n     *        on the options available to each resource.\n     * @returns {PIXI.CubeTexture} new cube texture\n     */\n    static from(resources, options)\n    {\n        return new CubeTexture(new CubeResource(resources, options));\n    }\n}\n","/**\n * Used by the batcher to draw batches.\n * Each one of these contains all information required to draw a bound geometry.\n *\n * @class\n * @memberof PIXI\n */\nexport default class BatchDrawCall\n{\n    constructor()\n    {\n        this.textures = [];\n        this.ids = [];\n        this.blend = 0;\n        this.textureCount = 0;\n        this.start = 0;\n        this.size = 0;\n        this.type = 4;\n    }\n}\n","/**\n * Flexible wrapper around `ArrayBuffer` that also provides\n * typed array views on demand.\n *\n * @class\n * @memberof PIXI\n */\nexport default class ViewableBuffer\n{\n    /**\n     * @param {number} size - The size of the buffer in bytes.\n     */\n    constructor(size)\n    {\n        /**\n         * Underlying `ArrayBuffer` that holds all the data\n         * and is of capacity `size`.\n         *\n         * @member {ArrayBuffer}\n         */\n        this.rawBinaryData = new ArrayBuffer(size);\n\n        /**\n         * View on the raw binary data as a `Uint32Array`.\n         *\n         * @member {Uint32Array}\n         */\n        this.uint32View = new Uint32Array(this.rawBinaryData);\n\n        /**\n         * View on the raw binary data as a `Float32Array`.\n         *\n         * @member {Float32Array}\n         */\n        this.float32View = new Float32Array(this.rawBinaryData);\n    }\n\n    /**\n     * View on the raw binary data as a `Int8Array`.\n     *\n     * @member {Int8Array}\n     */\n    get int8View()\n    {\n        if (!this._int8View)\n        {\n            this._int8View = new Int8Array(this.rawBinaryData);\n        }\n\n        return this._int8View;\n    }\n\n    /**\n     * View on the raw binary data as a `Uint8Array`.\n     *\n     * @member {Uint8Array}\n     */\n    get uint8View()\n    {\n        if (!this._uint8View)\n        {\n            this._uint8View = new Uint8Array(this.rawBinaryData);\n        }\n\n        return this._uint8View;\n    }\n\n    /**\n     * View on the raw binary data as a `Int16Array`.\n     *\n     * @member {Int16Array}\n     */\n    get int16View()\n    {\n        if (!this._int16View)\n        {\n            this._int16View = new Int16Array(this.rawBinaryData);\n        }\n\n        return this._int16View;\n    }\n\n    /**\n     * View on the raw binary data as a `Uint16Array`.\n     *\n     * @member {Uint16Array}\n     */\n    get uint16View()\n    {\n        if (!this._uint16View)\n        {\n            this._uint16View = new Uint16Array(this.rawBinaryData);\n        }\n\n        return this._uint16View;\n    }\n\n    /**\n     * View on the raw binary data as a `Int32Array`.\n     *\n     * @member {Int32Array}\n     */\n    get int32View()\n    {\n        if (!this._int32View)\n        {\n            this._int32View = new Int32Array(this.rawBinaryData);\n        }\n\n        return this._int32View;\n    }\n\n    /**\n     * Returns the view of the given type.\n     *\n     * @param {string} type - One of `int8`, `uint8`, `int16`,\n     *    `uint16`, `int32`, `uint32`, and `float32`.\n     * @return {object} typed array of given type\n     */\n    view(type)\n    {\n        return this[`${type}View`];\n    }\n\n    /**\n     * Destroys all buffer references. Do not use after calling\n     * this.\n     */\n    destroy()\n    {\n        this.rawBinaryData = null;\n        this._int8View = null;\n        this._uint8View = null;\n        this._int16View = null;\n        this._uint16View = null;\n        this._int32View = null;\n        this.uint32View = null;\n        this.float32View = null;\n    }\n\n    static sizeOf(type)\n    {\n        switch (type)\n        {\n            case 'int8':\n            case 'uint8':\n                return 1;\n            case 'int16':\n            case 'uint16':\n                return 2;\n            case 'int32':\n            case 'uint32':\n            case 'float32':\n                return 4;\n            default:\n                throw new Error(`${type} isn't a valid view type`);\n        }\n    }\n}\n","import BatchDrawCall from './BatchDrawCall';\nimport BaseTexture from '../textures/BaseTexture';\nimport ObjectRenderer from './ObjectRenderer';\nimport State from '../state/State';\nimport ViewableBuffer from '../geometry/ViewableBuffer';\n\nimport checkMaxIfStatementsInShader from '../shader/utils/checkMaxIfStatementsInShader';\n\nimport { settings } from '@pixi/settings';\nimport { premultiplyBlendMode, premultiplyTint, nextPow2, log2 } from '@pixi/utils';\nimport { ENV } from '@pixi/constants';\n\n/**\n * Renderer dedicated to drawing and batching sprites.\n *\n * This is the default batch renderer. It buffers objects\n * with texture-based geometries and renders them in\n * batches. It uploads multiple textures to the GPU to\n * reduce to the number of draw calls.\n *\n * @class\n * @protected\n * @memberof PIXI\n * @extends PIXI.ObjectRenderer\n */\nexport default class AbstractBatchRenderer extends ObjectRenderer\n{\n    /**\n     * This will hook onto the renderer's `contextChange`\n     * and `prerender` signals.\n     *\n     * @param {PIXI.Renderer} renderer - The renderer this works for.\n     */\n    constructor(renderer)\n    {\n        super(renderer);\n\n        /**\n         * This is used to generate a shader that can\n         * color each vertex based on a `aTextureId`\n         * attribute that points to an texture in `uSampler`.\n         *\n         * This enables the objects with different textures\n         * to be drawn in the same draw call.\n         *\n         * You can customize your shader by creating your\n         * custom shader generator.\n         *\n         * @member {PIXI.BatchShaderGenerator}\n         * @protected\n         */\n        this.shaderGenerator = null;\n\n        /**\n         * The class that represents the geometry of objects\n         * that are going to be batched with this.\n         *\n         * @member {object}\n         * @default PIXI.BatchGeometry\n         * @protected\n         */\n        this.geometryClass = null;\n\n        /**\n         * Size of data being buffered per vertex in the\n         * attribute buffers (in floats). By default, the\n         * batch-renderer plugin uses 6:\n         *\n         * | aVertexPosition | 2 |\n         * |-----------------|---|\n         * | aTextureCoords  | 2 |\n         * | aColor          | 1 |\n         * | aTextureId      | 1 |\n         *\n         * @member {number}\n         * @readonly\n         */\n        this.vertexSize = null;\n\n        /**\n         * The WebGL state in which this renderer will work.\n         *\n         * @member {PIXI.State}\n         * @readonly\n         */\n        this.state = State.for2d();\n\n        /**\n         * The number of bufferable objects before a flush\n         * occurs automatically.\n         *\n         * @member {number}\n         * @default settings.SPRITE_MAX_TEXTURES\n         */\n        this.size = 2000 * 4;// settings.SPRITE_BATCH_SIZE, 2000 is a nice balance between mobile/desktop\n\n        /**\n         * Total count of all vertices used by the currently\n         * buffered objects.\n         *\n         * @member {number}\n         * @private\n         */\n        this._vertexCount = 0;\n\n        /**\n         * Total count of all indices used by the currently\n         * buffered objects.\n         *\n         * @member {number}\n         * @private\n         */\n        this._indexCount = 0;\n\n        /**\n         * Buffer of objects that are yet to be rendered.\n         *\n         * @member {PIXI.DisplayObject[]}\n         * @private\n         */\n        this._bufferedElements = [];\n\n        /**\n         * Number of elements that are buffered and are\n         * waiting to be flushed.\n         *\n         * @member {number}\n         * @private\n         */\n        this._bufferSize = 0;\n\n        /**\n         * This shader is generated by `this.shaderGenerator`.\n         *\n         * It is generated specifically to handle the required\n         * number of textures being batched together.\n         *\n         * @member {PIXI.Shader}\n         * @protected\n         */\n        this._shader = null;\n\n        /**\n         * Pool of `this.geometryClass` geometry objects\n         * that store buffers. They are used to pass data\n         * to the shader on each draw call.\n         *\n         * These are never re-allocated again, unless a\n         * context change occurs; however, the pool may\n         * be expanded if required.\n         *\n         * @member {PIXI.Geometry[]}\n         * @private\n         * @see PIXI.AbstractBatchRenderer.contextChange\n         */\n        this._packedGeometries = [];\n\n        /**\n         * Size of `this._packedGeometries`. It can be expanded\n         * if more than `this._packedGeometryPoolSize` flushes\n         * occur in a single frame.\n         *\n         * @member {number}\n         * @private\n         */\n        this._packedGeometryPoolSize = 2;\n\n        /**\n         * A flush may occur multiple times in a single\n         * frame. On iOS devices or when\n         * `settings.CAN_UPLOAD_SAME_BUFFER` is false, the\n         * batch renderer does not upload data to the same\n         * `WebGLBuffer` for performance reasons.\n         *\n         * This is the index into `packedGeometries` that points to\n         * geometry holding the most recent buffers.\n         *\n         * @member {number}\n         * @private\n         */\n        this._flushId = 0;\n\n        /**\n         * Pool of `BatchDrawCall` objects that `flush` used\n         * to create \"batches\" of the objects being rendered.\n         *\n         * These are never re-allocated again.\n         *\n         * @member BatchDrawCall[]\n         * @private\n         */\n        this._drawCalls = [];\n\n        for (let k = 0; k < this.size / 4; k++)\n        { // initialize the draw-calls pool to max size.\n            this._drawCalls[k] = new BatchDrawCall();\n        }\n\n        /**\n         * Pool of `ViewableBuffer` objects that are sorted in\n         * order of increasing size. The flush method uses\n         * the buffer with the least size above the amount\n         * it requires. These are used for passing attributes.\n         *\n         * The first buffer has a size of 8; each subsequent\n         * buffer has double capacity of its previous.\n         *\n         * @member {PIXI.ViewableBuffer}\n         * @private\n         * @see PIXI.AbstractBatchRenderer#getAttributeBuffer\n         */\n        this._aBuffers = {};\n\n        /**\n         * Pool of `Uint16Array` objects that are sorted in\n         * order of increasing size. The flush method uses\n         * the buffer with the least size above the amount\n         * it requires. These are used for passing indices.\n         *\n         * The first buffer has a size of 12; each subsequent\n         * buffer has double capacity of its previous.\n         *\n         * @member {Uint16Array[]}\n         * @private\n         * @see PIXI.AbstractBatchRenderer#getIndexBuffer\n         */\n        this._iBuffers = {};\n\n        /**\n         * Maximum number of textures that can be uploaded to\n         * the GPU under the current context. It is initialized\n         * properly in `this.contextChange`.\n         *\n         * @member {number}\n         * @see PIXI.AbstractBatchRenderer#contextChange\n         * @readonly\n         */\n        this.MAX_TEXTURES = 1;\n\n        this.renderer.on('prerender', this.onPrerender, this);\n        renderer.runners.contextChange.add(this);\n    }\n\n    /**\n     * Handles the `contextChange` signal.\n     *\n     * It calculates `this.MAX_TEXTURES` and allocating the\n     * packed-geometry object pool.\n     */\n    contextChange()\n    {\n        const gl = this.renderer.gl;\n\n        if (settings.PREFER_ENV === ENV.WEBGL_LEGACY)\n        {\n            this.MAX_TEXTURES = 1;\n        }\n        else\n        {\n            // step 1: first check max textures the GPU can handle.\n            this.MAX_TEXTURES = Math.min(\n                gl.getParameter(gl.MAX_TEXTURE_IMAGE_UNITS),\n                settings.SPRITE_MAX_TEXTURES);\n\n            // step 2: check the maximum number of if statements the shader can have too..\n            this.MAX_TEXTURES = checkMaxIfStatementsInShader(\n                this.MAX_TEXTURES, gl);\n        }\n\n        this._shader = this.shaderGenerator.generateShader(this.MAX_TEXTURES);\n\n        // we use the second shader as the first one depending on your browser\n        // may omit aTextureId as it is not used by the shader so is optimized out.\n        for (let i = 0; i < this._packedGeometryPoolSize; i++)\n        {\n            /* eslint-disable max-len */\n            this._packedGeometries[i] = new (this.geometryClass)();\n        }\n    }\n\n    /**\n     * Handles the `prerender` signal.\n     *\n     * It ensures that flushes start from the first geometry\n     * object again.\n     */\n    onPrerender()\n    {\n        this._flushId = 0;\n    }\n\n    /**\n     * Buffers the \"batchable\" object. It need not be rendered\n     * immediately.\n     *\n     * @param {PIXI.Sprite} sprite - the sprite to render when\n     *    using this spritebatch\n     */\n    render(element)\n    {\n        if (!element._texture.valid)\n        {\n            return;\n        }\n\n        if (this._vertexCount + (element.vertexData.length / 2) > this.size)\n        {\n            this.flush();\n        }\n\n        this._vertexCount += element.vertexData.length / 2;\n        this._indexCount += element.indices.length;\n        this._bufferedElements[this._bufferSize++] = element;\n    }\n\n    /**\n     * Renders the content _now_ and empties the current batch.\n     */\n    flush()\n    {\n        if (this._vertexCount === 0)\n        {\n            return;\n        }\n\n        const attributeBuffer = this.getAttributeBuffer(this._vertexCount);\n        const indexBuffer = this.getIndexBuffer(this._indexCount);\n        const gl = this.renderer.gl;\n\n        const {\n            _bufferedElements: elements,\n            _drawCalls: drawCalls,\n            MAX_TEXTURES,\n            _packedGeometries: packedGeometries,\n            vertexSize,\n        } = this;\n\n        const touch = this.renderer.textureGC.count;\n\n        let index = 0;\n        let _indexCount = 0;\n\n        let nextTexture;\n        let currentTexture;\n        let textureCount = 0;\n\n        let currentGroup = drawCalls[0];\n        let groupCount = 0;\n\n        let blendMode = -1;// blend-mode of previous element/sprite/object!\n\n        currentGroup.textureCount = 0;\n        currentGroup.start = 0;\n        currentGroup.blend = blendMode;\n\n        let TICK = ++BaseTexture._globalBatch;\n        let i;\n\n        for (i = 0; i < this._bufferSize; ++i)\n        {\n            const sprite = elements[i];\n\n            elements[i] = null;\n            nextTexture = sprite._texture.baseTexture;\n\n            const spriteBlendMode = premultiplyBlendMode[\n                nextTexture.premultiplyAlpha ? 1 : 0][sprite.blendMode];\n\n            if (blendMode !== spriteBlendMode)\n            {\n                blendMode = spriteBlendMode;\n\n                // force the batch to break!\n                currentTexture = null;\n                textureCount = MAX_TEXTURES;\n                TICK++;\n            }\n\n            if (currentTexture !== nextTexture)\n            {\n                currentTexture = nextTexture;\n\n                if (nextTexture._batchEnabled !== TICK)\n                {\n                    if (textureCount === MAX_TEXTURES)\n                    {\n                        TICK++;\n\n                        textureCount = 0;\n\n                        currentGroup.size = _indexCount - currentGroup.start;\n\n                        currentGroup = drawCalls[groupCount++];\n                        currentGroup.textureCount = 0;\n                        currentGroup.blend = blendMode;\n                        currentGroup.start = _indexCount;\n                    }\n\n                    nextTexture.touched = touch;\n                    nextTexture._batchEnabled = TICK;\n                    nextTexture._id = textureCount;\n\n                    currentGroup.textures[currentGroup.textureCount++] = nextTexture;\n                    textureCount++;\n                }\n            }\n\n            this.packInterleavedGeometry(sprite, attributeBuffer,\n                indexBuffer, index, _indexCount);\n\n            // push a graphics..\n            index += (sprite.vertexData.length / 2) * vertexSize;\n            _indexCount += sprite.indices.length;\n        }\n\n        BaseTexture._globalBatch = TICK;\n        currentGroup.size = _indexCount - currentGroup.start;\n\n        if (!settings.CAN_UPLOAD_SAME_BUFFER)\n        { /* Usually on iOS devices, where the browser doesn't\n            like uploads to the same buffer in a single frame. */\n            if (this._packedGeometryPoolSize <= this._flushId)\n            {\n                this._packedGeometryPoolSize++;\n                packedGeometries[this._flushId] = new (this.geometryClass)();\n            }\n\n            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData, 0);\n            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer, 0);\n\n            this.renderer.geometry.bind(packedGeometries[this._flushId]);\n            this.renderer.geometry.updateBuffers();\n            this._flushId++;\n        }\n        else\n        {\n            // lets use the faster option, always use buffer number 0\n            packedGeometries[this._flushId]._buffer.update(attributeBuffer.rawBinaryData, 0);\n            packedGeometries[this._flushId]._indexBuffer.update(indexBuffer, 0);\n\n            this.renderer.geometry.updateBuffers();\n        }\n\n        const textureSystem = this.renderer.texture;\n        const stateSystem = this.renderer.state;\n\n        // Upload textures and do the draw calls\n        for (i = 0; i < groupCount; i++)\n        {\n            const group = drawCalls[i];\n            const groupTextureCount = group.textureCount;\n\n            for (let j = 0; j < groupTextureCount; j++)\n            {\n                textureSystem.bind(group.textures[j], j);\n                group.textures[j] = null;\n            }\n\n            stateSystem.setBlendMode(group.blend);\n            gl.drawElements(group.type, group.size, gl.UNSIGNED_SHORT, group.start * 2);\n        }\n\n        // reset elements for the next flush\n        this._bufferSize = 0;\n        this._vertexCount = 0;\n        this._indexCount = 0;\n    }\n\n    /**\n     * Starts a new sprite batch.\n     */\n    start()\n    {\n        this.renderer.state.set(this.state);\n\n        this.renderer.shader.bind(this._shader);\n\n        if (settings.CAN_UPLOAD_SAME_BUFFER)\n        {\n            // bind buffer #0, we don't need others\n            this.renderer.geometry.bind(this._packedGeometries[this._flushId]);\n        }\n    }\n\n    /**\n     * Stops and flushes the current batch.\n     */\n    stop()\n    {\n        this.flush();\n    }\n\n    /**\n     * Destroys this `AbstractBatchRenderer`. It cannot be used again.\n     */\n    destroy()\n    {\n        for (let i = 0; i < this._packedGeometryPoolSize; i++)\n        {\n            if (this._packedGeometries[i])\n            {\n                this._packedGeometries[i].destroy();\n            }\n        }\n\n        this.renderer.off('prerender', this.onPrerender, this);\n\n        this._aBuffers = null;\n        this._iBuffers = null;\n        this._packedGeometries = null;\n        this._drawCalls = null;\n\n        if (this._shader)\n        {\n            this._shader.destroy();\n            this._shader = null;\n        }\n\n        super.destroy();\n    }\n\n    /**\n     * Fetches an attribute buffer from `this._aBuffers` that\n     * can hold atleast `size` floats.\n     *\n     * @param {number} size - minimum capacity required\n     * @return {ViewableBuffer} - buffer than can hold atleast `size` floats\n     * @private\n     */\n    getAttributeBuffer(size)\n    {\n        // 8 vertices is enough for 2 quads\n        const roundedP2 = nextPow2(Math.ceil(size / 8));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2 * 8;\n\n        if (this._aBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._aBuffers[roundedSize];\n\n        if (!buffer)\n        {\n            this._aBuffers[roundedSize] = buffer = new ViewableBuffer(roundedSize * this.vertexSize * 4);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Fetches an index buffer from `this._iBuffers` that can\n     * has atleast `size` capacity.\n     *\n     * @param {number} size - minimum required capacity\n     * @return {Uint16Array} - buffer that can fit `size`\n     *    indices.\n     * @private\n     */\n    getIndexBuffer(size)\n    {\n        // 12 indices is enough for 2 quads\n        const roundedP2 = nextPow2(Math.ceil(size / 12));\n        const roundedSizeIndex = log2(roundedP2);\n        const roundedSize = roundedP2 * 12;\n\n        if (this._iBuffers.length <= roundedSizeIndex)\n        {\n            this._iBuffers.length = roundedSizeIndex + 1;\n        }\n\n        let buffer = this._iBuffers[roundedSizeIndex];\n\n        if (!buffer)\n        {\n            this._iBuffers[roundedSizeIndex] = buffer = new Uint16Array(roundedSize);\n        }\n\n        return buffer;\n    }\n\n    /**\n     * Takes the four batching parameters of `element`, interleaves\n     * and pushes them into the batching attribute/index buffers given.\n     *\n     * It uses these properties: `vertexData` `uvs`, `textureId` and\n     * `indicies`. It also uses the \"tint\" of the base-texture, if\n     * present.\n     *\n     * @param {PIXI.Sprite} element - element being rendered\n     * @param {PIXI.ViewableBuffer} attributeBuffer - attribute buffer.\n     * @param {Uint16Array} indexBuffer - index buffer\n     * @param {number} aIndex - number of floats already in the attribute buffer\n     * @param {number} iIndex - number of indices already in `indexBuffer`\n     */\n    packInterleavedGeometry(element, attributeBuffer, indexBuffer, aIndex, iIndex)\n    {\n        const {\n            uint32View,\n            float32View,\n        } = attributeBuffer;\n\n        const packedVertices = aIndex / this.vertexSize;\n        const uvs = element.uvs;\n        const indicies = element.indices;\n        const vertexData = element.vertexData;\n        const textureId = element._texture.baseTexture._id;\n\n        const alpha = Math.min(element.worldAlpha, 1.0);\n        const argb = (alpha < 1.0\n          && element._texture.baseTexture.premultiplyAlpha)\n            ? premultiplyTint(element._tintRGB, alpha)\n            : element._tintRGB + (alpha * 255 << 24);\n\n        // lets not worry about tint! for now..\n        for (let i = 0; i < vertexData.length; i += 2)\n        {\n            float32View[aIndex++] = vertexData[i];\n            float32View[aIndex++] = vertexData[i + 1];\n            float32View[aIndex++] = uvs[i];\n            float32View[aIndex++] = uvs[i + 1];\n            uint32View[aIndex++] = argb;\n            float32View[aIndex++] = textureId;\n        }\n\n        for (let i = 0; i < indicies.length; i++)\n        {\n            indexBuffer[iIndex++] = packedVertices + indicies[i];\n        }\n    }\n}\n","import Shader from '../shader/Shader';\nimport Program from '../shader/Program';\nimport UniformGroup from '../shader/UniformGroup';\nimport { Matrix } from '@pixi/math';\n\n/**\n * Helper that generates batching multi-texture shader. Use it with your new BatchRenderer\n *\n * @class\n * @memberof PIXI\n */\nexport default class BatchShaderGenerator\n{\n    /**\n     * @param {string} vertexSrc - Vertex shader\n     * @param {string} fragTemplate - Fragment shader template\n     */\n    constructor(vertexSrc, fragTemplate)\n    {\n        /**\n         * Reference to the vertex shader source.\n         *\n         * @member {string}\n         */\n        this.vertexSrc = vertexSrc;\n\n        /**\n         * Reference to the fragement shader template. Must contain \"%count%\" and \"%forloop%\".\n         *\n         * @member {string}\n         */\n        this.fragTemplate = fragTemplate;\n\n        this.programCache = {};\n        this.defaultGroupCache = {};\n\n        if (fragTemplate.indexOf('%count%') < 0)\n        {\n            throw new Error('Fragment template must contain \"%count%\".');\n        }\n\n        if (fragTemplate.indexOf('%forloop%') < 0)\n        {\n            throw new Error('Fragment template must contain \"%forloop%\".');\n        }\n    }\n\n    generateShader(maxTextures)\n    {\n        if (!this.programCache[maxTextures])\n        {\n            const sampleValues = new Int32Array(maxTextures);\n\n            for (let i = 0; i < maxTextures; i++)\n            {\n                sampleValues[i] = i;\n            }\n\n            this.defaultGroupCache[maxTextures] = UniformGroup.from({ uSamplers: sampleValues }, true);\n\n            let fragmentSrc = this.fragTemplate;\n\n            fragmentSrc = fragmentSrc.replace(/%count%/gi, `${maxTextures}`);\n            fragmentSrc = fragmentSrc.replace(/%forloop%/gi, this.generateSampleSrc(maxTextures));\n\n            this.programCache[maxTextures] = new Program(this.vertexSrc, fragmentSrc);\n        }\n\n        const uniforms = {\n            tint: new Float32Array([1, 1, 1, 1]),\n            translationMatrix: new Matrix(),\n            default: this.defaultGroupCache[maxTextures],\n        };\n\n        return new Shader(this.programCache[maxTextures], uniforms);\n    }\n\n    generateSampleSrc(maxTextures)\n    {\n        let src = '';\n\n        src += '\\n';\n        src += '\\n';\n\n        for (let i = 0; i < maxTextures; i++)\n        {\n            if (i > 0)\n            {\n                src += '\\nelse ';\n            }\n\n            if (i < maxTextures - 1)\n            {\n                src += `if(vTextureId < ${i}.5)`;\n            }\n\n            src += '\\n{';\n            src += `\\n\\tcolor = texture2D(uSamplers[${i}], vTextureCoord);`;\n            src += '\\n}';\n        }\n\n        src += '\\n';\n        src += '\\n';\n\n        return src;\n    }\n}\n","import { TYPES } from '@pixi/constants';\nimport Geometry from '../geometry/Geometry';\nimport Buffer from '../geometry/Buffer';\n\n/**\n * Geometry used to batch standard PIXI content (e.g. Mesh, Sprite, Graphics objects).\n *\n * @class\n * @memberof PIXI\n */\nexport default class BatchGeometry extends Geometry\n{\n    /**\n     * @param {boolean} [_static=false] Optimization flag, where `false`\n     *        is updated every frame, `true` doesn't change frame-to-frame.\n     */\n    constructor(_static = false)\n    {\n        super();\n\n        /**\n         * Buffer used for position, color, texture IDs\n         *\n         * @member {PIXI.Buffer}\n         * @protected\n         */\n        this._buffer = new Buffer(null, _static, false);\n\n        /**\n         * Index buffer data\n         *\n         * @member {PIXI.Buffer}\n         * @protected\n         */\n        this._indexBuffer = new Buffer(null, _static, true);\n\n        this.addAttribute('aVertexPosition', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aTextureCoord', this._buffer, 2, false, TYPES.FLOAT)\n            .addAttribute('aColor', this._buffer, 4, true, TYPES.UNSIGNED_BYTE)\n            .addAttribute('aTextureId', this._buffer, 1, true, TYPES.FLOAT)\n            .addIndex(this._indexBuffer);\n    }\n}\n","import BatchShaderGenerator from './BatchShaderGenerator';\nimport BatchGeometry from './BatchGeometry';\nimport AbstractBatchRenderer from './AbstractBatchRenderer';\n\nimport defaultVertex from './texture.vert';\nimport defaultFragment from './texture.frag';\n\n/**\n * @class\n * @memberof PIXI\n * @hideconstructor\n */\nexport default class BatchPluginFactory\n{\n    /**\n     * Create a new BatchRenderer plugin for Renderer. this convenience can provide an easy way\n     * to extend BatchRenderer with all the necessary pieces.\n     * @example\n     * const fragment = `\n     * varying vec2 vTextureCoord;\n     * varying vec4 vColor;\n     * varying float vTextureId;\n     * uniform sampler2D uSamplers[%count%];\n     *\n     * void main(void){\n     *     vec4 color;\n     *     %forloop%\n     *     gl_FragColor = vColor * vec4(color.a - color.rgb, color.a);\n     * }\n     * `;\n     * const InvertBatchRenderer = PIXI.BatchPluginFactory.create({ fragment });\n     * PIXI.Renderer.registerPlugin('invert', InvertBatchRenderer);\n     * const sprite = new PIXI.Sprite();\n     * sprite.pluginName = 'invert';\n     *\n     * @static\n     * @param {object} [options]\n     * @param {string} [options.vertex=PIXI.BatchPluginFactory.defaultVertexSrc] - Vertex shader source\n     * @param {string} [options.fragment=PIXI.BatchPluginFactory.defaultFragmentTemplate] - Fragment shader template\n     * @param {number} [options.vertexSize=6] - Vertex size\n     * @param {object} [options.geometryClass=PIXI.BatchGeometry]\n     * @return {*} New batch renderer plugin\n     */\n    static create(options)\n    {\n        const { vertex, fragment, vertexSize, geometryClass } = Object.assign({\n            vertex: defaultVertex,\n            fragment: defaultFragment,\n            geometryClass: BatchGeometry,\n            vertexSize: 6,\n        }, options);\n\n        return class BatchPlugin extends AbstractBatchRenderer\n        {\n            constructor(renderer)\n            {\n                super(renderer);\n\n                this.shaderGenerator = new BatchShaderGenerator(vertex, fragment);\n                this.geometryClass = geometryClass;\n                this.vertexSize = vertexSize;\n            }\n        };\n    }\n\n    /**\n     * The default vertex shader source\n     *\n     * @static\n     * @type {string}\n     * @constant\n     */\n    static get defaultVertexSrc()\n    {\n        return defaultVertex;\n    }\n\n    /**\n     * The default fragment shader source\n     *\n     * @static\n     * @type {string}\n     * @constant\n     */\n    static get defaultFragmentTemplate()\n    {\n        return defaultFragment;\n    }\n}\n\n// Setup the default BatchRenderer plugin, this is what\n// we'll actually export at the root level\nexport const BatchRenderer = BatchPluginFactory.create();\n","import { default as Renderer } from './Renderer';\n\n/**\n * This helper function will automatically detect which renderer you should be using.\n * WebGL is the preferred renderer as it is a lot faster. If WebGL is not supported by\n * the browser then this function will return a canvas renderer\n *\n * @memberof PIXI\n * @function autoDetectRenderer\n * @param {object} [options] - The optional renderer parameters\n * @param {number} [options.width=800] - the width of the renderers view\n * @param {number} [options.height=600] - the height of the renderers view\n * @param {HTMLCanvasElement} [options.view] - the canvas to use as a view, optional\n * @param {boolean} [options.transparent=false] - If the render view is transparent, default false\n * @param {boolean} [options.autoDensity=false] - Resizes renderer view in CSS pixels to allow for\n *   resolutions other than 1\n * @param {boolean} [options.antialias=false] - sets antialias\n * @param {boolean} [options.preserveDrawingBuffer=false] - enables drawing buffer preservation, enable this if you\n *  need to call toDataUrl on the webgl context\n * @param {number} [options.backgroundColor=0x000000] - The background color of the rendered area\n *  (shown if not transparent).\n * @param {boolean} [options.clearBeforeRender=true] - This sets if the renderer will clear the canvas or\n *   not before the new render pass.\n * @param {number} [options.resolution=1] - The resolution / device pixel ratio of the renderer, retina would be 2\n * @param {boolean} [options.forceCanvas=false] - prevents selection of WebGL renderer, even if such is present, this\n *   option only is available when using **pixi.js-legacy** or **@pixi/canvas-renderer** modules, otherwise\n *   it is ignored.\n * @param {boolean} [options.forceFXAA=false] - forces FXAA antialiasing to be used over native.\n *  FXAA is faster, but may not always look as great **webgl only**\n * @param {string} [options.powerPreference] - Parameter passed to webgl context, set to \"high-performance\"\n *  for devices with dual graphics card **webgl only**\n * @return {PIXI.Renderer|PIXI.CanvasRenderer} Returns WebGL renderer if available, otherwise CanvasRenderer\n */\nexport function autoDetectRenderer(options)\n{\n    return Renderer.create(options);\n}\n"],"names":["Resource","width","height","this","_width","_height","destroyed","internal","onResize","Runner","onUpdate","onError","bind","baseTexture","add","run","unbind","remove","resize","prototypeAccessors","valid","update","load","Promise","resolve","upload","renderer","glTexture","style","dispose","destroy","removeAll","BaseImageResource","source","const","naturalWidth","videoWidth","naturalHeight","videoHeight","super","noSubImage","crossOrigin","element","url","crossorigin","undefined","indexOf","determineCrossOrigin","gl","realWidth","realHeight","pixelStorei","UNPACK_PREMULTIPLY_ALPHA_WEBGL","premultiplyAlpha","target","TEXTURE_2D","texImage2D","format","type","texSubImage2D","ImageResource","options","HTMLImageElement","imageElement","Image","src","complete","_process","preserveBitmap","createBitmap","settings","CREATE_IMAGE_BITMAP","window","createImageBitmap","bitmap","_load","autoLoad","completed","onload","onerror","process","event","then","reject","let","flag","key","_glTextures","otherTex","dirtyId","close","INSTALLED","autoDetectResource","extension","result","exec","toLowerCase","i","length","ResourcePlugin","test","BufferResource","Error","data","internalFormat","Float32Array","Uint8Array","Uint32Array","defaultBufferOptions","scaleMode","SCALE_MODES","NEAREST","FORMATS","RGBA","BaseTexture","resource","resourceOptions","resolution","RESOLUTION","mipmap","MIPMAP_TEXTURES","anisotropicLevel","ANISOTROPIC_LEVEL","wrapMode","WRAP_MODE","SCALE_MODE","TYPES","UNSIGNED_BYTE","TARGETS","uid","touched","isPowerOfTwo","_refreshPOT","dirtyStyleId","cacheId","textureCacheIds","_batchEnabled","setResource","Math","ceil","setStyle","dirty","setSize","setRealSize","isPow2","setResolution","oldResolution","emit","BaseTextureCache","TextureCache","removeFromCache","from","_pixiId","addToCache","fromBuffer","buffer","FLOAT","Object","assign","id","push","console","warn","baseTextureFromCache","index","splice","EventEmitter","_globalBatch","ArrayResource","urls","Array","isArray","items","itemDirtyIds","partTexture","addResourceAt","len","TEXTURE_2D_ARRAY","on","off","resources","map","item","promises","all","texture","texImage3D","texSubImage3D","CanvasResource","OffscreenCanvas","HTMLCanvasElement","CubeResource","SIDES","TEXTURE_CUBE_MAP_POSITIVE_X","TEXTURE_CUBE_MAP","side","SVGResource","document","createElement","svg","scale","_overrideWidth","_overrideHeight","_resolve","_crossorigin","trim","btoa","unescape","encodeURIComponent","_loadSvg","tempImage","svgWidth","svgHeight","round","canvas","getContext","drawImage","getSize","svgString","sizeMatch","SVG_SIZE","size","parseFloat","VideoResource","HTMLVideoElement","videoElement","setAttribute","sourceElement","baseSrc","split","shift","ext","substr","lastIndexOf","mime","appendChild","_autoUpdate","_isAutoUpdating","_updateFPS","updateFPS","_msToNextUpdate","autoPlay","_onCanPlay","_onError","deltaTime","elapsedMS","Ticker","shared","playbackRate","floor","readyState","HAVE_ENOUGH_DATA","HAVE_FUTURE_DATA","addEventListener","_onPlayStart","_onPlayStop","_isSourceReady","removeEventListener","_isSourcePlaying","currentTime","paused","ended","autoUpdate","play","pause","value","ImageBitmapResource","ImageBitmap","System","DepthResource","DEPTH_COMPONENT16","Framebuffer","stencil","depth","dirtyFormat","dirtySize","depthTexture","colorTextures","glFramebuffers","disposeRunner","colorTexture","addColorTexture","Texture","addDepthTexture","DEPTH_COMPONENT","UNSIGNED_SHORT","enableDepth","enableStencil","BaseRenderTexture","arguments","_canvasRenderTarget","clearColor","framebuffer","stencilMaskStack","filterStack","TextureUvs","x0","y0","x1","y1","x2","y2","x3","y3","uvsFloat32","set","frame","baseFrame","rotate","tw","th","w2","h2","cX","x","cY","y","GroupD8","NW","uX","uY","DEFAULT_UVS","orig","anchor","noFrame","Rectangle","_frame","requiresUpdate","_uvs","uvMatrix","_rotate","Number","defaultAnchor","Point","_updateID","onBaseTextureUpdated","once","updateUvs","destroyBase","clone","getResolutionOfUrl","fromLoader","imageUrl","name","textureFromCache","xNotFit","yNotFit","relationship","errorX","errorY","removeAllHandlers","tex","EMPTY","WHITE","context","fillStyle","fillRect","createWhiteTexture","RenderTexture","baseRenderTexture","_legacyRenderer","legacyRenderer","filterFrame","filterPoolKey","resizeBaseTexture","create","RenderTexturePool","textureOptions","texturePool","enableFullScreen","_pixelsWidth","_pixelsHeight","createTexture","getOptimalTexture","minWidth","minHeight","SCREEN_KEY","nextPow2","renderTexture","pop","getFilterTexture","input","filterTexture","returnTexture","returnFilterTexture","clear","destroyTextures","textures","j","setScreenSize","screenKey","Attribute","normalized","stride","start","instance","UID","Buffer","_static","_glBuffers","static","getBufferType","array","BYTES_PER_ELEMENT","Uint16Array","Int32Array","byteSizeMap","5126","5123","5121","Geometry","buffers","attributes","indexBuffer","glVertexArrayObjects","instanced","instanceCount","refCount","addAttribute","ids","bufferIndex","getAttribute","getBuffer","addIndex","getIndex","interleave","arrays","sizes","interleavedBuffer","attribute","outSize","views","ArrayBuffer","out","littleOffset","interleaveTypedArrays","geometry","slice","attrib","merge","geometries","geometryOut","offsets","offset","offset2","bufferIndexToCount","indexBufferData","Quad","QuadUv","vertices","uvs","vertexBuffer","uvBuffer","targetTextureFrame","destinationFrame","invalidate","UniformGroup","uniforms","group","syncUniforms","FilterState","legacy","sourceFrame","filters","FilterSystem","defaultFilterStack","view","statePool","quad","quadUv","tempRect","activeState","globalUniforms","outputFrame","inputSize","inputPixel","inputClamp","filterArea","filterClamp","state","padding","autoFit","filter","min","max","current","copyFrom","getBounds","pad","fit","getOptimalFilterTexture","lastState","apply","flip","flop","t","applyFilter","output","uSampler","filterGlobals","shader","draw","DRAW_MODES","TRIANGLES","TRIANGLE_STRIP","calculateSpriteMatrix","outputMatrix","sprite","_texture","mappedMatrix","worldTransform","copyTo","Matrix","TEMP_MATRIX","invert","prepend","translate","swap","emptyPool","ObjectRenderer","flush","stop","render","object","BatchSystem","emptyRenderer","currentRenderer","setObjectRenderer","objectRenderer","reset","PREFER_ENV","isMobile","any","ENV","WEBGL","WEBGL2","CONTEXT_UID","ContextSystem","webGLVersion","extensions","handleContextLost","handleContextRestored","isLost","isContextLost","contextChange","getExtension","restoreContext","initFromContext","validateContext","runners","initFromOptions","createContext","getExtensions","drawBuffers","loseContext","vertexArrayObject","anisotropicFiltering","uint32ElementIndex","floatTexture","floatTextureLinear","textureHalfFloat","textureHalfFloatLinear","colorBufferFloat","preventDefault","useProgram","postrender","getContextAttributes","FramebufferSystem","managedFramebuffers","unknownFramebuffer","viewport","hasMRT","writeDepthTexture","disposeAll","nativeDrawBuffersExtension","nativeDepthTextureExtension","WEBGL_LEGACY","activeTextures","drawBuffersWEBGL","fbo","initFramebuffer","bindFramebuffer","FRAMEBUFFER","updateFramebuffer","resizeFramebuffer","texturePart","setViewport","v","r","g","b","a","COLOR_BUFFER_BIT","DEPTH_BUFFER_BIT","createFramebuffer","bindRenderbuffer","RENDERBUFFER","renderbufferStorage","DEPTH_STENCIL","count","framebufferTexture2D","COLOR_ATTACHMENT0","TEXTURE_CUBE_MAP_NEGATIVE_X","DEPTH_ATTACHMENT","createRenderbuffer","framebufferRenderbuffer","DEPTH_STENCIL_ATTACHMENT","disposeFramebuffer","contextLost","deleteFramebuffer","deleteRenderbuffer","list","forceStencil","w","h","GLBuffer","updateID","byteLength","GeometrySystem","_activeGeometry","_activeVao","hasVao","hasInstance","canUseUInt32ElementIndex","boundBuffers","managedGeometries","managedBuffers","createVertexArray","nativeVaoExtension","createVertexArrayOES","bindVertexArray","vao","bindVertexArrayOES","deleteVertexArray","deleteVertexArrayOES","vertexAttribDivisor","instanceExt","vertexAttribDivisorANGLE","drawElementsInstanced","c","d","e","drawElementsInstancedANGLE","drawArraysInstanced","drawArraysInstancedANGLE","vaos","program","initGeometryVao","activateVao","updateBuffers","glBuffer","ELEMENT_ARRAY_BUFFER","ARRAY_BUFFER","bindBuffer","_boundBuffer","bufferSubData","drawType","STATIC_DRAW","DYNAMIC_DRAW","bufferData","checkCompatibility","geometryAttributes","shaderAttributes","attributeData","getSignature","attribs","strings","join","signature","vaoObjectHash","tempStride","tempStart","attribSize","createBuffer","disposeBuffer","deleteBuffer","disposeGeometry","buf","vaoId","keys","lastBuffer","location","enableVertexAttribArray","vertexAttribPointer","byteSize","glType","UNSIGNED_INT","drawElements","drawArrays","compileProgram","vertexSrc","fragmentSrc","attributeLocations","glVertShader","compileShader","VERTEX_SHADER","glFragShader","FRAGMENT_SHADER","createProgram","attachShader","bindAttribLocation","linkProgram","getProgramParameter","LINK_STATUS","error","VALIDATE_STATUS","getError","getProgramInfoLog","deleteProgram","deleteShader","createShader","shaderSource","getShaderParameter","COMPILE_STATUS","getShaderInfoLog","defaultValue","booleanArray","maxFragmentPrecision","unknownContext","getTestContext","setPrecision","requestedPrecision","maxSupportedPrecision","substring","precision","PRECISION","HIGH","MEDIUM","replace","GLSL_TO_SIZE","float","vec2","vec3","vec4","int","ivec2","ivec3","ivec4","bool","bvec2","bvec3","bvec4","mat2","mat3","mat4","sampler2D","mapSize","GL_TABLE","GL_TO_GLSL_TYPES","FLOAT_VEC2","FLOAT_VEC3","FLOAT_VEC4","INT","INT_VEC2","INT_VEC3","INT_VEC4","BOOL","BOOL_VEC2","BOOL_VEC3","BOOL_VEC4","FLOAT_MAT2","FLOAT_MAT3","FLOAT_MAT4","SAMPLER_2D","SAMPLER_CUBE","SAMPLER_2D_ARRAY","mapType","typeNames","tn","GLSL_TO_SINGLE_SETTERS_CACHED","samplerCube","sampler2DArray","GLSL_TO_ARRAY_SETTERS","unsafeEval","fragTemplate","checkMaxIfStatementsInShader","maxIfs","generateIfTestSrc","nameCache","Program","defaultVertexSrc","defaultFragmentSrc","PRECISION_VERTEX","PRECISION_FRAGMENT","getShaderPrecisionFormat","shaderFragment","HIGH_FLOAT","getMaxFragmentPrecision","extractData","glPrograms","getAttributeData","uniformData","getUniformData","attributesArray","totalAttributes","ACTIVE_ATTRIBUTES","attribData","getActiveAttrib","sort","totalUniforms","ACTIVE_UNIFORMS","getActiveUniform","match","staticAccessors","ProgramCache","Shader","uniformGroup","checkUniformExists","uniform","State","blendMode","BLEND_MODES","NORMAL","polygonOffset","blend","culling","depthTest","clockwiseFrontFace","_blendMode","NONE","_polygonOffset","for2d","Filter","FILTER_RESOLUTION","enabled","aTextureCoord","filterManager","currentState","SOURCE_KEY_MAP","tempMat","TextureMatrix","clampMargin","mapCoord","uClampFrame","uClampOffset","clampOffset","isSimple","multiplyUvs","mat","tx","ty","forceUpdate","append","texBase","margin","SpriteMaskFilter","maskMatrix","vertex","fragment","renderable","maskSprite","transform","npmAlpha","mask","otherMatrix","alpha","worldAlpha","maskClamp","MaskSystem","scissor","scissorData","scissorRenderTarget","enableScissor","alphaMaskPool","alphaMaskIndex","maskData","isSprite","pushSpriteMask","_activeRenderTarget","root","isFastRect","matrix","rot","atan2","PI","pushStencilMask","pushScissorMask","popSpriteMask","popScissorMask","popStencilMask","alphaMaskFilter","stashFilterArea","batch","pushStencil","popStencil","renderTarget","bounds","enable","SCISSOR_TEST","disable","StencilSystem","setMaskStack","curStackLen","STENCIL_TEST","_useCurrent","graphics","prevMaskCount","colorMask","stencilFunc","EQUAL","_getBitwiseMask","stencilOp","KEEP","INCR","STENCIL_BUFFER_BIT","clearStencil","DECR","ProjectionSystem","defaultFrame","projectionMatrix","calculateProjection","syncUniformGroup","globals","pm","setTransform","RenderTextureSystem","_backgroundColorRgba","defaultMaskStack","projection","GLProgram","uniformGroups","ShaderSystem","systemCheck","cache","func","Function","unsafeEvalSupported","dontSync","glProgram","generateShader","setUniforms","getglProgram","createSyncGroups","textureCount","generateUniformsSync","attribMap","shaderProgram","getUniformLocation","BLEND","OFFSET","CULLING","DEPTH_TEST","WINDING","StateSystem","stateId","_blendEq","setBlend","setOffset","setCullFace","setDepthTest","setFrontFace","checks","defaultState","blendModes","ONE","ONE_MINUS_SRC_ALPHA","ADD","MULTIPLY","DST_COLOR","SCREEN","ONE_MINUS_SRC_COLOR","OVERLAY","DARKEN","LIGHTEN","COLOR_DODGE","COLOR_BURN","HARD_LIGHT","SOFT_LIGHT","DIFFERENCE","EXCLUSION","HUE","SATURATION","COLOR","LUMINOSITY","NORMAL_NPM","SRC_ALPHA","ADD_NPM","SCREEN_NPM","SRC_IN","DST_ALPHA","ZERO","SRC_OUT","ONE_MINUS_DST_ALPHA","SRC_ATOP","DST_OVER","DST_IN","DST_OUT","DST_ATOP","SUBTRACT","FUNC_REVERSE_SUBTRACT","FUNC_ADD","mapWebGLBlendModesToPixi","diff","call","forceState","updateCheck","checkBlendMode","checkPolygonOffset","POLYGON_OFFSET_FILL","CULL_FACE","frontFace","setBlendMode","mode","blendFunc","blendFuncSeparate","blendEquationSeparate","setPolygonOffset","UNPACK_FLIP_Y_WEBGL","system","TextureGCSystem","checkCount","maxIdle","GC_MAX_IDLE","checkCountMax","GC_MAX_CHECK_COUNT","GC_MODE","GC_MODES","MANUAL","tm","managedTextures","wasRemoved","destroyTexture","unload","displayObject","textureSystem","_glRenderTargets","children","GLTexture","TextureSystem","boundTextures","currentLocation","_unknownBoundTextures","unknownTexture","maxTextures","getParameter","MAX_TEXTURE_IMAGE_UNITS","emptyTextures","emptyTexture2D","bindTexture","texParameteri","TEXTURE_MAG_FILTER","LINEAR","TEXTURE_MIN_FILTER","textureGC","initTexture","activeTexture","TEXTURE0","updateTexture","initTextureType","RGBA32F","HALF_FLOAT","RGBA16F","updateTextureStyle","skipRemove","deleteTexture","removeItems","MIPMAP_MODES","POW2","WRAP_MODES","CLAMP","generateMipmap","TEXTURE_WRAP_S","TEXTURE_WRAP_T","LINEAR_MIPMAP_LINEAR","NEAREST_MIPMAP_NEAREST","anisotropicExt","level","MAX_TEXTURE_MAX_ANISOTROPY_EXT","texParameterf","TEXTURE_MAX_ANISOTROPY_EXT","tempMatrix","AbstractRenderer","RENDER_OPTIONS","roundPixels","ROUND_PIXELS","deprecation","RENDERER_TYPE","UNKNOWN","screen","transparent","autoDensity","autoResize","preserveDrawingBuffer","clearBeforeRender","_backgroundColor","_backgroundColorString","backgroundColor","_tempDisplayObjectParent","Container","_lastObjectRendered","plugins","initPlugins","staticMap","o","screenWidth","screenHeight","generateTexture","region","getLocalBounds","parent","removeView","parentNode","removeChild","hex2string","hex2rgb","Renderer","prerender","addSystem","__plugins","antialias","premultipliedAlpha","powerPreference","renderingToScreen","sayHello","isWebGLSupported","ClassRef","skipUpdateTransform","cacheParent","updateTransform","registerPlugin","pluginName","ctor","CubeTexture","BatchDrawCall","ViewableBuffer","rawBinaryData","uint32View","float32View","int8View","_int8View","Int8Array","uint8View","_uint8View","int16View","_int16View","Int16Array","uint16View","_uint16View","int32View","_int32View","sizeOf","AbstractBatchRenderer","shaderGenerator","geometryClass","vertexSize","_vertexCount","_indexCount","_bufferedElements","_bufferSize","_shader","_packedGeometries","_packedGeometryPoolSize","_flushId","_drawCalls","k","_aBuffers","_iBuffers","MAX_TEXTURES","onPrerender","SPRITE_MAX_TEXTURES","vertexData","indices","nextTexture","currentTexture","attributeBuffer","getAttributeBuffer","getIndexBuffer","touch","currentGroup","drawCalls","groupCount","TICK","elements","spriteBlendMode","premultiplyBlendMode","_id","packInterleavedGeometry","CAN_UPLOAD_SAME_BUFFER","packedGeometries","_buffer","_indexBuffer","stateSystem","groupTextureCount","roundedP2","roundedSizeIndex","log2","roundedSize","aIndex","iIndex","packedVertices","indicies","textureId","argb","premultiplyTint","_tintRGB","BatchShaderGenerator","programCache","defaultGroupCache","sampleValues","uSamplers","generateSampleSrc","tint","translationMatrix","default","BatchGeometry","BatchPluginFactory","defaultVertex","defaultFragment","defaultFragmentTemplate","BatchRenderer"],"mappings":"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"}