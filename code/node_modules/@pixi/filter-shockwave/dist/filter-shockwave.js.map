{"version":3,"file":"filter-shockwave.js","sources":["../src/ShockwaveFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './shockwave.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The ShockwaveFilter class lets you apply a shockwave effect.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/shockwave.gif)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-shockwave|@pixi/filter-shockwave}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {PIXI.Point|number[]} [center=[0.5, 0.5]] See `center` property.\n * @param {object} [options] - The optional parameters of shockwave filter.\n * @param {number} [options.amplitude=0.5] - See `amplitude`` property.\n * @param {number} [options.wavelength=1.0] - See `wavelength` property.\n * @param {number} [options.speed=500.0] - See `speed` property.\n * @param {number} [options.brightness=8] - See `brightness` property.\n * @param {number} [options.radius=4] - See `radius` property.\n * @param {number} [time=0] - See `time` property.\n */\nclass ShockwaveFilter extends Filter {\n\n    constructor(center = [0.0, 0.0], options = {}, time = 0) {\n        super(vertex, fragment);\n\n        this.center = center;\n\n        if (Array.isArray(options)) {\n            // eslint-disable-next-line no-console\n            console.warn('Deprecated Warning: ShockwaveFilter params Array has been changed to options Object.');\n            options = {};\n        }\n\n        options = Object.assign({\n            amplitude: 30.0,\n            wavelength: 160.0,\n            brightness: 1.0,\n            speed: 500.0,\n            radius: -1.0,\n        }, options);\n\n        this.amplitude = options.amplitude;\n\n        this.wavelength = options.wavelength;\n\n        this.brightness = options.brightness;\n\n        this.speed = options.speed;\n\n        this.radius = options.radius;\n\n        /**\n         * Sets the elapsed time of the shockwave.\n         * It could control the current size of shockwave.\n         *\n         * @member {number}\n         */\n        this.time = time;\n    }\n\n    apply(filterManager, input, output, clear) {\n        /**\n         * There is no set/get of `time`, for performance.\n         * Because in the most real cases, `time` will be changed in ever game tick.\n         * Use set/get will take more function-call.\n         */\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * Sets the center of the shockwave in normalized screen coords. That is\n     * (0,0) is the top-left and (1,1) is the bottom right.\n     *\n     * @member {PIXI.Point|number[]}\n     */\n    get center() {\n        return this.uniforms.center;\n    }\n    set center(value) {\n        this.uniforms.center = value;\n    }\n\n    /**\n     * The amplitude of the shockwave.\n     *\n     * @member {number}\n     */\n    get amplitude() {\n        return this.uniforms.amplitude;\n    }\n    set amplitude(value) {\n        this.uniforms.amplitude = value;\n    }\n\n    /**\n     * The wavelength of the shockwave.\n     *\n     * @member {number}\n     */\n    get wavelength() {\n        return this.uniforms.wavelength;\n    }\n    set wavelength(value) {\n        this.uniforms.wavelength = value;\n    }\n\n    /**\n     * The brightness of the shockwave.\n     *\n     * @member {number}\n     */\n    get brightness() {\n        return this.uniforms.brightness;\n    }\n    set brightness(value) {\n        this.uniforms.brightness = value;\n    }\n\n    /**\n     * The speed about the shockwave ripples out.\n     * The unit is `pixel/second`\n     *\n     * @member {number}\n     */\n    get speed() {\n        return this.uniforms.speed;\n    }\n    set speed(value) {\n        this.uniforms.speed = value;\n    }\n\n    /**\n     * The maximum radius of shockwave.\n     * `< 0.0` means it's infinity.\n     *\n     * @member {number}\n     */\n    get radius() {\n        return this.uniforms.radius;\n    }\n    set radius(value) {\n        this.uniforms.radius = value;\n    }\n}\n\nexport { ShockwaveFilter };\n"],"names":["ShockwaveFilter","center","options","time","super","vertex","fragment","this","Array","isArray","console","warn","Object","assign","amplitude","wavelength","brightness","speed","radius","apply","filterManager","input","output","clear","uniforms","applyFilter","prototypeAccessors","value","Filter"],"mappings":";;;;;;;ssEAuBMA,cAEF,WAAYC,EAAqBC,EAAcC,kBAA1B,CAAC,EAAK,mBAAgB,mBAAW,GAClDC,YAAMC,EAAQC,GAEdC,KAAKN,OAASA,EAEVO,MAAMC,QAAQP,KAEdQ,QAAQC,KAAK,wFACbT,EAAU,IAGdA,EAAUU,OAAOC,OAAO,CACpBC,UAAW,GACXC,WAAY,IACZC,WAAY,EACZC,MAAO,IACPC,QAAS,GACVhB,GAEHK,KAAKO,UAAYZ,EAAQY,UAEzBP,KAAKQ,WAAab,EAAQa,WAE1BR,KAAKS,WAAad,EAAQc,WAE1BT,KAAKU,MAAQf,EAAQe,MAErBV,KAAKW,OAAShB,EAAQgB,OAQtBX,KAAKJ,KAAOA,oRAGhBgB,eAAMC,EAAeC,EAAOC,EAAQC,GAMhChB,KAAKiB,SAASrB,KAAOI,KAAKJ,KAE1BiB,EAAcK,YAAYlB,KAAMc,EAAOC,EAAQC,IASnDG,EAAIzB,sBACA,OAAOM,KAAKiB,SAASvB,QAEzByB,EAAIzB,oBAAO0B,GACPpB,KAAKiB,SAASvB,OAAS0B,GAQ3BD,EAAIZ,yBACA,OAAOP,KAAKiB,SAASV,WAEzBY,EAAIZ,uBAAUa,GACVpB,KAAKiB,SAASV,UAAYa,GAQ9BD,EAAIX,0BACA,OAAOR,KAAKiB,SAAST,YAEzBW,EAAIX,wBAAWY,GACXpB,KAAKiB,SAAST,WAAaY,GAQ/BD,EAAIV,0BACA,OAAOT,KAAKiB,SAASR,YAEzBU,EAAIV,wBAAWW,GACXpB,KAAKiB,SAASR,WAAaW,GAS/BD,EAAIT,qBACA,OAAOV,KAAKiB,SAASP,OAEzBS,EAAIT,mBAAMU,GACNpB,KAAKiB,SAASP,MAAQU,GAS1BD,EAAIR,sBACA,OAAOX,KAAKiB,SAASN,QAEzBQ,EAAIR,oBAAOS,GACPpB,KAAKiB,SAASN,OAASS,6CA3HDC"}