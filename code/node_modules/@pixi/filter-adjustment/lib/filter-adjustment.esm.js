/*!
 * @pixi/filter-adjustment - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-adjustment is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
import { Filter } from '@pixi/core';

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "varying vec2 vTextureCoord;\nuniform sampler2D uSampler;\n\nuniform float gamma;\nuniform float contrast;\nuniform float saturation;\nuniform float brightness;\nuniform float red;\nuniform float green;\nuniform float blue;\nuniform float alpha;\n\nvoid main(void)\n{\n    vec4 c = texture2D(uSampler, vTextureCoord);\n\n    if (c.a > 0.0) {\n        c.rgb /= c.a;\n\n        vec3 rgb = pow(c.rgb, vec3(1. / gamma));\n        rgb = mix(vec3(.5), mix(vec3(dot(vec3(.2125, .7154, .0721), rgb)), rgb, saturation), contrast);\n        rgb.r *= red;\n        rgb.g *= green;\n        rgb.b *= blue;\n        c.rgb = rgb * brightness;\n\n        c.rgb *= c.a;\n    }\n\n    gl_FragColor = c * alpha;\n}\n";

/**
 * The ability to adjust gamma, contrast, saturation, brightness, alpha or color-channel shift. This is a faster
 * and much simpler to use than {@link http://pixijs.download/release/docs/PIXI.filters.ColorMatrixFilter.html ColorMatrixFilter}
 * because it does not use a matrix.<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/adjustment.png)
 *
 * @class
 * @extends PIXI.Filter
 * @memberof PIXI.filters
 * @see {@link https://www.npmjs.com/package/@pixi/filter-adjustment|@pixi/filter-adjustment}
 * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}
 *
 * @param {object|number} [options] - The optional parameters of the filter.
 * @param {number} [options.gamma=1] - The amount of luminance
 * @param {number} [options.saturation=1] - The amount of color saturation
 * @param {number} [options.contrast=1] - The amount of contrast
 * @param {number} [options.brightness=1] - The overall brightness
 * @param {number} [options.red=1] - The multipled red channel
 * @param {number} [options.green=1] - The multipled green channel
 * @param {number} [options.blue=1] - The multipled blue channel
 * @param {number} [options.alpha=1] - The overall alpha amount
 */
var AdjustmentFilter = /*@__PURE__*/(function (Filter) {
    function AdjustmentFilter(options) {
        Filter.call(this, vertex, fragment);

        Object.assign(this, {
            /**
             * The amount of luminance
             * @member {number}
             * @memberof PIXI.filters.AdjustmentFilter#
             * @default 1
             */
            gamma: 1,

            /**
             * The amount of saturation
             * @member {number}
             * @memberof PIXI.filters.AdjustmentFilter#
             * @default 1
             */
            saturation: 1,

            /**
             * The amount of contrast
             * @member {number}
             * @memberof PIXI.filters.AdjustmentFilter#
             * @default 1
             */
            contrast: 1,

            /**
             * The amount of brightness
             * @member {number}
             * @memberof PIXI.filters.AdjustmentFilter#
             * @default 1
             */
            brightness: 1,

            /**
             * The amount of red channel
             * @member {number}
             * @memberof PIXI.filters.AdjustmentFilter#
             * @default 1
             */
            red: 1,

            /**
             * The amount of green channel
             * @member {number}
             * @memberof PIXI.filters.AdjustmentFilter#
             * @default 1
             */
            green: 1,

            /**
             * The amount of blue channel
             * @member {number}
             * @memberof PIXI.filters.AdjustmentFilter#
             * @default 1
             */
            blue: 1,

            /**
             * The amount of alpha channel
             * @member {number}
             * @memberof PIXI.filters.AdjustmentFilter#
             * @default 1
             */
            alpha: 1,
        }, options);
    }

    if ( Filter ) AdjustmentFilter.__proto__ = Filter;
    AdjustmentFilter.prototype = Object.create( Filter && Filter.prototype );
    AdjustmentFilter.prototype.constructor = AdjustmentFilter;

    /**
     * Override existing apply method in PIXI.Filter
     * @private
     */
    AdjustmentFilter.prototype.apply = function apply (filterManager, input, output, clear) {
        this.uniforms.gamma = Math.max(this.gamma, 0.0001);
        this.uniforms.saturation = this.saturation;
        this.uniforms.contrast = this.contrast;
        this.uniforms.brightness = this.brightness;
        this.uniforms.red = this.red;
        this.uniforms.green = this.green;
        this.uniforms.blue = this.blue;
        this.uniforms.alpha = this.alpha;

        filterManager.applyFilter(this, input, output, clear);
    };

    return AdjustmentFilter;
}(Filter));

export { AdjustmentFilter };
//# sourceMappingURL=filter-adjustment.esm.js.map
