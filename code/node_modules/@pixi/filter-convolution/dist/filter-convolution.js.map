{"version":3,"file":"filter-convolution.js","sources":["../src/ConvolutionFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './convolution.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * The ConvolutionFilter class applies a matrix convolution filter effect.\n * A convolution combines pixels in the input image with neighboring pixels to produce a new image.\n * A wide variety of image effects can be achieved through convolutions, including blurring, edge\n * detection, sharpening, embossing, and beveling. The matrix should be specified as a 9 point Array.\n * See http://docs.gimp.org/en/plug-in-convmatrix.html for more info.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/convolution.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-convolution|@pixi/filter-convolution}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param [matrix=[0,0,0,0,0,0,0,0,0]] {number[]} An array of values used for matrix transformation. Specified as a 9 point Array.\n * @param [width=200] {number} Width of the object you are transforming\n * @param [height=200] {number} Height of the object you are transforming\n */\nclass ConvolutionFilter extends Filter {\n\n    constructor(matrix, width = 200, height = 200) {\n        super(vertex, fragment);\n        this.uniforms.texelSize = new Float32Array(2);\n        this.uniforms.matrix = new Float32Array(9);\n        if (matrix !== undefined) {\n            this.matrix = matrix;\n        }\n        this.width = width;\n        this.height = height;\n    }\n\n    /**\n     * An array of values used for matrix transformation. Specified as a 9 point Array.\n     *\n     * @member {Array<number>}\n     */\n    get matrix() {\n        return this.uniforms.matrix;\n    }\n    set matrix(matrix) {\n        matrix.forEach((v, i) => this.uniforms.matrix[i] = v);\n    }\n\n    /**\n     * Width of the object you are transforming\n     *\n     * @member {number}\n     */\n    get width() {\n        return 1/this.uniforms.texelSize[0];\n    }\n    set width(value) {\n        this.uniforms.texelSize[0] = 1/value;\n    }\n\n    /**\n     * Height of the object you are transforming\n     *\n     * @member {number}\n     */\n    get height() {\n        return 1/this.uniforms.texelSize[1];\n    }\n    set height(value) {\n        this.uniforms.texelSize[1] = 1/value;\n    }\n}\n\nexport { ConvolutionFilter };\n"],"names":["ConvolutionFilter","matrix","width","height","super","vertex","fragment","this","uniforms","texelSize","Float32Array","undefined","prototypeAccessors","forEach","v","i","value","Filter"],"mappings":";;;;;;;6kDAqBMA,cAEF,WAAYC,EAAQC,EAAaC,kBAAL,oBAAc,KACtCC,YAAMC,EAAQC,GACdC,KAAKC,SAASC,UAAY,IAAIC,aAAa,GAC3CH,KAAKC,SAASP,OAAS,IAAIS,aAAa,QACzBC,IAAXV,IACAM,KAAKN,OAASA,GAElBM,KAAKL,MAAQA,EACbK,KAAKJ,OAASA,kLAQlBS,EAAIX,sBACA,OAAOM,KAAKC,SAASP,QAEzBW,EAAIX,oBAAOA,cACPA,EAAOY,iBAASC,EAAGC,UAAMR,EAAKC,SAASP,OAAOc,GAAKD,KAQvDF,EAAIV,qBACA,OAAO,EAAEK,KAAKC,SAASC,UAAU,IAErCG,EAAIV,mBAAMc,GACNT,KAAKC,SAASC,UAAU,GAAK,EAAEO,GAQnCJ,EAAIT,sBACA,OAAO,EAAEI,KAAKC,SAASC,UAAU,IAErCG,EAAIT,oBAAOa,GACPT,KAAKC,SAASC,UAAU,GAAK,EAAEO,6CA9CPC"}