{"version":3,"file":"filter-reflection.js","sources":["../src/ReflectionFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './reflection.frag';\nimport {Filter} from '@pixi/core';\n\n/**\n * Applies a reflection effect to simulate the reflection on water with waves.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/reflection.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-reflection|@pixi/filter-reflection}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n *\n * @param {object} [options] - The optional parameters of Reflection effect.\n * @param {number} [options.mirror=true] - `true` to reflect the image, `false` for waves-only\n * @param {number} [options.boundary=0.5] - Vertical position of the reflection point, default is 50% (middle)\n *                 smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n * @param {number} [options.amplitude=[0, 20]] - Starting and ending amplitude of waves\n * @param {number} [options.waveLength=[30, 100]] - Starting and ending length of waves\n * @param {number} [options.alpha=[1, 1]] - Starting and ending alpha values\n * @param {number} [options.time=0] - Time for animating position of waves\n */\nclass ReflectionFilter extends Filter {\n    constructor(options) {\n        super(vertex, fragment);\n        this.uniforms.amplitude = new Float32Array(2);\n        this.uniforms.waveLength = new Float32Array(2);\n        this.uniforms.alpha = new Float32Array(2);\n        this.uniforms.dimensions = new Float32Array(2);\n\n        Object.assign(this, {\n            mirror: true,\n            boundary: 0.5,\n            amplitude: [0, 20],\n            waveLength: [30, 100],\n            alpha: [1, 1],\n\n            /**\n             * Time for animating position of waves\n             *\n             * @member {number}\n             * @memberof PIXI.filters.ReflectionFilter#\n             * @default 0\n             */\n            time: 0,\n        }, options);\n    }\n\n    /**\n     * Override existing apply method in PIXI.Filter\n     * @private\n     */\n    apply(filterManager, input, output, clear) {\n        this.uniforms.dimensions[0] = input.filterFrame.width;\n        this.uniforms.dimensions[1] = input.filterFrame.height;\n\n        this.uniforms.time = this.time;\n\n        filterManager.applyFilter(this, input, output, clear);\n    }\n\n    /**\n     * `true` to reflect the image, `false` for waves-only\n     *\n     * @member {boolean}\n     * @default true\n     */\n    set mirror(value) {\n        this.uniforms.mirror = value;\n    }\n    get mirror() {\n        return this.uniforms.mirror;\n    }\n\n    /**\n     * Vertical position of the reflection point, default is 50% (middle)\n     * smaller numbers produce a larger reflection, larger numbers produce a smaller reflection.\n     *\n     * @member {number}\n     * @default 0.5\n     */\n    set boundary(value) {\n        this.uniforms.boundary = value;\n    }\n    get boundary() {\n        return this.uniforms.boundary;\n    }\n\n    /**\n     * Starting and ending amplitude of waves\n     * @member {number[]}\n     * @default [0, 20]\n     */\n    set amplitude(value) {\n        this.uniforms.amplitude[0] = value[0];\n        this.uniforms.amplitude[1] = value[1];\n    }\n    get amplitude() {\n        return this.uniforms.amplitude;\n    }\n\n    /**\n     * Starting and ending length of waves\n     * @member {number[]}\n     * @default [30, 100]\n     */\n    set waveLength(value) {\n        this.uniforms.waveLength[0] = value[0];\n        this.uniforms.waveLength[1] = value[1];\n    }\n    get waveLength() {\n        return this.uniforms.waveLength;\n    }\n\n    /**\n     * Starting and ending alpha values\n     * @member {number[]}\n     * @default [1, 1]\n     */\n    set alpha(value) {\n        this.uniforms.alpha[0] = value[0];\n        this.uniforms.alpha[1] = value[1];\n    }\n    get alpha() {\n        return this.uniforms.alpha;\n    }\n}\n\nexport { ReflectionFilter };\n"],"names":["ReflectionFilter","options","super","vertex","fragment","this","uniforms","amplitude","Float32Array","waveLength","alpha","dimensions","Object","assign","mirror","boundary","time","apply","filterManager","input","output","clear","filterFrame","width","height","applyFilter","prototypeAccessors","value","Filter"],"mappings":";;;;;;;imDAuBMA,cACF,WAAYC,GACRC,YAAMC,EAAQC,GACdC,KAAKC,SAASC,UAAY,IAAIC,aAAa,GAC3CH,KAAKC,SAASG,WAAa,IAAID,aAAa,GAC5CH,KAAKC,SAASI,MAAQ,IAAIF,aAAa,GACvCH,KAAKC,SAASK,WAAa,IAAIH,aAAa,GAE5CI,OAAOC,OAAOR,KAAM,CAChBS,QAAQ,EACRC,SAAU,GACVR,UAAW,CAAC,EAAG,IACfE,WAAY,CAAC,GAAI,KACjBC,MAAO,CAAC,EAAG,GASXM,KAAM,GACPf,0PAOPgB,eAAMC,EAAeC,EAAOC,EAAQC,GAChChB,KAAKC,SAASK,WAAW,GAAKQ,EAAMG,YAAYC,MAChDlB,KAAKC,SAASK,WAAW,GAAKQ,EAAMG,YAAYE,OAEhDnB,KAAKC,SAASU,KAAOX,KAAKW,KAE1BE,EAAcO,YAAYpB,KAAMc,EAAOC,EAAQC,IASnDK,EAAIZ,oBAAOa,GACPtB,KAAKC,SAASQ,OAASa,GAE3BD,EAAIZ,sBACA,OAAOT,KAAKC,SAASQ,QAUzBY,EAAIX,sBAASY,GACTtB,KAAKC,SAASS,SAAWY,GAE7BD,EAAIX,wBACA,OAAOV,KAAKC,SAASS,UAQzBW,EAAInB,uBAAUoB,GACVtB,KAAKC,SAASC,UAAU,GAAKoB,EAAM,GACnCtB,KAAKC,SAASC,UAAU,GAAKoB,EAAM,IAEvCD,EAAInB,yBACA,OAAOF,KAAKC,SAASC,WAQzBmB,EAAIjB,wBAAWkB,GACXtB,KAAKC,SAASG,WAAW,GAAKkB,EAAM,GACpCtB,KAAKC,SAASG,WAAW,GAAKkB,EAAM,IAExCD,EAAIjB,0BACA,OAAOJ,KAAKC,SAASG,YAQzBiB,EAAIhB,mBAAMiB,GACNtB,KAAKC,SAASI,MAAM,GAAKiB,EAAM,GAC/BtB,KAAKC,SAASI,MAAM,GAAKiB,EAAM,IAEnCD,EAAIhB,qBACA,OAAOL,KAAKC,SAASI,iDAtGEkB"}