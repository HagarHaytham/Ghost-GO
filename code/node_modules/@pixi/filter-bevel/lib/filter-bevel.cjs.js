/*!
 * @pixi/filter-bevel - v3.0.3
 * Compiled Wed, 29 May 2019 03:04:05 UTC
 *
 * @pixi/filter-bevel is licensed under the MIT License.
 * http://www.opensource.org/licenses/mit-license
 */
'use strict';

Object.defineProperty(exports, '__esModule', { value: true });

var core = require('@pixi/core');
var math = require('@pixi/math');
var utils = require('@pixi/utils');

var vertex = "attribute vec2 aVertexPosition;\nattribute vec2 aTextureCoord;\n\nuniform mat3 projectionMatrix;\n\nvarying vec2 vTextureCoord;\n\nvoid main(void)\n{\n    gl_Position = vec4((projectionMatrix * vec3(aVertexPosition, 1.0)).xy, 0.0, 1.0);\n    vTextureCoord = aTextureCoord;\n}";

var fragment = "precision mediump float;\n\nvarying vec2 vTextureCoord;\nuniform sampler2D uSampler;\nuniform vec4 filterArea;\n\nuniform float transformX;\nuniform float transformY;\nuniform vec3 lightColor;\nuniform float lightAlpha;\nuniform vec3 shadowColor;\nuniform float shadowAlpha;\n\nvoid main(void) {\n    vec2 transform = vec2(1.0 / filterArea) * vec2(transformX, transformY);\n    vec4 color = texture2D(uSampler, vTextureCoord);\n    float light = texture2D(uSampler, vTextureCoord - transform).a;\n    float shadow = texture2D(uSampler, vTextureCoord + transform).a;\n\n    color.rgb = mix(color.rgb, lightColor, clamp((color.a - light) * lightAlpha, 0.0, 1.0));\n    color.rgb = mix(color.rgb, shadowColor, clamp((color.a - shadow) * shadowAlpha, 0.0, 1.0));\n    gl_FragColor = vec4(color.rgb * color.a, color.a);\n}\n";

/**
 * Bevel Filter.<br>
 * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bevel.png)
 *
 * @class
 * @extends PIXI.Filter
 * @memberof PIXI.filters
 * @see {@link https://www.npmjs.com/package/@pixi/filter-bevel|@pixi/filter-bevel}
 * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}
 * @param {object} [options] - The optional parameters of the filter.
 * @param {number} [options.rotation = 45] - The angle of the light in degrees.
 * @param {number} [options.thickness = 2] - The tickness of the bevel.
 * @param {number} [options.lightColor = 0xffffff] - Color of the light.
 * @param {number} [options.lightAlpha = 0.7] - Alpha of the light.
 * @param {number} [options.shadowColor = 0x000000] - Color of the shadow.
 * @param {number} [options.shadowAlpha = 0.7] - Alpha of the shadow.
 */
var BevelFilter = /*@__PURE__*/(function (Filter) {
    function BevelFilter(options) {
        if ( options === void 0 ) options = {};

        Filter.call(this, vertex, fragment);

        this.uniforms.lightColor = new Float32Array(3);
        this.uniforms.shadowColor = new Float32Array(3);

        options = Object.assign({
            rotation: 45,
            thickness: 2,
            lightColor: 0xffffff,
            lightAlpha: 0.7,
            shadowColor: 0x000000,
            shadowAlpha: 0.7,
        }, options);

        /**
         * The angle of the light in degrees.
         * @member {number}
         * @default 45
         */
        this.rotation = options.rotation;

        /**
         * The tickness of the bevel.
         * @member {number}
         * @default 2
         */
        this.thickness = options.thickness;

        /**
         * Color of the light.
         * @member {number}
         * @default 0xffffff
         */
        this.lightColor = options.lightColor;

        /**
         * Alpha of the light.
         * @member {number}
         * @default 0.7
         */
        this.lightAlpha = options.lightAlpha;

        /**
         * Color of the shadow.
         * @member {number}
         * @default 0x000000
         */
        this.shadowColor = options.shadowColor;

        /**
         * Alpha of the shadow.
         * @member {number}
         * @default 0.7
         */
        this.shadowAlpha = options.shadowAlpha;

    }

    if ( Filter ) BevelFilter.__proto__ = Filter;
    BevelFilter.prototype = Object.create( Filter && Filter.prototype );
    BevelFilter.prototype.constructor = BevelFilter;

    var prototypeAccessors = { rotation: { configurable: true },thickness: { configurable: true },lightColor: { configurable: true },lightAlpha: { configurable: true },shadowColor: { configurable: true },shadowAlpha: { configurable: true } };

    /**
     * Update the transform matrix of offset angle.
     * @private
     */
    BevelFilter.prototype._updateTransform = function _updateTransform () {
        this.uniforms.transformX = this._thickness * Math.cos(this._angle);
        this.uniforms.transformY = this._thickness * Math.sin(this._angle);
    };

    prototypeAccessors.rotation.get = function () {
        return this._angle / math.DEG_TO_RAD;
    };
    prototypeAccessors.rotation.set = function (value) {
        this._angle = value * math.DEG_TO_RAD;
        this._updateTransform();
    };

    prototypeAccessors.thickness.get = function () {
        return this._thickness;
    };
    prototypeAccessors.thickness.set = function (value) {
        this._thickness = value;
        this._updateTransform();
    };

    prototypeAccessors.lightColor.get = function () {
        return utils.rgb2hex(this.uniforms.lightColor);
    };
    prototypeAccessors.lightColor.set = function (value) {
        utils.hex2rgb(value, this.uniforms.lightColor);
    };

    prototypeAccessors.lightAlpha.get = function () {
        return this.uniforms.lightAlpha;
    };
    prototypeAccessors.lightAlpha.set = function (value) {
        this.uniforms.lightAlpha = value;
    };

    prototypeAccessors.shadowColor.get = function () {
        return utils.rgb2hex(this.uniforms.shadowColor);
    };
    prototypeAccessors.shadowColor.set = function (value) {
        utils.hex2rgb(value, this.uniforms.shadowColor);
    };

    prototypeAccessors.shadowAlpha.get = function () {
        return this.uniforms.shadowAlpha;
    };
    prototypeAccessors.shadowAlpha.set = function (value) {
        this.uniforms.shadowAlpha = value;
    };

    Object.defineProperties( BevelFilter.prototype, prototypeAccessors );

    return BevelFilter;
}(core.Filter));

exports.BevelFilter = BevelFilter;
//# sourceMappingURL=filter-bevel.cjs.js.map
