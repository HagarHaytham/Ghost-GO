{"version":3,"file":"filter-bevel.cjs.js","sources":["../src/BevelFilter.js"],"sourcesContent":["import {vertex} from '@tools/fragments';\nimport fragment from './bevel.frag';\nimport {Filter} from '@pixi/core';\nimport {DEG_TO_RAD} from '@pixi/math';\nimport {rgb2hex, hex2rgb} from '@pixi/utils';\n\n/**\n * Bevel Filter.<br>\n * ![original](../tools/screenshots/dist/original.png)![filter](../tools/screenshots/dist/bevel.png)\n *\n * @class\n * @extends PIXI.Filter\n * @memberof PIXI.filters\n * @see {@link https://www.npmjs.com/package/@pixi/filter-bevel|@pixi/filter-bevel}\n * @see {@link https://www.npmjs.com/package/pixi-filters|pixi-filters}\n * @param {object} [options] - The optional parameters of the filter.\n * @param {number} [options.rotation = 45] - The angle of the light in degrees.\n * @param {number} [options.thickness = 2] - The tickness of the bevel.\n * @param {number} [options.lightColor = 0xffffff] - Color of the light.\n * @param {number} [options.lightAlpha = 0.7] - Alpha of the light.\n * @param {number} [options.shadowColor = 0x000000] - Color of the shadow.\n * @param {number} [options.shadowAlpha = 0.7] - Alpha of the shadow.\n */\nclass BevelFilter extends Filter {\n    constructor(options = {}) {\n        super(vertex, fragment);\n\n        this.uniforms.lightColor = new Float32Array(3);\n        this.uniforms.shadowColor = new Float32Array(3);\n\n        options = Object.assign({\n            rotation: 45,\n            thickness: 2,\n            lightColor: 0xffffff,\n            lightAlpha: 0.7,\n            shadowColor: 0x000000,\n            shadowAlpha: 0.7,\n        }, options);\n\n        /**\n         * The angle of the light in degrees.\n         * @member {number}\n         * @default 45\n         */\n        this.rotation = options.rotation;\n\n        /**\n         * The tickness of the bevel.\n         * @member {number}\n         * @default 2\n         */\n        this.thickness = options.thickness;\n\n        /**\n         * Color of the light.\n         * @member {number}\n         * @default 0xffffff\n         */\n        this.lightColor = options.lightColor;\n\n        /**\n         * Alpha of the light.\n         * @member {number}\n         * @default 0.7\n         */\n        this.lightAlpha = options.lightAlpha;\n\n        /**\n         * Color of the shadow.\n         * @member {number}\n         * @default 0x000000\n         */\n        this.shadowColor = options.shadowColor;\n\n        /**\n         * Alpha of the shadow.\n         * @member {number}\n         * @default 0.7\n         */\n        this.shadowAlpha = options.shadowAlpha;\n\n    }\n\n    /**\n     * Update the transform matrix of offset angle.\n     * @private\n     */\n    _updateTransform() {\n        this.uniforms.transformX = this._thickness * Math.cos(this._angle);\n        this.uniforms.transformY = this._thickness * Math.sin(this._angle);\n    }\n\n    get rotation() {\n        return this._angle / DEG_TO_RAD;\n    }\n    set rotation(value) {\n        this._angle = value * DEG_TO_RAD;\n        this._updateTransform();\n    }\n\n    get thickness() {\n        return this._thickness;\n    }\n    set thickness(value) {\n        this._thickness = value;\n        this._updateTransform();\n    }\n\n    get lightColor() {\n        return rgb2hex(this.uniforms.lightColor);\n    }\n    set lightColor(value) {\n        hex2rgb(value, this.uniforms.lightColor);\n    }\n\n    get lightAlpha() {\n        return this.uniforms.lightAlpha;\n    }\n    set lightAlpha(value) {\n        this.uniforms.lightAlpha = value;\n    }\n\n    get shadowColor() {\n        return rgb2hex(this.uniforms.shadowColor);\n    }\n    set shadowColor(value) {\n        hex2rgb(value, this.uniforms.shadowColor);\n    }\n\n    get shadowAlpha() {\n        return this.uniforms.shadowAlpha;\n    }\n    set shadowAlpha(value) {\n        this.uniforms.shadowAlpha = value;\n    }\n}\n\nexport { BevelFilter };\n"],"names":["super","DEG_TO_RAD","rgb2hex","hex2rgb","Filter"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAuBA,IAAM,WAAW;IACb,oBAAW,CAAC,OAAY,EAAE;yCAAP,GAAG;;QAClBA,WAAK,OAAC,MAAM,EAAE,QAAQ,CAAC,CAAC;;QAExB,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;QAC/C,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,IAAI,YAAY,CAAC,CAAC,CAAC,CAAC;;QAEhD,OAAO,GAAG,MAAM,CAAC,MAAM,CAAC;YACpB,QAAQ,EAAE,EAAE;YACZ,SAAS,EAAE,CAAC;YACZ,UAAU,EAAE,QAAQ;YACpB,UAAU,EAAE,GAAG;YACf,WAAW,EAAE,QAAQ;YACrB,WAAW,EAAE,GAAG;SACnB,EAAE,OAAO,CAAC,CAAC;;;;;;;QAOZ,IAAI,CAAC,QAAQ,GAAG,OAAO,CAAC,QAAQ,CAAC;;;;;;;QAOjC,IAAI,CAAC,SAAS,GAAG,OAAO,CAAC,SAAS,CAAC;;;;;;;QAOnC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;;;;;;;QAOrC,IAAI,CAAC,UAAU,GAAG,OAAO,CAAC,UAAU,CAAC;;;;;;;QAOrC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;;;;;;;QAOvC,IAAI,CAAC,WAAW,GAAG,OAAO,CAAC,WAAW,CAAC;;;;;;;;kPAE1C;;;;;;0BAMD,gDAAmB;QACf,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;QACnE,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,IAAI,CAAC,UAAU,GAAG,IAAI,CAAC,GAAG,CAAC,IAAI,CAAC,MAAM,CAAC,CAAC;MACtE;;IAED,mBAAI,2BAAW;QACX,OAAO,IAAI,CAAC,MAAM,GAAGC,eAAU,CAAC;MACnC;IACD,mBAAI,yBAAS,KAAK,EAAE;QAChB,IAAI,CAAC,MAAM,GAAG,KAAK,GAAGA,eAAU,CAAC;QACjC,IAAI,CAAC,gBAAgB,EAAE,CAAC;MAC3B;;IAED,mBAAI,4BAAY;QACZ,OAAO,IAAI,CAAC,UAAU,CAAC;MAC1B;IACD,mBAAI,0BAAU,KAAK,EAAE;QACjB,IAAI,CAAC,UAAU,GAAG,KAAK,CAAC;QACxB,IAAI,CAAC,gBAAgB,EAAE,CAAC;MAC3B;;IAED,mBAAI,6BAAa;QACb,OAAOC,aAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;MAC5C;IACD,mBAAI,2BAAW,KAAK,EAAE;QAClBC,aAAO,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC,CAAC;MAC5C;;IAED,mBAAI,6BAAa;QACb,OAAO,IAAI,CAAC,QAAQ,CAAC,UAAU,CAAC;MACnC;IACD,mBAAI,2BAAW,KAAK,EAAE;QAClB,IAAI,CAAC,QAAQ,CAAC,UAAU,GAAG,KAAK,CAAC;MACpC;;IAED,mBAAI,8BAAc;QACd,OAAOD,aAAO,CAAC,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;MAC7C;IACD,mBAAI,4BAAY,KAAK,EAAE;QACnBC,aAAO,CAAC,KAAK,EAAE,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC,CAAC;MAC7C;;IAED,mBAAI,8BAAc;QACd,OAAO,IAAI,CAAC,QAAQ,CAAC,WAAW,CAAC;MACpC;IACD,mBAAI,4BAAY,KAAK,EAAE;QACnB,IAAI,CAAC,QAAQ,CAAC,WAAW,GAAG,KAAK,CAAC;KACrC;;;;;EA/GqBC;;;;"}